
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftBITORleftXORleftBITANDleftEQNEleftGTLTLEGEleftLSHIFTRSHIFTleftPLUSMINUSleftMULTDIVMODrightADDROFNOTCASTPREINCPREDECINVDEREFUSUBUADDleftARROWPOSTINCPOSTDECPERIODLBRACKETADDROF AMP AND ARROW ASSIGN BITAND BITOR BREAK CARROT CASE CAST CHAR COLON COMMA DEC DEDENT DEF DEFINE DEREF DIV DOWHILE ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GE GT IF IFNDEF INC INCLUDE INDENT INT INV LBRACE LBRACKET LE LPAR LSHIFT LT MINUS MOD MULT NAME NE NEWLINE NOT NULL OR PASS PERIOD PIPE PLUS POSTDEC POSTINC PREDEC PREINC RBRACE RBRACKET RETURN RPAR RSHIFT STRING STRUCT SWITCH TYPEDEF UADD USUB WHILE WS XORmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suitefuncdef : DEF NAME parameters ARROW type_declaration COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : MULTarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE stringexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DOWHILE expr COLON suitewhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr MOD exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : expr LE exprexpr : expr GE exprexpr : expr AND exprexpr : expr OR exprexpr : expr AMP expr %prec BITANDexpr : expr PIPE expr %prec BITORexpr : expr CARROT expr %prec XORexpr : expr LSHIFT exprexpr : expr RSHIFT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : expr PERIOD NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT expr %prec CASTexpr : MULT expr %prec DEREFexpr : PLUS expr %prec UADDexpr : MINUS expr %prec USUBexpr : expr INC %prec POSTINCexpr : expr DEC %prec POSTDECexpr : INC expr %prec PREINCexpr : DEC expr %prec PREDECexpr : NOT exprexpr : INV expratom : NULLpower : atompower : atom LPAR RPARpower : atom LPAR arglist RPARexpr : expr LBRACKET expr RBRACKETexpr : AMP expr %prec ADDROFatom : NAMEatom : INTatom : FLOATatom : stringstring : STRINGatom : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprarray_contents : array_contents COMMAarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'INC':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[38,-74,-77,38,38,-17,38,38,-75,-76,38,-140,-145,38,-78,38,-144,-6,38,-119,38,38,-142,-16,110,-5,38,-141,-143,38,-134,-135,38,38,38,38,-140,-139,-127,-131,110,-18,-132,110,-4,-3,-133,-130,-125,38,38,38,38,38,38,38,38,38,38,38,38,38,-129,38,38,38,-128,38,38,38,38,38,110,-126,38,110,-146,110,110,110,38,38,-108,-104,-110,-117,-113,110,-122,-118,-114,-116,-112,-107,-121,110,-115,-120,-111,-105,-103,-109,-106,-102,110,-123,110,-136,38,-147,-83,-124,110,38,-138,38,-137,-88,110,-79,-80,-7,38,38,-84,110,-81,-100,38,110,38,-8,-99,-101,-85,-89,110,-82,-86,38,-87,110,]),'INDENT':([189,203,],[216,224,]),'ENDIF':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[39,-74,-77,-17,-75,-76,-78,39,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,39,-84,-81,-100,39,-8,-99,-101,-85,-89,-82,-86,-87,]),'MULT':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,131,135,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,191,192,195,196,197,198,199,200,201,202,207,208,209,212,213,216,218,219,220,221,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[41,-74,-77,41,41,-17,41,41,-75,-76,41,-140,-145,41,-78,41,-144,-6,41,-119,41,41,-142,-16,92,-5,41,-141,-143,41,-134,-135,41,41,41,41,-140,-139,-127,-131,92,138,-55,-57,-18,-132,138,92,-4,-3,-133,-130,-125,41,41,41,41,41,41,41,41,41,41,41,41,41,-129,41,41,41,-128,41,41,41,41,41,92,-126,41,92,-146,92,92,92,138,138,41,41,-68,-66,-65,138,-64,138,92,-104,92,92,92,92,-122,92,92,92,92,92,-121,92,92,92,92,-105,92,92,-106,92,92,-123,92,-136,41,-147,-83,-56,-58,-124,92,-67,41,-138,41,-137,-88,92,-79,-80,138,-7,41,41,-84,138,-69,92,-81,-100,41,92,41,-8,-99,-101,-85,-89,92,-82,-86,41,-87,92,]),'LE':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,93,-141,-143,-134,-135,-140,-139,-127,-131,93,-132,93,-133,-130,-125,-129,-128,93,-126,93,-146,93,93,93,-108,-104,-110,-117,93,93,-122,-118,93,93,93,93,-121,93,93,93,-111,-105,-103,-109,-106,-102,93,-123,93,-136,-147,-124,93,-138,-137,93,93,93,93,93,]),'DEDENT':([2,6,14,20,21,30,44,81,190,202,208,209,213,219,229,233,234,237,238,240,241,246,247,248,249,251,254,255,257,258,261,262,264,],[-74,-77,-17,-75,-76,-78,-16,-18,-83,-88,-79,-80,-7,-84,-81,-100,247,-92,251,-90,-94,-8,-99,-101,-85,-89,-91,-95,-82,-86,-93,-87,-96,]),'RBRACKET':([26,32,37,42,52,53,55,56,63,67,68,70,73,82,88,89,90,106,110,117,121,122,123,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,172,175,176,195,196,199,201,207,],[-145,-144,-119,-142,-141,-143,-134,-135,122,-140,-139,-127,-131,-132,-133,-130,-125,-129,-128,-126,176,-146,-148,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,199,-115,-120,-111,-105,-103,-109,-106,-102,-123,-136,-150,-147,-124,221,-138,-137,-149,]),'ASSIGN':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,79,80,82,88,89,90,106,110,117,122,138,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,172,176,191,192,195,197,199,201,221,],[-140,-145,-144,-119,-142,96,-141,-143,-134,-135,-140,-139,-127,-131,-55,-57,-132,-133,-130,-125,-129,-128,-126,-146,-68,-66,-65,-63,-64,198,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-123,-136,-147,-56,-58,-124,-67,-138,-137,-69,]),'FLOAT':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[42,-74,-77,42,42,-17,42,42,-75,-76,42,42,-78,42,-6,42,42,42,-16,-5,42,42,42,42,42,42,-18,-4,-3,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-83,42,42,-88,-79,-80,-7,42,42,-84,-81,-100,42,42,-8,-99,-101,-85,-89,-82,-86,42,-87,]),'RPAR':([26,32,37,42,52,53,55,56,67,68,70,73,77,79,80,82,88,89,90,106,110,116,117,118,122,127,134,135,138,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,169,170,171,172,176,179,180,182,183,184,191,192,195,197,199,201,220,221,222,223,230,],[-145,-144,-119,-142,-141,-143,-134,-135,-140,-139,-127,-131,133,-55,-57,-132,-133,-130,-125,-129,-128,168,-126,172,-146,181,193,-61,-68,-66,-65,-63,-64,-53,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-123,-152,201,-153,-136,-147,-12,-11,-13,-14,210,-56,-58,-124,-67,-138,-137,-62,-69,-54,-151,-15,]),'AMP':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[7,-74,-77,7,7,-17,7,7,-75,-76,7,-140,-145,7,-78,7,-144,-6,7,-119,7,7,-142,-16,99,-5,7,-141,-143,7,-134,-135,7,7,7,7,-140,-139,-127,-131,99,-18,-132,99,-4,-3,-133,-130,-125,7,7,7,7,7,7,7,7,7,7,7,7,7,-129,7,7,7,-128,7,7,7,7,7,99,-126,7,99,-146,99,99,99,7,7,-108,-104,-110,-117,-113,99,-122,-118,-114,-116,-112,-107,-121,99,-115,-120,-111,-105,-103,-109,-106,-102,99,-123,99,-136,7,-147,-83,-124,99,7,-138,7,-137,-88,99,-79,-80,-7,7,7,-84,99,-81,-100,7,99,7,-8,-99,-101,-85,-89,99,-82,-86,7,-87,99,]),'EQ':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,102,-141,-143,-134,-135,-140,-139,-127,-131,102,-132,102,-133,-130,-125,-129,-128,102,-126,102,-146,102,102,102,-108,-104,-110,-117,102,102,-122,-118,102,102,102,-107,-121,102,102,-120,-111,-105,-103,-109,-106,-102,102,-123,102,-136,-147,-124,102,-138,-137,102,102,102,102,102,]),'BREAK':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[45,-74,-77,-17,-75,-76,-78,45,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,45,-84,-81,-100,45,-8,-99,-101,-85,-89,-82,-86,-87,]),'ELLIPSIS':([127,211,],[183,183,]),'LBRACE':([18,27,72,75,77,83,120,132,185,194,],[75,75,129,75,75,75,174,75,75,75,]),'PIPE':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,105,-141,-143,-134,-135,-140,-139,-127,-131,105,-132,105,-133,-130,-125,-129,-128,105,-126,105,-146,105,105,105,-108,-104,-110,-117,-113,105,-122,-118,-114,-116,-112,-107,-121,105,-115,-120,-111,-105,-103,-109,-106,-102,105,-123,105,-136,-147,-124,105,-138,-137,105,105,105,105,105,]),'$end':([0,2,6,14,20,21,30,31,33,35,44,49,50,81,86,87,190,202,208,209,213,219,229,246,247,249,251,257,258,262,],[-154,-74,-77,-17,-75,-76,-78,-1,0,-6,-16,-2,-5,-18,-4,-3,-83,-88,-79,-80,-7,-84,-81,-8,-99,-85,-89,-82,-86,-87,]),'DEFINE':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[48,-74,-77,-17,-75,-76,-78,48,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,48,-84,-81,-100,48,-8,-99,-101,-85,-89,-82,-86,-87,]),'NE':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,107,-141,-143,-134,-135,-140,-139,-127,-131,107,-132,107,-133,-130,-125,-129,-128,107,-126,107,-146,107,107,107,-108,-104,-110,-117,107,107,-122,-118,107,107,107,-107,-121,107,107,-120,-111,-105,-103,-109,-106,-102,107,-123,107,-136,-147,-124,107,-138,-137,107,107,107,107,107,]),'SWITCH':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[60,-74,-77,-17,-75,-76,-78,60,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,60,-84,-81,-100,60,-8,-99,-101,-85,-89,-82,-86,-87,]),'GE':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,108,-141,-143,-134,-135,-140,-139,-127,-131,108,-132,108,-133,-130,-125,-129,-128,108,-126,108,-146,108,108,108,-108,-104,-110,-117,108,108,-122,-118,108,108,108,108,-121,108,108,108,-111,-105,-103,-109,-106,-102,108,-123,108,-136,-147,-124,108,-138,-137,108,108,108,108,108,]),'NEWLINE':([0,1,2,3,4,5,6,8,9,10,14,19,20,21,22,23,25,26,28,30,31,32,34,35,37,39,40,42,43,44,45,46,47,50,52,53,55,56,57,58,59,61,67,68,70,71,73,79,80,81,82,85,86,87,88,89,90,106,110,115,117,122,126,128,130,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,168,172,173,176,177,178,181,186,190,191,192,195,197,199,201,202,208,209,210,212,213,215,219,221,222,229,231,235,244,245,246,247,249,250,251,256,257,258,260,262,],[50,-30,-74,-22,-32,-24,-77,-28,-52,-29,-17,-27,-75,-76,81,-40,-140,-145,-44,-78,87,-144,-19,-6,-119,-37,-23,-142,-26,-16,-39,-31,-71,-5,-141,-143,-134,-135,-20,-21,-38,-25,-140,-139,-127,-36,-131,-55,-57,-18,-132,-73,-4,-3,-133,-130,-125,-129,-128,-35,-126,-146,-70,-50,189,-68,-66,-65,-63,-64,-53,-33,-108,-104,-110,-117,-113,-72,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-34,-123,-136,203,-147,189,189,-9,189,-83,-56,-58,-124,-67,-138,-137,-88,-79,-80,-10,-51,-7,-41,-84,-69,-54,-81,189,189,-45,189,-8,-99,-85,189,-89,189,-82,-86,189,-87,]),'MINUS':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[12,-74,-77,12,12,-17,12,12,-75,-76,12,-140,-145,12,-78,12,-144,-6,12,-119,12,12,-142,-16,111,-5,12,-141,-143,12,-134,-135,12,12,12,12,-140,-139,-127,-131,111,-18,-132,111,-4,-3,-133,-130,-125,12,12,12,12,12,12,12,12,12,12,12,12,12,-129,12,12,12,-128,12,12,12,12,12,111,-126,12,111,-146,111,111,111,12,12,111,-104,111,111,111,111,-122,111,111,111,111,111,-121,111,111,111,111,-105,-103,111,-106,-102,111,-123,111,-136,12,-147,-83,-124,111,12,-138,12,-137,-88,111,-79,-80,-7,12,12,-84,111,-81,-100,12,111,12,-8,-99,-101,-85,-89,111,-82,-86,12,-87,111,]),'CASE':([224,240,241,247,255,264,],[239,239,-94,-99,-95,-96,]),'IFNDEF':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[13,-74,-77,-17,-75,-76,-78,13,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,13,-84,-81,-100,13,-8,-99,-101,-85,-89,-82,-86,-87,]),'LPAR':([0,2,6,7,12,14,16,17,18,20,21,24,25,26,27,29,30,31,32,35,36,38,41,42,44,50,51,52,53,54,55,56,60,63,64,65,67,69,75,77,81,83,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,122,132,136,137,175,176,185,190,194,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[51,-74,-77,51,51,-17,51,51,77,-75,-76,51,-140,-145,77,51,-78,51,-144,-6,51,51,51,-142,-16,-5,51,-141,-143,51,-134,118,51,51,51,51,-140,127,77,77,-18,77,-4,-3,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-146,77,51,51,51,-147,77,-83,77,51,51,-88,-79,-80,-7,51,51,-84,-81,-100,51,51,-8,-99,-101,-85,-89,-82,-86,51,-87,]),'INT':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[52,-74,-77,52,52,-17,52,52,-75,-76,52,52,-78,52,-6,52,52,52,-16,-5,52,52,52,52,52,52,-18,-4,-3,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-83,52,52,-88,-79,-80,-7,52,52,-84,-81,-100,52,52,-8,-99,-101,-85,-89,-82,-86,52,-87,]),'ENUM':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[15,-74,-77,-17,-75,-76,-78,15,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,15,-84,-81,-100,15,-8,-99,-101,-85,-89,-82,-86,-87,]),'NOT':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[24,-74,-77,24,24,-17,24,24,-75,-76,24,24,-78,24,-6,24,24,24,-16,-5,24,24,24,24,24,24,-18,-4,-3,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-83,24,24,-88,-79,-80,-7,24,24,-84,-81,-100,24,24,-8,-99,-101,-85,-89,-82,-86,24,-87,]),'DEC':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[16,-74,-77,16,16,-17,16,16,-75,-76,16,-140,-145,16,-78,16,-144,-6,16,-119,16,16,-142,-16,106,-5,16,-141,-143,16,-134,-135,16,16,16,16,-140,-139,-127,-131,106,-18,-132,106,-4,-3,-133,-130,-125,16,16,16,16,16,16,16,16,16,16,16,16,16,-129,16,16,16,-128,16,16,16,16,16,106,-126,16,106,-146,106,106,106,16,16,-108,-104,-110,-117,-113,106,-122,-118,-114,-116,-112,-107,-121,106,-115,-120,-111,-105,-103,-109,-106,-102,106,-123,106,-136,16,-147,-83,-124,106,16,-138,16,-137,-88,106,-79,-80,-7,16,16,-84,106,-81,-100,16,106,16,-8,-99,-101,-85,-89,106,-82,-86,16,-87,106,]),'RBRACE':([26,32,37,42,52,53,55,56,67,68,70,73,79,80,82,88,89,90,106,110,117,122,131,138,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,172,176,187,188,191,192,195,197,199,201,204,205,221,222,225,226,227,232,243,],[-145,-144,-119,-142,-141,-143,-134,-135,-140,-139,-127,-131,-55,-57,-132,-133,-130,-125,-129,-128,-126,-146,191,-68,-66,-65,-63,-64,-53,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-123,-136,-147,215,-42,-56,-58,-124,-67,-138,-137,-154,-49,-69,-54,-46,-47,244,-43,-48,]),'IF':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[17,-74,-77,-17,-75,-76,-78,17,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,17,-84,-81,-100,17,-8,-99,-101,-85,-89,-82,-86,-87,]),'ELSE':([190,209,224,240,241,247,255,258,264,],[217,228,242,242,-94,-99,-95,217,-96,]),'LT':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[18,-74,-77,18,18,-17,18,18,-75,-76,18,-140,-145,18,-78,18,-144,-6,18,-119,18,18,-142,-16,91,-5,18,-141,-143,18,-134,-135,18,18,18,18,-140,-139,-127,-131,91,-18,-132,91,-4,-3,-133,-130,-125,18,18,18,18,18,18,18,18,18,18,18,18,18,-129,18,18,18,-128,18,18,18,18,18,91,-126,18,91,-146,91,91,91,18,18,-108,-104,-110,-117,91,91,-122,-118,91,91,91,91,-121,91,91,91,-111,-105,-103,-109,-106,-102,91,-123,91,-136,18,-147,-83,-124,91,18,-138,18,-137,-88,91,-79,-80,-7,18,18,-84,91,-81,-100,18,91,18,-8,-99,-101,-85,-89,91,-82,-86,18,-87,91,]),'STRING':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,66,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[32,-74,-77,32,32,-17,32,32,-75,-76,32,32,-78,32,-6,32,32,32,-16,-5,32,32,32,32,32,32,32,-18,-4,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-83,32,32,-88,-79,-80,-7,32,32,-84,-81,-100,32,32,-8,-99,-101,-85,-89,-82,-86,32,-87,]),'PERIOD':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,97,-141,-143,-134,-135,-140,97,97,97,97,97,97,97,97,97,-129,-128,97,97,97,-146,97,97,97,97,97,97,97,97,97,-122,97,97,97,97,97,-121,97,97,97,97,97,97,97,97,97,97,-123,97,-136,-147,97,97,-138,-137,97,97,97,97,97,]),'NULL':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[55,-74,-77,55,55,-17,55,55,-75,-76,55,55,-78,55,-6,55,55,55,-16,-5,55,55,55,55,55,55,-18,-4,-3,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-83,55,55,-88,-79,-80,-7,55,55,-84,-81,-100,55,55,-8,-99,-101,-85,-89,-82,-86,55,-87,]),'OR':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,95,-141,-143,-134,-135,-140,-139,-127,-131,95,-132,95,-133,-130,-125,-129,-128,95,-126,95,-146,95,95,95,-108,-104,-110,-117,-113,95,-122,-118,-114,-116,-112,-107,-121,95,-115,-120,-111,-105,-103,-109,-106,-102,95,-123,95,-136,-147,-124,95,-138,-137,95,95,95,95,95,]),'LSHIFT':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,94,-141,-143,-134,-135,-140,-139,-127,-131,94,-132,94,-133,-130,-125,-129,-128,94,-126,94,-146,94,94,94,94,-104,94,-117,94,94,-122,-118,94,94,94,94,-121,94,94,94,94,-105,-103,94,-106,-102,94,-123,94,-136,-147,-124,94,-138,-137,94,94,94,94,94,]),'AND':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,101,-141,-143,-134,-135,-140,-139,-127,-131,101,-132,101,-133,-130,-125,-129,-128,101,-126,101,-146,101,101,101,-108,-104,-110,-117,101,101,-122,-118,-114,-116,-112,-107,-121,101,-115,-120,-111,-105,-103,-109,-106,-102,101,-123,101,-136,-147,-124,101,-138,-137,101,101,101,101,101,]),'PASS':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[59,-74,-77,-17,-75,-76,-78,59,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,59,-84,-81,-100,59,-8,-99,-101,-85,-89,-82,-86,-87,]),'RSHIFT':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,98,-141,-143,-134,-135,-140,-139,-127,-131,98,-132,98,-133,-130,-125,-129,-128,98,-126,98,-146,98,98,98,98,-104,98,-117,98,98,-122,-118,98,98,98,98,-121,98,98,98,98,-105,-103,98,-106,-102,98,-123,98,-136,-147,-124,98,-138,-137,98,98,98,98,98,]),'CARROT':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,100,-141,-143,-134,-135,-140,-139,-127,-131,100,-132,100,-133,-130,-125,-129,-128,100,-126,100,-146,100,100,100,-108,-104,-110,-117,-113,100,-122,-118,-114,-116,-112,-107,-121,100,-115,-120,-111,-105,-103,-109,-106,-102,100,-123,100,-136,-147,-124,100,-138,-137,100,100,100,100,100,]),'DEF':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[11,-74,-77,-17,-75,-76,-78,11,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,11,-84,-81,-100,11,-8,-99,-101,-85,-89,-82,-86,-87,]),'INCLUDE':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[66,-74,-77,-17,-75,-76,-78,66,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,66,-84,-81,-100,66,-8,-99,-101,-85,-89,-82,-86,-87,]),'STRUCT':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[62,-74,-77,-17,-75,-76,-78,62,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,62,-84,-81,-100,62,-8,-99,-101,-85,-89,-82,-86,-87,]),'ARROW':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,76,82,85,88,89,90,106,110,116,117,119,122,123,124,125,128,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,181,193,195,196,199,201,207,210,222,236,252,263,],[-140,-145,-144,-119,-142,103,-141,-143,-134,-135,-140,103,103,103,103,132,103,103,103,103,103,-129,-128,103,103,103,-146,103,103,103,185,-59,103,103,103,103,103,103,-122,103,103,103,103,103,-121,103,103,103,103,103,103,103,103,103,103,-123,103,-136,-147,-9,-60,103,103,-138,-137,103,-10,103,103,103,103,]),'LBRACKET':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,131,135,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,191,192,195,196,197,198,199,200,201,202,207,208,209,212,213,216,218,219,220,221,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[63,-74,-77,63,63,-17,63,63,-75,-76,63,-140,-145,63,-78,63,-144,-6,63,-119,63,63,-142,-16,104,-5,63,-141,-143,63,-134,-135,63,63,63,63,-140,104,104,104,104,137,-55,-57,-18,104,137,104,-4,-3,104,104,104,63,63,63,63,63,63,63,63,63,63,63,63,63,-129,63,63,63,-128,63,63,63,63,63,104,104,63,104,-146,104,104,104,137,137,63,63,-68,-66,-65,137,-64,137,104,104,104,104,104,104,-122,104,104,104,104,104,-121,104,104,104,104,104,104,104,104,104,104,-123,104,-136,63,-147,-83,-56,-58,104,104,-67,63,-138,63,-137,-88,104,-79,-80,137,-7,63,63,-84,137,-69,104,-81,-100,63,104,63,-8,-99,-101,-85,-89,104,-82,-86,63,-87,104,]),'NAME':([0,2,6,7,11,12,13,14,15,16,17,18,20,21,24,27,29,30,31,35,36,38,41,44,48,50,51,54,60,62,63,64,65,75,77,79,80,81,83,84,86,87,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,114,115,118,127,129,132,136,137,138,139,140,141,142,174,175,185,190,191,192,194,197,198,200,202,208,209,211,213,214,216,218,219,221,225,229,233,234,239,246,247,248,249,251,257,258,259,262,],[25,-74,-77,67,69,67,71,-17,72,67,67,79,-75,-76,67,79,67,-78,25,-6,67,67,67,-16,115,-5,67,67,67,120,67,67,67,79,79,-55,-57,-18,79,144,-4,-3,67,67,67,67,67,67,151,67,67,67,67,67,157,67,67,67,67,67,67,67,67,67,67,67,179,188,79,67,67,-68,-66,-65,-63,-64,206,67,79,-83,-56,-58,79,-67,67,67,-88,-79,-80,179,-7,232,25,67,-84,-69,206,-81,-100,25,67,-8,-99,-101,-85,-89,-82,-86,67,-87,]),'CHAR':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[26,-74,-77,26,26,-17,26,26,-75,-76,26,26,-78,26,-6,26,26,26,-16,-5,26,26,26,26,26,26,-18,-4,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-83,26,26,-88,-79,-80,-7,26,26,-84,-81,-100,26,26,-8,-99,-101,-85,-89,-82,-86,26,-87,]),'ELIF':([190,247,258,],[218,-99,218,]),'PLUS':([0,2,6,7,12,14,16,17,20,21,24,25,26,29,30,31,32,35,36,37,38,41,42,44,47,50,51,52,53,54,55,56,60,63,64,65,67,68,70,73,74,81,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,136,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,175,176,190,195,196,198,199,200,201,202,207,208,209,213,216,218,219,222,229,233,234,236,239,246,247,248,249,251,252,257,258,259,262,263,],[54,-74,-77,54,54,-17,54,54,-75,-76,54,-140,-145,54,-78,54,-144,-6,54,-119,54,54,-142,-16,114,-5,54,-141,-143,54,-134,-135,54,54,54,54,-140,-139,-127,-131,114,-18,-132,114,-4,-3,-133,-130,-125,54,54,54,54,54,54,54,54,54,54,54,54,54,-129,54,54,54,-128,54,54,54,54,54,114,-126,54,114,-146,114,114,114,54,54,114,-104,114,114,114,114,-122,114,114,114,114,114,-121,114,114,114,114,-105,-103,114,-106,-102,114,-123,114,-136,54,-147,-83,-124,114,54,-138,54,-137,-88,114,-79,-80,-7,54,54,-84,114,-81,-100,54,114,54,-8,-99,-101,-85,-89,114,-82,-86,54,-87,114,]),'TYPEDEF':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[27,-74,-77,-17,-75,-76,-78,27,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,27,-84,-81,-100,27,-8,-99,-101,-85,-89,-82,-86,-87,]),'DIV':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,109,-141,-143,-134,-135,-140,-139,-127,-131,109,-132,109,-133,-130,-125,-129,-128,109,-126,109,-146,109,109,109,109,-104,109,109,109,109,-122,109,109,109,109,109,-121,109,109,109,109,-105,109,109,-106,109,109,-123,109,-136,-147,-124,109,-138,-137,109,109,109,109,109,]),'RETURN':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[29,-74,-77,-17,-75,-76,-78,29,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,29,-84,-81,-100,29,-8,-99,-101,-85,-89,-82,-86,-87,]),'DOWHILE':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[64,-74,-77,-17,-75,-76,-78,64,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,64,-84,-81,-100,64,-8,-99,-101,-85,-89,-82,-86,-87,]),'WHILE':([0,2,6,14,20,21,30,31,35,44,50,81,86,87,190,202,208,209,213,216,219,229,233,234,246,247,248,249,251,257,258,262,],[65,-74,-77,-17,-75,-76,-78,65,-6,-16,-5,-18,-4,-3,-83,-88,-79,-80,-7,65,-84,-81,-100,65,-8,-99,-101,-85,-89,-82,-86,-87,]),'COMMA':([26,32,37,42,52,53,55,56,67,68,70,73,79,80,82,88,89,90,106,110,117,121,122,123,134,135,138,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,169,170,171,172,175,176,179,180,182,183,184,187,188,191,192,195,197,199,201,204,205,207,220,221,222,223,230,232,243,252,253,263,],[-145,-144,-119,-142,-141,-143,-134,-135,-140,-139,-127,-131,-55,-57,-132,-133,-130,-125,-129,-128,-126,175,-146,-148,194,-61,-68,-66,-65,-63,-64,-53,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-123,-152,200,-153,-136,-150,-147,-12,-11,-13,-14,211,214,-42,-56,-58,-124,-67,-138,-137,225,-49,-149,-62,-69,-54,-151,-15,-43,-48,-97,259,-98,]),'GT':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,78,79,80,82,85,88,89,90,106,110,116,117,119,122,123,124,125,138,139,140,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,191,192,195,196,197,199,201,207,221,222,236,252,263,],[-140,-145,-144,-119,-142,112,-141,-143,-134,-135,-140,-139,-127,-131,112,136,-55,-57,-132,112,-133,-130,-125,-129,-128,112,-126,112,-146,112,112,112,-68,-66,-65,-63,-64,-108,-104,-110,-117,112,112,-122,-118,112,112,112,112,-121,112,112,112,-111,-105,-103,-109,-106,-102,112,-123,112,-136,-147,-56,-58,-124,112,-67,-138,-137,112,-69,112,112,112,112,]),'MOD':([25,26,32,37,42,47,52,53,55,56,67,68,70,73,74,82,85,88,89,90,106,110,116,117,119,122,123,124,125,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,176,195,196,199,201,207,222,236,252,263,],[-140,-145,-144,-119,-142,113,-141,-143,-134,-135,-140,-139,-127,-131,113,-132,113,-133,-130,-125,-129,-128,113,-126,113,-146,113,113,113,113,-104,113,113,113,113,-122,113,113,113,113,113,-121,113,113,113,113,-105,113,113,-106,113,113,-123,113,-136,-147,-124,113,-138,-137,113,113,113,113,113,]),'COLON':([25,26,32,37,42,52,53,55,56,67,68,70,73,74,79,80,82,88,89,90,106,110,117,119,122,124,125,128,138,139,140,141,142,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,168,172,176,179,181,191,192,195,197,199,201,206,210,212,217,221,228,236,242,252,253,263,],[83,-145,-144,-119,-142,-141,-143,-134,-135,-140,-139,-127,-131,130,-55,-57,-132,-133,-130,-125,-129,-128,-126,173,-146,177,178,186,-68,-66,-65,-63,-64,-108,-104,-110,-117,-113,-122,-118,-114,-116,-112,-107,-121,-115,-120,-111,-105,-103,-109,-106,-102,-123,-136,-147,83,-9,-56,-58,-124,-67,-138,-137,83,-10,231,235,-69,245,250,256,-97,260,-98,]),'INV':([0,2,6,7,12,14,16,17,20,21,24,29,30,31,35,36,38,41,44,50,51,54,60,63,64,65,81,86,87,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,190,198,200,202,208,209,213,216,218,219,229,233,234,239,246,247,248,249,251,257,258,259,262,],[36,-74,-77,36,36,-17,36,36,-75,-76,36,36,-78,36,-6,36,36,36,-16,-5,36,36,36,36,36,36,-18,-4,-3,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-83,36,36,-88,-79,-80,-7,36,36,-84,-81,-100,36,36,-8,-99,-101,-85,-89,-82,-86,36,-87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'typedef_stmt':([0,31,216,234,],[1,1,1,1,]),'if_stmt':([0,31,216,234,],[2,2,2,2,]),'ifndef_stmt':([0,31,216,234,],[3,3,3,3,]),'suite':([130,177,178,186,231,235,245,250,256,260,],[190,208,209,213,246,249,257,258,261,264,]),'pass':([0,31,216,234,],[4,4,4,4,]),'atom':([0,7,12,16,17,24,29,31,36,38,41,51,54,60,63,64,65,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,198,200,216,218,234,239,259,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'expr_stmt':([0,31,216,234,],[5,5,5,5,]),'case_list':([224,],[240,]),'struct_decl_list':([174,],[204,]),'arglist':([118,],[170,]),'func_decl':([0,31,216,234,],[43,43,43,43,]),'enum_decl_stmt':([0,31,216,234,],[8,8,8,8,]),'var_decl':([0,31,127,174,211,216,225,234,],[9,9,182,205,182,9,243,9,]),'break':([0,31,216,234,],[46,46,46,46,]),'array':([78,84,131,135,141,143,192,212,220,],[140,140,140,140,140,140,140,140,140,]),'struct_decl_stmt':([0,31,216,234,],[10,10,10,10,]),'expr':([0,7,12,16,17,24,29,31,36,38,41,51,54,60,63,64,65,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,198,200,216,218,234,239,259,],[47,68,70,73,74,82,85,47,88,89,90,116,117,119,123,124,125,145,146,147,148,149,150,152,153,154,155,156,158,159,160,161,162,163,164,165,166,167,171,195,196,207,222,171,47,236,47,252,263,]),'pointer_or_array':([78,84,131,135,141,143,192,212,220,],[139,139,139,139,197,139,139,139,139,]),'empty':([0,204,],[49,226,]),'switch_stmts':([224,],[238,]),'param_list_contents':([77,],[134,]),'switch_stmt':([0,31,216,234,],[6,6,6,6,]),'if_orelse':([190,258,],[219,262,]),'optional_comma':([204,],[227,]),'inline_func_decl':([18,27,75,77,83,132,185,194,],[80,80,80,80,80,80,80,80,]),'string':([0,7,12,16,17,24,29,31,36,38,41,51,54,60,63,64,65,66,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,198,200,216,218,234,239,259,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,126,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'enum_name_list':([129,],[187,]),'type_declaration':([18,27,75,77,83,132,185,194,],[78,84,131,135,143,192,212,220,]),'power':([0,7,12,16,17,24,29,31,36,38,41,51,54,60,63,64,65,91,92,93,94,95,96,98,99,100,101,102,104,105,107,108,109,111,112,113,114,115,118,136,137,175,198,200,216,218,234,239,259,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'stmts':([216,],[234,]),'case_expr_list':([239,],[253,]),'compound_stmt':([0,31,216,234,],[14,14,14,14,]),'default':([224,240,],[237,254,]),'var_decl_stmt':([0,31,216,234,],[19,19,19,19,]),'while_orelse':([209,],[229,]),'varaglist_elem':([127,211,],[180,230,]),'pointer':([78,84,131,135,141,143,192,212,220,],[142,142,142,142,142,142,142,142,142,]),'include_stmt':([0,31,216,234,],[57,57,57,57,]),'argument':([118,200,],[169,223,]),'define_stmt':([0,31,216,234,],[58,58,58,58,]),'dowhile_stmt':([0,31,216,234,],[21,21,21,21,]),'small_stmt':([0,31,216,234,],[22,22,22,22,]),'assign_stmt':([0,31,216,234,],[61,61,61,61,]),'switch_suite':([173,],[202,]),'varargslist':([127,],[184,]),'array_contents':([63,],[121,]),'while_stmt':([0,31,216,234,],[20,20,20,20,]),'endif_stmt':([0,31,216,234,],[40,40,40,40,]),'struct_decl':([0,31,216,234,],[28,28,28,28,]),'funcdef':([0,31,216,234,],[30,30,30,30,]),'stmt_list':([0,],[31,]),'bracket_list':([78,84,131,135,143,192,212,220,],[141,141,141,141,141,141,141,141,]),'simple_stmt':([0,31,216,234,],[44,44,44,44,]),'return_stmt':([0,31,216,234,],[34,34,34,34,]),'param_type_list':([18,27,75,77,83,132,185,194,],[76,76,76,76,76,76,76,76,]),'stmt':([0,31,216,234,],[35,86,233,248,]),'module':([0,],[33,]),'case':([224,240,],[241,255,]),'parameters':([69,],[128,]),'enum_decl':([0,31,216,234,],[23,23,23,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',90),
  ('module -> empty','module',1,'p_empty_module','cparse.py',96),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',103),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',107),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',111),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',115),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',120),
  ('funcdef -> DEF NAME parameters ARROW type_declaration COLON suite','funcdef',7,'p_funcdef2','cparse.py',126),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',133),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',137),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',141),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',145),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',146),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',150),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',155),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',159),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',160),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',168),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',172),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',173),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',174),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',175),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',176),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',177),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',178),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',179),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',180),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',181),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',182),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',183),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',184),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',185),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',191),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',198),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',203),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',208),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',213),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',218),
  ('break -> BREAK','break',1,'p_break','cparse.py',223),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',229),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',234),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',239),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',243),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',249),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',254),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',259),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',260),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',265),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',269),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',274),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',280),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',285),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',291),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',297),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',302),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',307),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',313),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',317),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',322),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',326),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',330),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',334),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',340),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',357),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',358),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',362),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',366),
  ('pointer -> MULT','pointer',1,'p_pointer','cparse.py',370),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',375),
  ('include_stmt -> INCLUDE string','include_stmt',2,'p_include_standard','cparse.py',379),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',384),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',390),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',395),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',402),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',403),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',404),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',405),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',406),
  ('dowhile_stmt -> DOWHILE expr COLON suite','dowhile_stmt',4,'p_dowhile','cparse.py',414),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',420),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',425),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',430),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',435),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',440),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',445),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',449),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',454),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',460),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',465),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',469),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',473),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',477),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',481),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',486),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',490),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',494),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',499),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',503),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',508),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',512),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',516),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',524),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',529),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',534),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',539),
  ('expr -> expr MOD expr','expr',3,'p_mod_expr','cparse.py',544),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',549),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',554),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',559),
  ('expr -> expr LE expr','expr',3,'p_le_expr','cparse.py',564),
  ('expr -> expr GE expr','expr',3,'p_ge_expr','cparse.py',569),
  ('expr -> expr AND expr','expr',3,'p_and_expr','cparse.py',574),
  ('expr -> expr OR expr','expr',3,'p_or_expr','cparse.py',579),
  ('expr -> expr AMP expr','expr',3,'p_bitand_expr','cparse.py',586),
  ('expr -> expr PIPE expr','expr',3,'p_bitor_expr','cparse.py',591),
  ('expr -> expr CARROT expr','expr',3,'p_xor_expr','cparse.py',596),
  ('expr -> expr LSHIFT expr','expr',3,'p_lshift_expr','cparse.py',601),
  ('expr -> expr RSHIFT expr','expr',3,'p_rshift_expr','cparse.py',606),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',611),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',615),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',620),
  ('expr -> expr PERIOD NAME','expr',3,'p_expr_struct_access','cparse.py',625),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',630),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',634),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',639),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',644),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',649),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',656),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',661),
  ('expr -> INC expr','expr',2,'p_pre_inc','cparse.py',668),
  ('expr -> DEC expr','expr',2,'p_pre_dec','cparse.py',673),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',678),
  ('expr -> INV expr','expr',2,'p_inv_expr','cparse.py',683),
  ('atom -> NULL','atom',1,'p_null','cparse.py',688),
  ('power -> atom','power',1,'p_power_1','cparse.py',693),
  ('power -> atom LPAR RPAR','power',3,'p_power_2','cparse.py',697),
  ('power -> atom LPAR arglist RPAR','power',4,'p_power_call_args','cparse.py',702),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_index','cparse.py',709),
  ('expr -> AMP expr','expr',2,'p_address_of','cparse.py',716),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',721),
  ('atom -> INT','atom',1,'p_atom_int','cparse.py',726),
  ('atom -> FLOAT','atom',1,'p_atom_float','cparse.py',731),
  ('atom -> string','atom',1,'p_atom_str','cparse.py',736),
  ('string -> STRING','string',1,'p_str','cparse.py',740),
  ('atom -> CHAR','atom',1,'p_atom_char','cparse.py',745),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',750),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',755),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',760),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',764),
  ('array_contents -> array_contents COMMA','array_contents',2,'p_array_litral_contents_3','cparse.py',768),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',778),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',782),
  ('argument -> expr','argument',1,'p_argument','cparse.py',786),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',790),
]
