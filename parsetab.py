
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE CHAR COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGexpr : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'IF':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[6,-108,-77,-73,-120,-126,-119,-16,6,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,6,-112,-80,-83,6,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'WHILE':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,141,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[2,-108,-77,-73,-120,-126,-119,-16,2,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,167,-128,-79,-87,-82,-131,2,-112,-80,-83,2,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'RPAR':([9,15,16,22,26,31,42,63,66,68,69,70,71,73,75,83,90,94,101,104,106,110,112,113,114,115,117,118,120,121,122,124,127,129,130,131,132,133,134,136,137,138,144,145,153,156,157,160,161,168,171,172,173,175,176,186,187,188,189,214,],[-108,-120,-126,-119,-123,-124,-125,-122,110,115,-121,-115,-54,123,-56,-113,-117,-116,-118,-127,-114,-111,-135,153,-134,-132,-63,-65,-64,-62,-60,159,-52,-103,-104,-110,-105,-107,-102,-101,-109,-106,174,-128,-131,-67,-66,-55,-57,-112,-11,-12,-13,198,-10,-133,-68,-61,-53,-14,]),'SWITCH':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[5,-108,-77,-73,-120,-126,-119,-16,5,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,5,-112,-80,-83,5,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'LPAR':([0,2,5,6,7,9,11,12,15,16,17,18,19,22,23,24,26,27,31,35,38,41,42,46,47,48,55,56,57,58,61,63,68,69,70,73,74,77,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,100,101,104,106,110,115,119,126,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,158,162,166,167,168,170,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[7,7,7,7,7,-108,-77,-73,68,-126,7,73,-122,-119,-16,7,-123,-15,-124,7,-74,-76,-125,73,-6,-5,7,7,7,7,-75,-122,7,-121,-115,73,73,73,-4,-3,-17,7,-113,7,7,7,7,7,-117,7,7,7,-116,7,144,-118,-127,-114,-111,-132,7,73,-103,-104,-110,-105,-107,-102,-101,-109,-106,7,-128,7,-79,-87,-82,-131,7,73,7,7,7,-112,73,-80,7,-83,7,-99,-78,-7,7,-98,-100,-81,-88,-84,7,-85,-86,]),'DEC':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,83,90,94,101,102,104,105,106,110,112,115,128,129,130,131,132,133,134,135,136,137,138,145,153,155,168,177,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,90,-125,90,-122,90,90,90,-121,90,90,-117,-116,90,90,-127,90,90,-111,90,-132,90,90,90,-110,90,90,90,90,90,90,90,-128,-131,90,90,90,90,90,90,90,90,]),'ENUM':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[13,-108,-77,-73,-120,-126,-119,-16,13,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,13,-112,-80,-83,13,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'BREAK':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[14,-108,-77,-73,-120,-126,-119,-16,14,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,14,-112,-80,-83,14,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'DEDENT':([9,11,12,15,16,22,23,26,27,31,38,41,42,61,63,69,70,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,168,178,183,193,194,195,196,201,203,204,206,212,213,215,216,217,220,223,226,227,229,230,],[-108,-77,-73,-120,-126,-119,-16,-123,-15,-124,-74,-76,-125,-75,-122,-121,-115,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,-112,-80,-83,212,-99,-78,-7,-89,220,-93,-91,-98,-100,-81,-90,-94,-88,-84,-92,-85,-95,-86,]),'CHAR':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[16,16,16,16,16,-108,-77,-73,-120,-126,16,-119,-16,16,-123,-15,-124,16,-74,-76,-125,-6,-5,16,16,16,16,-75,-122,16,-121,-115,-4,-3,-17,16,-113,16,16,16,16,16,-117,16,16,16,-116,16,-118,-127,-114,-111,-132,16,-103,-104,-110,-105,-107,-102,-101,-109,-106,16,-128,16,-79,-87,-82,-131,16,16,16,16,-112,-80,16,-83,16,-99,-78,-7,16,-98,-100,-81,-88,-84,16,-85,-86,]),'MINUS':([0,2,5,6,7,9,11,12,15,16,17,19,22,23,24,26,27,31,35,36,38,41,42,47,48,55,56,57,58,61,62,63,64,65,66,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,102,104,105,106,110,112,115,119,128,129,130,131,132,133,134,135,136,137,138,142,145,146,147,149,150,153,154,155,162,166,167,168,177,178,181,183,189,193,194,195,196,202,207,212,213,215,218,220,223,224,227,228,230,],[17,17,17,17,17,-108,-77,-73,-120,-126,17,-122,-119,-16,17,-123,-15,-124,17,89,-74,-76,-125,-6,-5,17,17,17,17,-75,89,-122,89,89,89,17,-121,-115,-4,-3,-17,17,-113,17,17,17,17,17,-117,17,17,17,-116,17,-118,89,-127,89,-114,-111,89,-132,17,89,-103,-104,-110,89,89,-102,89,-101,89,89,17,-128,17,-79,-87,-82,-131,17,89,17,17,17,89,89,-80,17,-83,89,17,-99,89,-7,17,89,-98,-100,-81,89,-88,-84,17,-85,89,-86,]),'TYPEDEF':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[18,-108,-77,-73,-120,-126,-119,-16,18,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,18,-112,-80,-83,18,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'NAME':([0,2,5,6,7,9,11,12,13,15,16,17,18,22,23,24,26,27,28,31,34,35,37,38,41,42,46,47,48,53,55,56,57,58,61,63,68,69,70,71,72,73,74,75,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,101,104,106,110,111,115,117,118,119,120,121,126,129,130,131,132,133,134,136,137,138,139,142,144,145,146,147,149,150,153,154,156,157,158,160,161,162,166,167,168,170,178,181,183,184,187,191,193,194,195,196,199,202,212,213,215,220,223,224,227,230,],[19,63,63,63,63,-108,-77,-73,67,-120,-126,63,71,-119,-16,19,-123,-15,80,-124,82,63,96,-74,-76,-125,71,-6,-5,100,63,63,63,63,-75,-122,63,-121,-115,-54,116,71,71,-56,71,-4,-3,-17,63,-113,63,63,131,63,63,63,-117,63,63,63,-116,63,-118,-127,-114,-111,151,-132,-63,-65,63,-64,-62,71,-103,-104,-110,-105,-107,-102,-101,-109,-106,163,63,171,-128,63,-79,-87,-82,-131,63,-67,-66,71,-55,-57,63,19,63,-112,71,-80,63,-83,209,-68,163,19,-99,-78,-7,171,63,-98,-100,-81,-88,-84,63,-85,-86,]),'CASE':([180,201,204,212,217,229,],[202,202,-93,-98,-94,-95,]),'DIV':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,83,90,94,101,102,104,105,106,110,112,115,128,129,130,131,132,133,134,135,136,137,138,145,153,155,168,177,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,85,-125,85,-122,85,85,85,-121,85,-113,-117,-116,-118,85,-127,85,85,-111,85,-132,85,-103,-104,-110,85,85,85,85,85,85,85,-128,-131,85,85,85,85,85,85,85,85,]),'NULL':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[22,22,22,22,22,-108,-77,-73,-120,-126,22,-119,-16,22,-123,-15,-124,22,-74,-76,-125,-6,-5,22,22,22,22,-75,-122,22,-121,-115,-4,-3,-17,22,-113,22,22,22,22,22,-117,22,22,22,-116,22,-118,-127,-114,-111,-132,22,-103,-104,-110,-105,-107,-102,-101,-109,-106,22,-128,22,-79,-87,-82,-131,22,22,22,22,-112,-80,22,-83,22,-99,-78,-7,22,-98,-100,-81,-88,-84,22,-85,-86,]),'NE':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,83,90,94,101,102,104,105,106,110,112,115,128,129,130,131,132,133,134,135,136,137,138,145,153,155,168,177,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,93,-125,93,-122,93,93,93,-121,-115,-113,-117,-116,-118,93,-127,93,-114,-111,93,-132,93,-103,-104,-110,-105,-107,-102,93,-101,-109,-106,-128,-131,93,-112,93,93,93,93,93,93,]),'RBRACKET':([9,15,16,22,26,31,42,56,63,69,70,83,90,94,101,102,103,104,106,110,115,119,129,130,131,132,133,134,136,137,138,145,153,155,168,177,],[-108,-120,-126,-119,-123,-124,-125,104,-122,-121,-115,-113,-117,-116,-118,-129,145,-127,-114,-111,-132,156,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-131,187,-112,-130,]),'GT':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,71,75,83,90,94,98,101,102,104,105,106,110,112,115,117,118,120,121,128,129,130,131,132,133,134,135,136,137,138,145,153,155,156,157,160,161,168,177,187,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,88,-125,88,-122,88,88,88,-121,-115,-54,-56,-113,-117,-116,142,-118,88,-127,88,-114,-111,88,-132,-63,-65,-64,-62,88,-103,-104,-110,-105,-107,-102,88,-101,-109,-106,-128,-131,88,-67,-66,-55,-57,-112,88,-68,88,88,88,88,88,]),'$end':([0,9,11,12,15,16,21,22,23,24,26,27,31,38,41,42,47,48,50,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,168,178,183,195,196,212,215,220,223,227,230,],[-136,-108,-77,-73,-120,-126,-2,-119,-16,-1,-123,-15,-124,-74,-76,-125,-6,-5,0,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,-112,-80,-83,-78,-7,-98,-81,-88,-84,-85,-86,]),'EQ':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,83,90,94,101,102,104,105,106,110,112,115,128,129,130,131,132,133,134,135,136,137,138,145,153,155,168,177,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,87,-125,87,-122,87,87,87,-121,-115,-113,-117,-116,-118,87,-127,87,-114,-111,87,-132,87,-103,-104,-110,-105,-107,-102,87,-101,-109,-106,-128,-131,87,-112,87,87,87,87,87,87,]),'IFNDEF':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[28,-108,-77,-73,-120,-126,-119,-16,28,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,28,-112,-80,-83,28,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'RBRACE':([9,15,16,22,26,31,42,63,69,70,71,75,83,90,94,101,104,106,110,115,117,118,120,121,125,127,129,130,131,132,133,134,136,137,138,145,151,152,153,156,157,160,161,164,165,168,187,189,190,191,192,209,211,],[-108,-120,-126,-119,-123,-124,-125,-122,-121,-115,-54,-56,-113,-117,-116,-118,-127,-114,-111,-132,-63,-65,-64,-62,160,-52,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-41,185,-131,-67,-66,-55,-57,-48,-136,-112,-68,-53,210,-45,-46,-42,-47,]),'COLON':([9,15,16,19,22,26,31,40,42,62,63,64,65,69,70,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,143,145,153,163,168,171,174,179,182,198,205,207,218,219,228,],[-108,-120,-126,77,-119,-123,-124,97,-125,107,-122,108,109,-121,-115,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,169,-128,-131,77,-112,77,-8,200,208,-9,221,222,-96,225,-97,]),'FLOAT':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[31,31,31,31,31,-108,-77,-73,-120,-126,31,-119,-16,31,-123,-15,-124,31,-74,-76,-125,-6,-5,31,31,31,31,-75,-122,31,-121,-115,-4,-3,-17,31,-113,31,31,31,31,31,-117,31,31,31,-116,31,-118,-127,-114,-111,-132,31,-103,-104,-110,-105,-107,-102,-101,-109,-106,31,-128,31,-79,-87,-82,-131,31,31,31,31,-112,-80,31,-83,31,-99,-78,-7,31,-98,-100,-81,-88,-84,31,-85,-86,]),'RETURN':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[57,-108,-77,-73,-120,-126,-119,-16,57,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,57,-112,-80,-83,57,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'COMMA':([9,15,16,22,26,31,42,63,69,70,71,75,83,90,94,101,102,103,104,106,110,112,113,114,115,117,118,120,121,122,124,127,129,130,131,132,133,134,136,137,138,145,151,152,153,156,157,160,161,164,165,168,171,172,173,175,176,177,186,187,188,189,209,211,214,218,219,228,],[-108,-120,-126,-119,-123,-124,-125,-122,-121,-115,-54,-56,-113,-117,-116,-118,-129,146,-127,-114,-111,-135,154,-134,-132,-63,-65,-64,-62,-60,158,-52,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-41,184,-131,-67,-66,-55,-57,-48,191,-112,-11,-12,-13,199,-10,-130,-133,-68,-61,-53,-42,-47,-14,-96,224,-97,]),'MULT':([0,2,5,6,7,9,11,12,15,16,17,19,22,23,24,26,27,31,35,36,38,41,42,47,48,55,56,57,58,61,62,63,64,65,66,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,102,104,105,106,110,112,115,119,128,129,130,131,132,133,134,135,136,137,138,142,145,146,147,149,150,153,154,155,162,166,167,168,177,178,181,183,189,193,194,195,196,202,207,212,213,215,218,220,223,224,227,228,230,],[35,35,35,35,35,-108,-77,-73,-120,-126,35,-122,-119,-16,35,-123,-15,-124,35,84,-74,-76,-125,-6,-5,35,35,35,35,-75,84,-122,84,84,84,35,-121,84,-4,-3,-17,35,-113,35,35,35,35,35,-117,35,35,35,-116,35,-118,84,-127,84,84,-111,84,-132,35,84,-103,-104,-110,84,84,84,84,84,84,84,35,-128,35,-79,-87,-82,-131,35,84,35,35,35,84,84,-80,35,-83,84,35,-99,84,-7,35,84,-98,-100,-81,84,-88,-84,35,-85,84,-86,]),'STRUCT':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[37,-108,-77,-73,-120,-126,-119,-16,37,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,37,-112,-80,-83,37,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'DEFINE':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[34,-108,-77,-73,-120,-126,-119,-16,34,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,34,-112,-80,-83,34,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'ELSE':([147,150,180,201,204,212,217,227,229,],[179,182,205,205,-93,-98,-94,182,-95,]),'DO':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[40,-108,-77,-73,-120,-126,-119,-16,40,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,40,-112,-80,-83,40,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'ELIF':([150,212,227,],[181,-98,181,]),'NOT':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[55,55,55,55,55,-108,-77,-73,-120,-126,55,-119,-16,55,-123,-15,-124,55,-74,-76,-125,-6,-5,55,55,55,55,-75,-122,55,-121,-115,-4,-3,-17,55,-113,55,55,55,55,55,-117,55,55,55,-116,55,-118,-127,-114,-111,-132,55,-103,-104,-110,-105,-107,-102,-101,-109,-106,55,-128,55,-79,-87,-82,-131,55,55,55,55,-112,-80,55,-83,55,-99,-78,-7,55,-98,-100,-81,-88,-84,55,-85,-86,]),'INC':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,83,90,94,101,102,104,105,106,110,112,115,128,129,130,131,132,133,134,135,136,137,138,145,153,155,168,177,189,195,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,94,-125,94,-122,94,94,94,-121,94,94,-117,-116,94,94,-127,94,94,-111,94,-132,94,94,94,-110,94,94,94,94,94,94,94,-128,-131,94,94,94,94,94,94,94,94,]),'LT':([0,2,5,6,7,9,11,12,15,16,17,19,22,23,24,26,27,31,35,36,38,41,42,47,48,55,56,57,58,61,62,63,64,65,66,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,102,104,105,106,110,112,115,119,128,129,130,131,132,133,134,135,136,137,138,142,145,146,147,149,150,153,154,155,162,166,167,168,177,178,181,183,189,193,194,195,196,202,207,212,213,215,218,220,223,224,227,228,230,],[46,46,46,46,46,-108,-77,-73,-120,-126,46,-122,-119,-16,46,-123,-15,-124,46,95,-74,-76,-125,-6,-5,46,46,46,46,-75,95,-122,95,95,95,46,-121,-115,-4,-3,-17,46,-113,46,46,46,46,46,-117,46,46,46,-116,46,-118,95,-127,95,-114,-111,95,-132,46,95,-103,-104,-110,-105,-107,-102,95,-101,-109,-106,46,-128,46,-79,-87,-82,-131,46,95,46,46,46,-112,95,-80,46,-83,95,46,-99,95,-7,46,95,-98,-100,-81,95,-88,-84,46,-85,95,-86,]),'NEWLINE':([0,1,3,4,8,9,10,11,12,14,15,16,19,20,22,23,24,25,26,27,29,30,31,32,33,36,38,39,41,42,43,44,45,47,48,49,51,54,59,60,61,63,69,70,71,75,78,79,80,81,82,83,90,94,97,99,101,104,105,106,107,108,109,110,115,116,117,118,120,121,127,128,129,130,131,132,133,134,135,136,137,138,143,145,147,149,150,153,156,157,160,161,168,169,174,178,183,185,187,189,195,196,197,198,200,208,210,212,215,220,221,222,223,225,227,230,],[48,-23,-39,-30,-20,-108,-43,-77,-73,-38,-120,-126,-122,-28,-119,-16,79,-24,-123,-15,-31,-27,-124,-22,81,-70,-74,-21,-76,-125,-18,-29,-19,-6,-5,-25,-36,-37,-51,-26,-75,-122,-121,-115,-54,-56,-4,-3,-35,-17,-34,-113,-117,-116,140,-69,-118,-127,-72,-114,140,148,140,-111,-132,-32,-63,-65,-64,-62,-52,-33,-103,-104,-110,-105,-107,-102,-71,-101,-109,-106,-49,-128,-79,-87,-82,-131,-67,-66,-55,-57,-112,140,-8,-80,-83,-40,-68,-53,-78,-7,-50,-9,140,140,-44,-98,-81,-88,140,140,-84,140,-85,-86,]),'INT':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[26,26,26,26,26,-108,-77,-73,-120,-126,26,-119,-16,26,-123,-15,-124,26,-74,-76,-125,-6,-5,26,26,26,26,-75,-122,26,-121,-115,-4,-3,-17,26,-113,26,26,26,26,26,-117,26,26,26,-116,26,-118,-127,-114,-111,-132,26,-103,-104,-110,-105,-107,-102,-101,-109,-106,26,-128,26,-79,-87,-82,-131,26,26,26,26,-112,-80,26,-83,26,-99,-78,-7,26,-98,-100,-81,-88,-84,26,-85,-86,]),'STRING':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,52,55,56,57,58,61,63,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,104,106,110,115,119,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,162,166,167,168,178,181,183,193,194,195,196,202,212,213,215,220,223,224,227,230,],[42,42,42,42,42,-108,-77,-73,-120,-126,42,-119,-16,42,-123,-15,-124,42,-74,-76,-125,-6,-5,99,42,42,42,42,-75,-122,42,-121,-115,-4,-3,-17,42,-113,42,42,42,42,42,-117,42,42,42,-116,42,-118,-127,-114,-111,-132,42,-103,-104,-110,-105,-107,-102,-101,-109,-106,42,-128,42,-79,-87,-82,-131,42,42,42,42,-112,-80,42,-83,42,-99,-78,-7,42,-98,-100,-81,-88,-84,42,-85,-86,]),'ENDIF':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[51,-108,-77,-73,-120,-126,-119,-16,51,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,51,-112,-80,-83,51,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'INCLUDE':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[52,-108,-77,-73,-120,-126,-119,-16,52,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,52,-112,-80,-83,52,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'DEF':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[53,-108,-77,-73,-120,-126,-119,-16,53,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,53,-112,-80,-83,53,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'PASS':([0,9,11,12,15,16,22,23,24,26,27,31,38,41,42,47,48,61,63,69,70,78,79,81,83,90,94,101,104,106,110,115,129,130,131,132,133,134,136,137,138,145,147,149,150,153,166,168,178,183,193,194,195,196,212,213,215,220,223,227,230,],[54,-108,-77,-73,-120,-126,-119,-16,54,-123,-15,-124,-74,-76,-125,-6,-5,-75,-122,-121,-115,-4,-3,-17,-113,-117,-116,-118,-127,-114,-111,-132,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-79,-87,-82,-131,54,-112,-80,-83,54,-99,-78,-7,-98,-100,-81,-88,-84,-85,-86,]),'INDENT':([140,148,],[166,180,]),'LBRACKET':([0,2,5,6,7,9,11,12,15,16,17,22,23,24,26,27,31,35,38,41,42,47,48,55,56,57,58,61,63,68,69,70,71,72,75,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,98,101,104,106,110,115,117,118,119,120,121,122,125,127,129,130,131,132,133,134,136,137,138,142,145,146,147,149,150,153,154,156,157,160,161,162,166,167,168,178,181,183,187,188,193,194,195,196,197,202,212,213,215,220,223,224,227,230,],[56,56,56,56,56,-108,-77,-73,-120,-126,56,-119,-16,56,-123,-15,-124,56,-74,-76,-125,-6,-5,56,56,56,56,-75,-122,56,-121,-115,-54,119,-56,-4,-3,-17,56,-113,56,56,56,56,56,-117,56,56,56,-116,56,119,-118,-127,-114,-111,-132,-63,-65,56,-64,119,119,119,119,-103,-104,-110,-105,-107,-102,-101,-109,-106,56,-128,56,-79,-87,-82,-131,56,-67,-66,-55,-57,56,56,56,-112,-80,56,-83,-68,119,56,-99,-78,-7,119,56,-98,-100,-81,-88,-84,56,-85,-86,]),'ASSIGN':([9,15,16,19,22,26,31,36,42,63,69,70,71,75,83,90,94,101,104,106,110,115,117,118,120,121,127,129,130,131,132,133,134,136,137,138,145,153,156,157,160,161,168,187,],[-108,-120,-126,-122,-119,-123,-124,91,-125,-122,-121,-115,-54,-56,-113,-117,-116,-118,-127,-114,-111,-132,-63,-65,-64,-62,162,-103,-104,-110,-105,-107,-102,-101,-109,-106,-128,-131,-67,-66,-55,-57,-112,-68,]),'PLUS':([0,2,5,6,7,9,11,12,15,16,17,19,22,23,24,26,27,31,35,36,38,41,42,47,48,55,56,57,58,61,62,63,64,65,66,68,69,70,78,79,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,102,104,105,106,110,112,115,119,128,129,130,131,132,133,134,135,136,137,138,142,145,146,147,149,150,153,154,155,162,166,167,168,177,178,181,183,189,193,194,195,196,202,207,212,213,215,218,220,223,224,227,228,230,],[58,58,58,58,58,-108,-77,-73,-120,-126,58,-122,-119,-16,58,-123,-15,-124,58,92,-74,-76,-125,-6,-5,58,58,58,58,-75,92,-122,92,92,92,58,-121,-115,-4,-3,-17,58,-113,58,58,58,58,58,-117,58,58,58,-116,58,-118,92,-127,92,-114,-111,92,-132,58,92,-103,-104,-110,92,92,-102,92,-101,92,92,58,-128,58,-79,-87,-82,-131,58,92,58,58,58,92,92,-80,58,-83,92,58,-99,92,-7,58,92,-98,-100,-81,92,-88,-84,58,-85,92,-86,]),'ELLIPSIS':([144,199,],[173,173,]),'LBRACE':([18,46,67,73,74,77,96,126,158,170,],[74,74,111,74,74,74,139,74,74,74,]),'ARROW':([9,15,16,19,22,26,31,36,42,62,63,64,65,66,69,70,76,83,90,94,101,102,104,105,106,110,112,115,123,128,129,130,131,132,133,134,135,136,137,138,143,145,153,155,159,168,174,177,189,195,198,207,218,228,],[-108,-120,-126,-122,-119,-123,-124,86,-125,86,-122,86,86,86,-121,86,126,86,-117,-116,86,86,-127,86,86,-111,86,-132,-58,86,86,86,-110,86,86,86,86,86,86,86,170,-128,-131,86,-59,86,-8,86,86,86,-9,86,86,86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_stmt':([0,24,166,193,],[1,1,1,1,]),'struct_decl':([0,24,166,193,],[10,10,10,10,]),'enum_decl':([0,24,166,193,],[3,3,3,3,]),'break':([0,24,166,193,],[4,4,4,4,]),'var_decl':([0,24,139,144,166,191,193,199,],[59,59,164,172,59,211,59,172,]),'optional_comma':([165,],[190,]),'define_stmt':([0,24,166,193,],[8,8,8,8,]),'power':([0,2,5,6,7,17,24,35,55,56,57,58,68,82,84,85,87,88,89,91,92,93,95,119,142,146,154,162,166,167,181,193,202,224,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'trailer':([15,],[69,]),'funcdef':([0,24,166,193,],[11,11,11,11,]),'if_stmt':([0,24,166,193,],[12,12,12,12,]),'bracket_list':([72,98,122,125,127,161,188,197,],[121,121,121,121,121,121,121,121,]),'suite':([97,107,109,169,200,208,221,222,225,],[141,147,150,196,215,223,226,227,229,]),'struct_decl_stmt':([0,24,166,193,],[20,20,20,20,]),'pointer_or_array':([72,98,121,122,125,127,161,188,197,],[118,118,157,118,118,118,118,118,118,]),'empty':([0,165,],[21,192,]),'simple_stmt':([0,24,166,193,],[27,27,27,27,]),'argument':([68,154,],[114,186,]),'compound_stmt':([0,24,166,193,],[23,23,23,23,]),'array':([72,98,121,122,125,127,161,188,197,],[120,120,120,120,120,120,120,120,120,]),'switch_stmts':([180,],[203,]),'stmt_list':([0,],[24,]),'assign_stmt':([0,24,166,193,],[25,25,25,25,]),'struct_decl_list':([139,],[165,]),'enum_name_list':([111,],[152,]),'varaglist_elem':([144,199,],[176,214,]),'pass':([0,24,166,193,],[29,29,29,29,]),'stmts':([166,],[193,]),'enum_decl_stmt':([0,24,166,193,],[30,30,30,30,]),'endif_stmt':([0,24,166,193,],[32,32,32,32,]),'parameters':([100,],[143,]),'small_stmt':([0,24,166,193,],[33,33,33,33,]),'type_declaration':([18,46,73,74,77,126,158,170,],[72,98,122,125,127,161,188,197,]),'expr':([0,2,5,6,7,17,24,35,55,56,57,58,68,82,84,85,87,88,89,91,92,93,95,119,142,146,154,162,166,167,181,193,202,224,],[36,62,64,65,66,70,36,83,101,102,105,106,112,128,129,130,132,133,134,135,136,137,138,155,168,177,112,189,36,195,207,36,218,228,]),'array_contents':([56,],[103,]),'switch_suite':([108,],[149,]),'while_stmt':([0,24,166,193,],[38,38,38,38,]),'ifndef_stmt':([0,24,166,193,],[39,39,39,39,]),'dowhile_stmt':([0,24,166,193,],[61,61,61,61,]),'switch_stmt':([0,24,166,193,],[41,41,41,41,]),'arglist':([68,],[113,]),'param_list_contents':([73,],[124,]),'default':([180,201,],[206,216,]),'return_stmt':([0,24,166,193,],[43,43,43,43,]),'typedef_stmt':([0,24,166,193,],[44,44,44,44,]),'param_type_list':([18,46,73,74,77,126,158,170,],[76,76,76,76,76,76,76,76,]),'varargslist':([144,],[175,]),'include_stmt':([0,24,166,193,],[45,45,45,45,]),'pointer':([72,98,121,122,125,127,161,188,197,],[117,117,117,117,117,117,117,117,117,]),'case_list':([180,],[201,]),'func_decl':([0,24,166,193,],[49,49,49,49,]),'module':([0,],[50,]),'var_decl_stmt':([0,24,166,193,],[60,60,60,60,]),'if_orelse':([150,227,],[183,230,]),'case':([180,201,],[204,217,]),'while_orelse':([147,],[178,]),'inline_func_decl':([18,46,73,74,77,126,158,170,],[75,75,75,75,75,75,75,75,]),'atom':([0,2,5,6,7,17,24,35,55,56,57,58,68,82,84,85,87,88,89,91,92,93,95,119,142,146,154,162,166,167,181,193,202,224,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'stmt':([0,24,166,193,],[47,78,194,213,]),'case_expr_list':([202,],[219,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',45),
  ('module -> empty','module',1,'p_empty_module','cparse.py',49),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',54),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',58),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',62),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',66),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',71),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',76),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',80),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',84),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',88),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',93),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',97),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',101),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',110),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',114),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',133),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',139),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',143),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',147),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',151),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',155),
  ('break -> BREAK','break',1,'p_break','cparse.py',159),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',164),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',168),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',172),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',176),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',182),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',186),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',190),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',196),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',200),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',205),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',210),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',214),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',219),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',224),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',229),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',233),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',240),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',244),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',248),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',252),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',256),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',260),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',266),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',282),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',283),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',287),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',291),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',295),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',299),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',303),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',307),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',312),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',316),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',322),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',323),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',324),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',325),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',326),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',334),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',339),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',343),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',347),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',353),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',357),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',361),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',365),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',369),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',374),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',378),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',382),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',386),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',390),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',394),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',398),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',402),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',406),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',410),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',414),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',419),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',423),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',427),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',435),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',439),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',443),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',447),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',451),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',455),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',459),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',463),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',467),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',471),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',475),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',479),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',483),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',487),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',491),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',495),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',499),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',503),
  ('expr -> NULL','expr',1,'p_null','cparse.py',511),
  ('power -> atom','power',1,'p_power_1','cparse.py',515),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',519),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',523),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',527),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',531),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',535),
  ('expr -> CHAR','expr',1,'p_atom_char','cparse.py',539),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',543),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',547),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',551),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',555),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',559),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',563),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',573),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',577),
  ('argument -> expr','argument',1,'p_argument','cparse.py',581),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',585),
]
