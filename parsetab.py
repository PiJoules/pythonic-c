
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftFUNC_TYPEleftPOINTER_TYPEleftORleftANDleftBITORleftXORleftBITANDleftEQNEleftGTLTLEGEleftLSHIFTRSHIFTleftPLUSMINUSleftMULTDIVMODrightADDROFNOTCASTPREINCPREDECINVDEREFUSUBUADDleftARROWPOSTINCPOSTDECPERIODLBRACKETADDROF AMP AND ARROW ASSIGN BITAND BITOR BREAK CARROT CASE CAST CHAR CLASS COLON COMMA DEC DEDENT DEF DEFINE DEREF DIV DOWHILE ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT FUNC_TYPE GE GT IF IFNDEF INC INCLUDE INDENT INT INV LBRACE LBRACKET LE LPAR LSHIFT LT MINUS MOD MULT NAME NE NEWLINE NOT NULL OR PASS PERIOD PIPE PLUS POINTER_TYPE POSTDEC POSTINC PREDEC PREINC RBRACE RBRACKET RETURN RPAR RSHIFT STRING STRUCT SWITCH TYPEDEF UADD USUB WHILE WS XORmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suitefuncdef : DEF NAME parameters ARROW type_declaration COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : type_declaration LT typedecl_list optional_comma GTtype_declaration : inline_func_decl %prec FUNC_TYPEinline_func_decl : param_type_list ARROW type_declaration %prec FUNC_TYPEparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_list %prec POINTER_TYPEpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : MULTarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE stringexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdef\n                         | classdefdowhile_stmt : DOWHILE expr COLON suitewhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr MOD exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : expr LE exprexpr : expr GE exprexpr : expr AND exprexpr : expr OR exprexpr : expr AMP expr %prec BITANDexpr : expr PIPE expr %prec BITORexpr : expr CARROT expr %prec XORexpr : expr LSHIFT exprexpr : expr rshift expr %prec RSHIFTrshift : GT GTexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : expr PERIOD NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT expr %prec CASTexpr : MULT expr %prec DEREFexpr : PLUS expr %prec UADDexpr : MINUS expr %prec USUBexpr : expr INC %prec POSTINCexpr : expr DEC %prec POSTDECexpr : INC expr %prec PREINCexpr : DEC expr %prec PREDECexpr : NOT exprexpr : INV expratom : NULLpower : atompower : atom LPAR RPARpower : atom LPAR arglist RPARexpr : expr LBRACKET expr RBRACKETexpr : AMP expr %prec ADDROFatom : NAMEatom : INTatom : FLOATatom : stringstring : STRINGatom : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprarray_contents : array_contents COMMAarglist : arglist COMMA argumentarglist : argumentargument : exprempty : classdef : CLASS NAME COLON suiteclassdef : CLASS NAME LT name_list optional_comma GT COLON suiteclassdef : CLASS NAME LPAR typedecl_list optional_comma RPAR COLON suiteclassdef : CLASS NAME LT name_list optional_comma GT LPAR typedecl_list optional_comma RPAR COLON suitename_list : NAMEname_list : name_list COMMA NAMEtypedecl_list : type_declarationtypedecl_list : typedecl_list COMMA type_declaration'
    
_lr_action_items = {'NEWLINE':([0,1,2,3,5,6,7,8,9,11,12,16,19,20,21,22,23,24,28,29,32,36,38,40,41,42,43,44,45,46,48,49,50,51,52,56,58,60,63,64,65,66,67,69,71,74,75,76,81,82,84,85,87,88,90,91,95,96,97,98,100,103,104,124,130,131,136,137,140,141,143,146,147,150,152,153,154,156,157,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,185,186,188,195,196,199,200,202,203,209,212,219,220,222,223,225,231,239,240,241,242,244,248,251,253,254,266,269,271,272,275,276,280,281,282,283,284,287,289,290,291,295,297,298,],[2,-122,-5,-40,-80,-137,-75,-22,-78,-29,-77,-145,-79,-144,-21,-147,-146,-23,-39,-52,87,-26,-6,-20,-17,-44,-31,-38,-19,-76,-25,-143,-28,-148,-24,96,-16,-27,-32,-72,-30,-37,-138,-143,-135,-129,-128,-55,-58,-136,-142,-130,-18,-35,-133,-71,-134,-3,-4,-74,-149,-36,-132,-131,187,-126,-66,-65,-69,-64,-67,201,187,-34,-33,187,-53,-150,-50,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,-73,-139,187,-82,-127,-68,-59,-56,-90,-158,-81,187,-9,-141,-140,-85,-83,-70,-41,-54,-7,-51,-10,-86,187,-45,-57,187,187,-101,-84,-91,187,187,187,-8,187,-87,187,-159,-160,-88,-89,187,-161,]),'ELIF':([223,271,291,],[246,-101,246,]),'WHILE':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[4,-5,-80,-75,-78,-77,-79,-6,-17,-76,4,-16,-18,-3,-4,-82,-90,-158,-81,-85,4,-83,-7,-86,-102,4,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'TYPEDEF':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[39,-5,-80,-75,-78,-77,-79,-6,-17,-76,39,-16,-18,-3,-4,-82,-90,-158,-81,-85,39,-83,-7,-86,-102,39,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'INDENT':([187,201,],[224,234,]),'RBRACE':([1,6,16,20,22,23,51,67,69,71,74,75,76,81,82,84,85,90,95,100,104,124,131,136,137,140,141,143,145,154,156,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,185,190,191,195,196,199,200,207,208,220,222,227,228,229,231,240,252,254,265,],[-122,-137,-145,-144,-147,-146,-148,-138,-143,-135,-129,-128,-55,-58,-136,-142,-130,-133,-134,-149,-132,-131,-126,-66,-65,-69,-64,-67,200,-53,-150,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,-139,-157,-49,-127,-68,-59,-56,-42,239,-141,-140,-47,-46,253,-70,-54,-48,-57,-43,]),'PLUS':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,82,83,84,85,87,88,90,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,138,139,150,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,202,203,209,210,211,220,221,222,223,224,225,240,241,246,248,249,250,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[15,-122,-5,15,-80,-137,-75,-78,15,-77,15,15,-145,15,-79,-144,-147,-146,15,15,15,15,15,-6,-17,-76,15,-143,-148,15,15,15,-16,15,120,-138,15,-143,120,-135,120,-129,-128,-136,120,-142,-130,-18,15,-133,120,-134,-3,-4,120,-149,120,-132,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-131,15,15,15,15,120,-126,15,15,120,15,-150,120,-125,120,120,-121,120,120,-124,120,120,-105,120,120,120,120,-108,-104,120,120,-106,-107,120,120,120,-139,-82,120,-127,-90,-158,-81,15,120,-141,15,-140,-85,15,-83,120,-7,15,-86,-102,15,15,120,-103,-101,-84,-91,120,-8,-87,15,-159,-160,-88,120,-89,-161,]),'EQ':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,118,-138,-143,118,-135,118,-129,-128,-136,118,-142,-130,-133,118,-134,118,-149,118,-132,-131,118,-126,118,-150,-119,-125,118,-120,-111,118,-124,118,-112,-105,118,-113,118,-109,-108,-104,118,-123,-106,-107,-110,118,118,-139,118,-127,118,-141,-140,118,118,118,118,]),'ELLIPSIS':([158,243,],[215,215,]),'ELSE':([188,223,234,256,257,271,274,291,293,],[226,247,260,260,-96,-101,-97,247,-98,]),'DOWHILE':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[47,-5,-80,-75,-78,-77,-79,-6,-17,-76,47,-16,-18,-3,-4,-82,-90,-158,-81,-85,47,-83,-7,-86,-102,47,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'AND':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,112,-138,-143,112,-135,112,-129,-128,-136,112,-142,-130,-133,112,-134,112,-149,112,-132,-131,112,-126,112,-150,-119,-125,112,-120,-111,-116,-124,-114,-112,-105,112,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,112,112,-139,112,-127,112,-141,-140,112,112,112,112,]),'PASS':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[44,-5,-80,-75,-78,-77,-79,-6,-17,-76,44,-16,-18,-3,-4,-82,-90,-158,-81,-85,44,-83,-7,-86,-102,44,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'DIV':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,125,-138,-143,125,-135,125,-129,-128,-136,125,-142,-130,-133,125,-134,125,-149,125,-132,-131,125,-126,125,-150,125,-125,125,125,125,125,-124,125,125,125,125,125,125,125,-108,125,125,125,-106,-107,125,125,125,-139,125,-127,125,-141,-140,125,125,125,125,]),'LSHIFT':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,105,-138,-143,105,-135,105,-129,-128,-136,105,-142,-130,-133,105,-134,105,-149,105,-132,-131,105,-126,105,-150,-119,-125,105,-120,105,105,-124,105,105,-105,105,105,105,105,-108,-104,105,105,-106,-107,105,105,105,-139,105,-127,105,-141,-140,105,105,105,105,]),'ARROW':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,79,82,83,84,85,90,93,95,98,100,101,104,124,129,131,134,150,156,157,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,193,194,195,211,219,220,222,240,244,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,111,-138,-143,111,111,111,111,111,144,111,111,111,111,111,111,111,111,-149,111,-132,-131,111,-126,-60,111,-150,213,111,-125,111,111,111,111,-124,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-139,-61,111,111,111,-9,-141,-140,111,-10,111,111,111,]),'COMMA':([1,6,16,20,22,23,51,67,69,71,74,75,76,81,82,84,85,90,95,99,100,101,104,124,131,133,135,136,137,140,141,143,154,155,156,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,190,191,195,196,197,198,199,200,204,205,206,207,208,211,214,215,216,217,218,220,222,230,231,240,245,252,254,255,263,265,267,277,278,288,292,],[-122,-137,-145,-144,-147,-146,-148,-138,-143,-135,-129,-128,-55,-58,-136,-142,-130,-133,-134,155,-149,-151,-132,-131,-126,-62,192,-66,-65,-69,-64,-67,-53,-153,-150,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,221,-155,-156,-139,228,-49,-127,-68,-164,233,-59,-56,-162,236,233,-42,238,-152,243,-14,-12,-13,-11,-141,-140,-63,-70,-54,-154,-48,-57,-165,-163,-43,-15,286,-99,233,-100,]),'LPAR':([0,2,4,5,6,7,9,10,12,13,15,16,17,18,19,20,22,23,25,26,27,30,35,38,39,41,46,47,49,51,55,56,57,58,59,67,68,69,77,80,86,87,88,94,96,97,100,102,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,142,144,149,155,156,163,188,192,202,203,209,210,213,221,223,224,225,233,241,246,248,249,250,261,262,270,271,272,275,279,282,284,286,289,290,291,295,298,],[13,-5,13,-80,-137,-75,-78,13,-77,13,13,-145,13,77,-79,-144,-147,-146,13,13,13,13,13,-6,77,-17,-76,13,-143,-148,13,13,13,-16,13,128,13,-143,77,77,149,-18,13,77,-3,-4,-149,158,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,77,77,77,13,-150,-121,-82,77,-90,-158,-81,13,77,13,-85,13,-83,77,-7,13,-86,-102,13,13,279,-103,-101,-84,-91,77,-8,-87,13,-159,-160,-88,-89,-161,]),'STRUCT':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[14,-5,-80,-75,-78,-77,-79,-6,-17,-76,14,-16,-18,-3,-4,-82,-90,-158,-81,-85,14,-83,-7,-86,-102,14,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'INV':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[25,-5,25,-80,-75,-78,25,-77,25,25,25,-79,25,25,25,25,25,-6,-17,-76,25,25,25,25,-16,25,25,-18,25,-3,-4,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-121,-82,-90,-158,-81,25,25,-85,25,-83,-7,25,-86,-102,25,25,-103,-101,-84,-91,-8,-87,25,-159,-160,-88,-89,-161,]),'FLOAT':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[16,-5,16,-80,-75,-78,16,-77,16,16,16,-79,16,16,16,16,16,-6,-17,-76,16,16,16,16,-16,16,16,-18,16,-3,-4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-121,-82,-90,-158,-81,16,16,-85,16,-83,-7,16,-86,-102,16,16,-103,-101,-84,-91,-8,-87,16,-159,-160,-88,-89,-161,]),'CARROT':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,121,-138,-143,121,-135,121,-129,-128,-136,121,-142,-130,-133,121,-134,121,-149,121,-132,-131,121,-126,121,-150,-119,-125,121,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,121,121,-139,121,-127,121,-141,-140,121,121,121,121,]),'NE':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,122,-138,-143,122,-135,122,-129,-128,-136,122,-142,-130,-133,122,-134,122,-149,122,-132,-131,122,-126,122,-150,-119,-125,122,-120,-111,122,-124,122,-112,-105,122,-113,122,-109,-108,-104,122,-123,-106,-107,-110,122,122,-139,122,-127,122,-141,-140,122,122,122,122,]),'MULT':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,76,78,81,82,83,84,85,87,88,90,92,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,136,137,138,139,140,141,143,145,150,154,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,196,197,199,200,202,203,209,210,211,220,221,222,223,224,225,230,231,240,241,242,246,248,249,250,254,255,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[17,-122,-5,17,-80,-137,-75,-78,17,-77,17,17,-145,17,-79,-144,-147,-146,17,17,17,17,17,-6,-17,-76,17,-143,-148,17,17,17,-16,17,123,-138,17,-143,123,-135,123,-129,-128,-55,140,-58,-136,123,-142,-130,-18,17,-133,140,123,-134,-3,-4,123,-149,123,-132,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-131,17,17,17,17,123,-126,140,-66,-65,17,17,-69,140,-67,140,123,140,17,-150,123,-125,123,123,-121,123,123,-124,123,123,123,123,123,123,123,-108,123,123,123,-106,-107,123,123,123,-139,-82,123,-127,-68,140,140,-56,-90,-158,-81,17,123,-141,17,-140,-85,17,-83,140,-70,123,-7,140,17,-86,-102,17,-57,140,17,123,-103,-101,-84,-91,123,-8,-87,17,-159,-160,-88,123,-89,-161,]),'STRING':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,37,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[22,-5,22,-80,-75,-78,22,-77,22,22,22,-79,22,22,22,22,22,22,-6,-17,-76,22,22,22,22,-16,22,22,-18,22,-3,-4,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-121,-82,-90,-158,-81,22,22,-85,22,-83,-7,22,-86,-102,22,22,-103,-101,-84,-91,-8,-87,22,-159,-160,-88,-89,-161,]),'NAME':([0,2,4,5,7,9,10,12,13,14,15,17,18,19,25,26,27,30,31,33,34,35,38,39,41,46,47,55,56,57,58,59,61,62,68,76,77,80,81,87,88,92,94,96,97,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,132,136,137,138,139,140,141,142,143,144,148,149,151,155,158,163,188,192,196,199,200,202,203,209,210,213,221,223,224,225,228,231,233,236,238,241,243,246,248,249,250,254,261,270,271,272,275,279,282,284,286,289,290,291,295,298,],[49,-5,69,-80,-75,-78,69,-77,69,73,69,69,76,-79,69,69,69,69,86,88,89,69,-6,76,-17,-76,69,69,49,69,-16,69,102,103,69,-55,76,76,-58,-18,69,152,76,-3,-4,69,160,69,69,69,69,166,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,189,-66,-65,69,69,-69,-64,76,-67,76,204,76,207,69,216,-121,-82,76,-68,-59,-56,-90,-158,-81,69,76,69,-85,49,-83,189,-70,76,263,265,-7,216,69,-86,-102,49,-57,69,-103,-101,-84,-91,76,-8,-87,69,-159,-160,-88,-89,-161,]),'LT':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,76,78,81,82,83,84,85,86,87,88,90,92,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,136,137,138,139,140,141,143,145,150,154,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,196,197,199,200,202,203,209,210,211,220,221,222,223,224,225,230,231,240,241,242,246,248,249,250,254,255,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[18,-122,-5,18,-80,-137,-75,-78,18,-77,18,18,-145,18,-79,-144,-147,-146,18,18,18,18,18,-6,-17,-76,18,-143,-148,18,18,18,-16,18,126,-138,18,-143,126,-135,126,-129,-128,-55,142,-58,-136,126,-142,-130,148,-18,18,-133,142,126,-134,-3,-4,126,-149,126,-132,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-131,18,18,18,18,126,-126,142,-66,-65,18,18,-69,-64,-67,142,126,142,18,-150,-119,-125,126,-120,-121,-111,126,-124,126,-112,-105,126,-113,126,126,-108,-104,126,126,-106,-107,-110,126,126,-139,-82,126,-127,-68,142,142,-56,-90,-158,-81,18,126,-141,18,-140,-85,18,-83,142,-70,126,-7,142,18,-86,-102,18,-57,142,18,126,-103,-101,-84,-91,126,-8,-87,18,-159,-160,-88,126,-89,-161,]),'CHAR':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[51,-5,51,-80,-75,-78,51,-77,51,51,51,-79,51,51,51,51,51,-6,-17,-76,51,51,51,51,-16,51,51,-18,51,-3,-4,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-121,-82,-90,-158,-81,51,51,-85,51,-83,-7,51,-86,-102,51,51,-103,-101,-84,-91,-8,-87,51,-159,-160,-88,-89,-161,]),'ASSIGN':([1,6,16,20,22,23,49,51,64,67,69,71,74,75,76,81,82,84,85,90,95,100,104,124,131,136,137,140,141,143,154,156,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,185,195,196,199,200,220,222,231,254,],[-122,-137,-145,-144,-147,-146,-143,-148,127,-138,-143,-135,-129,-128,-55,-58,-136,-142,-130,-133,-134,-149,-132,-131,-126,-66,-65,-69,-64,-67,210,-150,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,-139,-127,-68,-59,-56,-141,-140,-70,-57,]),'RPAR':([1,6,16,20,22,23,51,67,69,71,72,74,75,76,77,81,82,84,85,90,95,100,104,124,128,131,133,135,136,137,140,141,143,154,156,158,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,195,196,197,199,200,206,214,215,216,217,218,220,222,227,230,231,233,237,240,245,254,255,267,288,294,],[-122,-137,-145,-144,-147,-146,-148,-138,-143,-135,131,-129,-128,-55,134,-58,-136,-142,-130,-133,-134,-149,-132,-131,185,-126,-62,193,-66,-65,-69,-64,-67,-53,-150,219,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,222,-155,-156,-139,-127,-68,-164,-59,-56,-157,244,-14,-12,-13,-11,-141,-140,-47,-63,-70,-46,264,-54,-154,-57,-165,-15,-157,296,]),'INT':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[20,-5,20,-80,-75,-78,20,-77,20,20,20,-79,20,20,20,20,20,-6,-17,-76,20,20,20,20,-16,20,20,-18,20,-3,-4,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-121,-82,-90,-158,-81,20,20,-85,20,-83,-7,20,-86,-102,20,20,-103,-101,-84,-91,-8,-87,20,-159,-160,-88,-89,-161,]),'COLON':([1,6,16,20,22,23,49,51,67,69,70,71,74,75,76,81,82,83,84,85,86,90,93,95,100,104,124,129,131,136,137,140,141,143,156,157,159,160,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,185,189,195,196,199,200,216,219,220,222,226,231,242,244,247,254,260,262,264,268,277,278,292,296,],[-122,-137,-145,-144,-147,-146,94,-148,-138,-143,130,-135,-129,-128,-55,-58,-136,146,-142,-130,147,-133,153,-134,-149,-132,-131,186,-126,-66,-65,-69,-64,-67,-150,212,-119,-125,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,-139,94,-127,-68,-59,-56,94,-9,-141,-140,251,-70,266,-10,269,-57,276,280,281,283,287,-99,-100,297,]),'DEC':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,82,83,84,85,87,88,90,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,138,139,150,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,202,203,209,210,211,220,221,222,223,224,225,240,241,246,248,249,250,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[55,-122,-5,55,-80,-137,-75,-78,55,-77,55,55,-145,55,-79,-144,-147,-146,55,55,55,55,55,-6,-17,-76,55,-143,-148,55,55,55,-16,55,104,-138,55,-143,104,-135,104,-129,-128,-136,104,-142,-130,-18,55,-133,104,-134,-3,-4,104,-149,104,-132,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-131,55,55,55,55,104,-126,55,55,104,55,-150,-119,-125,104,-120,-121,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,104,104,-139,-82,104,-127,-90,-158,-81,55,104,-141,55,-140,-85,55,-83,104,-7,55,-86,-102,55,55,104,-103,-101,-84,-91,104,-8,-87,55,-159,-160,-88,104,-89,-161,]),'RETURN':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[57,-5,-80,-75,-78,-77,-79,-6,-17,-76,57,-16,-18,-3,-4,-82,-90,-158,-81,-85,57,-83,-7,-86,-102,57,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'DEDENT':([5,7,9,12,19,41,46,58,87,188,202,203,209,223,225,241,248,249,250,256,257,258,259,270,271,272,273,274,275,282,284,285,289,290,291,293,295,298,],[-80,-75,-78,-77,-79,-17,-76,-16,-18,-82,-90,-158,-81,-85,-83,-7,-86,-102,271,-92,-96,275,-94,-103,-101,-84,-93,-97,-91,-8,-87,-95,-159,-160,-88,-98,-89,-161,]),'PERIOD':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,106,-138,-143,106,106,106,106,106,106,106,106,106,106,106,106,106,-149,106,-132,-131,106,-126,106,-150,106,-125,106,106,106,106,-124,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-139,106,106,106,-141,-140,106,106,106,106,]),'LBRACKET':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,76,78,81,82,83,84,85,87,88,90,92,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,136,137,138,139,140,141,143,145,150,154,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,196,197,199,200,202,203,209,210,211,220,221,222,223,224,225,230,231,240,241,242,246,248,249,250,254,255,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[59,-122,-5,59,-80,-137,-75,-78,59,-77,59,59,-145,59,-79,-144,-147,-146,59,59,59,59,59,-6,-17,-76,59,-143,-148,59,59,59,-16,59,107,-138,59,-143,107,107,107,107,107,-55,138,-58,107,107,107,107,-18,59,107,138,107,107,-3,-4,107,-149,107,-132,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-131,59,59,59,59,107,-126,138,-66,-65,59,59,-69,138,-67,138,107,138,59,-150,107,-125,107,107,-121,107,107,-124,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-139,-82,107,107,-68,138,138,-56,-90,-158,-81,59,107,-141,59,-140,-85,59,-83,138,-70,107,-7,138,59,-86,-102,59,-57,138,59,107,-103,-101,-84,-91,107,-8,-87,59,-159,-160,-88,107,-89,-161,]),'RBRACKET':([1,6,16,20,22,23,51,59,67,69,71,74,75,82,84,85,90,95,99,100,101,104,124,131,155,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,185,194,195,211,220,222,],[-122,-137,-145,-144,-147,-146,-148,100,-138,-143,-135,-129,-128,-136,-142,-130,-133,-134,156,-149,-151,-132,-131,-126,-153,-150,-119,-125,220,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,-139,231,-127,-152,-141,-140,]),'SWITCH':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[26,-5,-80,-75,-78,-77,-79,-6,-17,-76,26,-16,-18,-3,-4,-82,-90,-158,-81,-85,26,-83,-7,-86,-102,26,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'GT':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,76,78,81,82,83,84,85,90,93,95,98,100,101,104,109,124,129,131,136,137,140,141,143,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,196,197,198,199,200,204,205,211,220,222,227,231,232,233,235,236,240,254,255,263,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,109,-138,-143,109,-135,109,-129,-128,-55,139,-58,-136,109,-142,-130,-133,109,-134,109,-149,109,-132,163,-131,109,-126,-66,-65,-69,-64,-67,109,-150,-119,-125,109,-120,-111,109,-124,109,-112,-105,109,-113,109,109,-108,-104,109,109,-106,-107,-110,109,109,-139,109,-127,-68,-164,-157,-59,-56,-162,-157,109,-141,-140,-47,-70,254,-46,262,-46,109,-57,-165,-163,109,109,109,]),'AMP':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,82,83,84,85,87,88,90,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,138,139,150,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,202,203,209,210,211,220,221,222,223,224,225,240,241,246,248,249,250,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[27,-122,-5,27,-80,-137,-75,-78,27,-77,27,27,-145,27,-79,-144,-147,-146,27,27,27,27,27,-6,-17,-76,27,-143,-148,27,27,27,-16,27,110,-138,27,-143,110,-135,110,-129,-128,-136,110,-142,-130,-18,27,-133,110,-134,-3,-4,110,-149,110,-132,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-131,27,27,27,27,110,-126,27,27,110,27,-150,-119,-125,110,-120,-121,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,110,110,-139,-82,110,-127,-90,-158,-81,27,110,-141,27,-140,-85,27,-83,110,-7,27,-86,-102,27,27,110,-103,-101,-84,-91,110,-8,-87,27,-159,-160,-88,110,-89,-161,]),'DEF':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[61,-5,-80,-75,-78,-77,-79,-6,-17,-76,61,-16,-18,-3,-4,-82,-90,-158,-81,-85,61,-83,-7,-86,-102,61,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'BREAK':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[28,-5,-80,-75,-78,-77,-79,-6,-17,-76,28,-16,-18,-3,-4,-82,-90,-158,-81,-85,28,-83,-7,-86,-102,28,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'NULL':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[6,-5,6,-80,-75,-78,6,-77,6,6,6,-79,6,6,6,6,6,-6,-17,-76,6,6,6,6,-16,6,6,-18,6,-3,-4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-121,-82,-90,-158,-81,6,6,-85,6,-83,-7,6,-86,-102,6,6,-103,-101,-84,-91,-8,-87,6,-159,-160,-88,-89,-161,]),'LE':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,113,-138,-143,113,-135,113,-129,-128,-136,113,-142,-130,-133,113,-134,113,-149,113,-132,-131,113,-126,113,-150,-119,-125,113,-120,-111,113,-124,113,-112,-105,113,-113,113,113,-108,-104,113,113,-106,-107,-110,113,113,-139,113,-127,113,-141,-140,113,113,113,113,]),'MINUS':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,82,83,84,85,87,88,90,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,138,139,150,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,202,203,209,210,211,220,221,222,223,224,225,240,241,246,248,249,250,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[30,-122,-5,30,-80,-137,-75,-78,30,-77,30,30,-145,30,-79,-144,-147,-146,30,30,30,30,30,-6,-17,-76,30,-143,-148,30,30,30,-16,30,114,-138,30,-143,114,-135,114,-129,-128,-136,114,-142,-130,-18,30,-133,114,-134,-3,-4,114,-149,114,-132,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-131,30,30,30,30,114,-126,30,30,114,30,-150,114,-125,114,114,-121,114,114,-124,114,114,-105,114,114,114,114,-108,-104,114,114,-106,-107,114,114,114,-139,-82,114,-127,-90,-158,-81,30,114,-141,30,-140,-85,30,-83,114,-7,30,-86,-102,30,30,114,-103,-101,-84,-91,114,-8,-87,30,-159,-160,-88,114,-89,-161,]),'OR':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,115,-138,-143,115,-135,115,-129,-128,-136,115,-142,-130,-133,115,-134,115,-149,115,-132,-131,115,-126,115,-150,-119,-125,115,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,115,115,-139,115,-127,115,-141,-140,115,115,115,115,]),'$end':([0,2,5,7,9,12,19,38,41,46,53,54,56,58,87,96,97,188,202,203,209,223,225,241,248,271,272,275,282,284,289,290,291,295,298,],[-157,-5,-80,-75,-78,-77,-79,-6,-17,-76,0,-2,-1,-16,-18,-3,-4,-82,-90,-158,-81,-85,-83,-7,-86,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'CLASS':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[31,-5,-80,-75,-78,-77,-79,-6,-17,-76,31,-16,-18,-3,-4,-82,-90,-158,-81,-85,31,-83,-7,-86,-102,31,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'PIPE':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,117,-138,-143,117,-135,117,-129,-128,-136,117,-142,-130,-133,117,-134,117,-149,117,-132,-131,117,-126,117,-150,-119,-125,117,-120,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,117,117,-139,117,-127,117,-141,-140,117,117,117,117,]),'GE':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,116,-138,-143,116,-135,116,-129,-128,-136,116,-142,-130,-133,116,-134,116,-149,116,-132,-131,116,-126,116,-150,-119,-125,116,-120,-111,116,-124,116,-112,-105,116,-113,116,116,-108,-104,116,116,-106,-107,-110,116,116,-139,116,-127,116,-141,-140,116,116,116,116,]),'CASE':([234,256,257,271,274,293,],[261,261,-96,-101,-97,-98,]),'MOD':([1,6,16,20,22,23,49,51,64,67,69,70,71,72,74,75,82,83,84,85,90,93,95,98,100,101,104,124,129,131,150,156,159,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,194,195,211,220,222,240,268,278,292,],[-122,-137,-145,-144,-147,-146,-143,-148,119,-138,-143,119,-135,119,-129,-128,-136,119,-142,-130,-133,119,-134,119,-149,119,-132,-131,119,-126,119,-150,119,-125,119,119,119,119,-124,119,119,119,119,119,119,119,-108,119,119,119,-106,-107,119,119,119,-139,119,-127,119,-141,-140,119,119,119,119,]),'ENDIF':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[66,-5,-80,-75,-78,-77,-79,-6,-17,-76,66,-16,-18,-3,-4,-82,-90,-158,-81,-85,66,-83,-7,-86,-102,66,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'DEFINE':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[33,-5,-80,-75,-78,-77,-79,-6,-17,-76,33,-16,-18,-3,-4,-82,-90,-158,-81,-85,33,-83,-7,-86,-102,33,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'ENUM':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[34,-5,-80,-75,-78,-77,-79,-6,-17,-76,34,-16,-18,-3,-4,-82,-90,-158,-81,-85,34,-83,-7,-86,-102,34,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'LBRACE':([18,39,73,77,80,89,94,142,144,149,192,213,233,279,],[80,80,132,80,80,151,80,80,80,80,80,80,80,80,]),'INC':([0,1,2,4,5,6,7,9,10,12,13,15,16,17,19,20,22,23,25,26,27,30,35,38,41,46,47,49,51,55,56,57,58,59,64,67,68,69,70,71,72,74,75,82,83,84,85,87,88,90,93,95,96,97,98,100,101,104,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,138,139,150,155,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,188,194,195,202,203,209,210,211,220,221,222,223,224,225,240,241,246,248,249,250,261,268,270,271,272,275,278,282,284,286,289,290,291,292,295,298,],[35,-122,-5,35,-80,-137,-75,-78,35,-77,35,35,-145,35,-79,-144,-147,-146,35,35,35,35,35,-6,-17,-76,35,-143,-148,35,35,35,-16,35,124,-138,35,-143,124,-135,124,-129,-128,-136,124,-142,-130,-18,35,-133,124,-134,-3,-4,124,-149,124,-132,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-131,35,35,35,35,124,-126,35,35,124,35,-150,-119,-125,124,-120,-121,-111,-116,-124,-114,-112,-105,-115,-113,-117,-109,-108,-104,-118,-123,-106,-107,-110,124,124,-139,-82,124,-127,-90,-158,-81,35,124,-141,35,-140,-85,35,-83,124,-7,35,-86,-102,35,35,124,-103,-101,-84,-91,124,-8,-87,35,-159,-160,-88,124,-89,-161,]),'IFNDEF':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[62,-5,-80,-75,-78,-77,-79,-6,-17,-76,62,-16,-18,-3,-4,-82,-90,-158,-81,-85,62,-83,-7,-86,-102,62,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'INCLUDE':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[37,-5,-80,-75,-78,-77,-79,-6,-17,-76,37,-16,-18,-3,-4,-82,-90,-158,-81,-85,37,-83,-7,-86,-102,37,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'IF':([0,2,5,7,9,12,19,38,41,46,56,58,87,96,97,188,202,203,209,223,224,225,241,248,249,250,270,271,272,275,282,284,289,290,291,295,298,],[68,-5,-80,-75,-78,-77,-79,-6,-17,-76,68,-16,-18,-3,-4,-82,-90,-158,-81,-85,68,-83,-7,-86,-102,68,-103,-101,-84,-91,-8,-87,-159,-160,-88,-89,-161,]),'NOT':([0,2,4,5,7,9,10,12,13,15,17,19,25,26,27,30,35,38,41,46,47,55,56,57,58,59,68,87,88,96,97,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,163,188,202,203,209,210,221,223,224,225,241,246,248,249,250,261,270,271,272,275,282,284,286,289,290,291,295,298,],[10,-5,10,-80,-75,-78,10,-77,10,10,10,-79,10,10,10,10,10,-6,-17,-76,10,10,10,10,-16,10,10,-18,10,-3,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-121,-82,-90,-158,-81,10,10,-85,10,-83,-7,10,-86,-102,10,10,-103,-101,-84,-91,-8,-87,10,-159,-160,-88,-89,-161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'power':([0,4,10,13,15,17,25,26,27,30,35,47,55,56,57,59,68,88,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,210,221,224,246,250,261,286,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),'stmt':([0,56,224,250,],[38,97,249,270,]),'param_type_list':([18,39,77,80,94,142,144,149,192,213,233,279,],[79,79,79,79,79,79,79,79,79,79,79,79,]),'enum_decl':([0,56,224,250,],[3,3,3,3,]),'varargslist':([158,],[214,]),'case_expr_list':([261,],[277,]),'classdef':([0,56,224,250,],[5,5,5,5,]),'include_stmt':([0,56,224,250,],[40,40,40,40,]),'pointer':([78,92,133,141,145,154,197,199,230,242,255,],[137,137,137,137,137,137,137,137,137,137,137,]),'array_contents':([59,],[99,]),'if_stmt':([0,56,224,250,],[7,7,7,7,]),'ifndef_stmt':([0,56,224,250,],[8,8,8,8,]),'compound_stmt':([0,56,224,250,],[41,41,41,41,]),'struct_decl':([0,56,224,250,],[42,42,42,42,]),'default':([234,256,],[259,273,]),'name_list':([148,],[205,]),'struct_decl_stmt':([0,56,224,250,],[11,11,11,11,]),'break':([0,56,224,250,],[43,43,43,43,]),'typedecl_list':([142,149,279,],[198,206,288,]),'switch_suite':([146,],[202,]),'dowhile_stmt':([0,56,224,250,],[12,12,12,12,]),'while_stmt':([0,56,224,250,],[46,46,46,46,]),'pointer_or_array':([78,92,133,141,145,154,197,199,230,242,255,],[143,143,143,196,143,143,143,143,143,143,143,]),'assign_stmt':([0,56,224,250,],[48,48,48,48,]),'define_stmt':([0,56,224,250,],[21,21,21,21,]),'enum_decl_stmt':([0,56,224,250,],[50,50,50,50,]),'funcdef':([0,56,224,250,],[19,19,19,19,]),'return_stmt':([0,56,224,250,],[45,45,45,45,]),'arglist':([128,],[182,]),'expr_stmt':([0,56,224,250,],[52,52,52,52,]),'module':([0,],[53,]),'empty':([0,190,198,205,206,288,],[54,227,227,227,227,227,]),'optional_comma':([190,198,205,206,288,],[229,232,235,237,294,]),'endif_stmt':([0,56,224,250,],[24,24,24,24,]),'array':([78,92,133,141,145,154,197,199,230,242,255,],[136,136,136,136,136,136,136,136,136,136,136,]),'stmt_list':([0,],[56,]),'stmts':([224,],[250,]),'string':([0,4,10,13,15,17,25,26,27,30,35,37,47,55,56,57,59,68,88,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,210,221,224,246,250,261,286,],[23,23,23,23,23,23,23,23,23,23,23,91,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'enum_name_list':([151,],[208,]),'type_declaration':([18,39,77,80,94,142,144,149,192,213,233,279,],[78,92,133,145,154,197,199,197,230,242,255,197,]),'simple_stmt':([0,56,224,250,],[58,58,58,58,]),'if_orelse':([223,291,],[248,295,]),'param_list_contents':([77,],[135,]),'var_decl_stmt':([0,56,224,250,],[60,60,60,60,]),'bracket_list':([78,92,133,145,154,197,199,230,242,255,],[141,141,141,141,141,141,141,141,141,141,]),'var_decl':([0,56,132,158,224,228,243,250,],[29,29,191,217,29,252,217,29,]),'rshift':([64,70,71,72,74,75,82,83,84,85,90,93,95,98,101,129,150,159,161,162,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,194,195,211,240,268,278,292,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'switch_stmt':([0,56,224,250,],[9,9,9,9,]),'pass':([0,56,224,250,],[63,63,63,63,]),'parameters':([102,],[157,]),'varaglist_elem':([158,243,],[218,267,]),'argument':([128,221,],[183,245,]),'expr':([0,4,10,13,15,17,25,26,27,30,35,47,55,56,57,59,68,88,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,210,221,224,246,250,261,286,],[64,70,71,72,74,75,82,83,84,85,90,93,95,64,98,101,129,150,159,161,162,164,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,194,195,211,240,184,64,268,64,278,292,]),'small_stmt':([0,56,224,250,],[32,32,32,32,]),'atom':([0,4,10,13,15,17,25,26,27,30,35,47,55,56,57,59,68,88,105,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,125,126,127,128,138,139,155,210,221,224,246,250,261,286,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'case':([234,256,],[257,274,]),'switch_stmts':([234,],[258,]),'case_list':([234,],[256,]),'struct_decl_list':([132,],[190,]),'while_orelse':([188,],[225,]),'func_decl':([0,56,224,250,],[36,36,36,36,]),'typedef_stmt':([0,56,224,250,],[65,65,65,65,]),'inline_func_decl':([18,39,77,80,94,142,144,149,192,213,233,279,],[81,81,81,81,81,81,81,81,81,81,81,81,]),'suite':([130,147,153,186,212,251,266,269,276,280,281,283,287,297,],[188,203,209,223,241,272,282,284,285,289,290,291,293,298,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',95),
  ('module -> empty','module',1,'p_empty_module','cparse.py',101),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',108),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',112),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',116),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',120),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',125),
  ('funcdef -> DEF NAME parameters ARROW type_declaration COLON suite','funcdef',7,'p_funcdef2','cparse.py',131),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',138),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',142),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',146),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',150),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',151),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',155),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',160),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',164),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',165),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',173),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',177),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',178),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',179),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',180),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',181),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',182),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',183),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',184),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',185),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',186),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',187),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',188),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',189),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',190),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',196),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',203),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',208),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',213),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',218),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',223),
  ('break -> BREAK','break',1,'p_break','cparse.py',228),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',234),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',239),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',244),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',248),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',254),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',259),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',264),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',265),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',270),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',274),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',279),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',285),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',290),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',296),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',302),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',323),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',328),
  ('type_declaration -> type_declaration LT typedecl_list optional_comma GT','type_declaration',5,'p_type_declaration_generic','cparse.py',332),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',338),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',342),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',347),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',351),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',355),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',359),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',365),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',382),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',383),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',387),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',391),
  ('pointer -> MULT','pointer',1,'p_pointer','cparse.py',395),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',399),
  ('include_stmt -> INCLUDE string','include_stmt',2,'p_include_standard','cparse.py',403),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',408),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',414),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',419),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',426),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',427),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',428),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',429),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',430),
  ('compound_stmt -> classdef','compound_stmt',1,'p_compound_stmt','cparse.py',431),
  ('dowhile_stmt -> DOWHILE expr COLON suite','dowhile_stmt',4,'p_dowhile','cparse.py',439),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',445),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',450),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',455),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',460),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',465),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',470),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',474),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',479),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',485),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',490),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',494),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',498),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',502),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',506),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',511),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',515),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',519),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',524),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',528),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',533),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',537),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',541),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',549),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',554),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',559),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',564),
  ('expr -> expr MOD expr','expr',3,'p_mod_expr','cparse.py',569),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',574),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',579),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',584),
  ('expr -> expr LE expr','expr',3,'p_le_expr','cparse.py',589),
  ('expr -> expr GE expr','expr',3,'p_ge_expr','cparse.py',594),
  ('expr -> expr AND expr','expr',3,'p_and_expr','cparse.py',599),
  ('expr -> expr OR expr','expr',3,'p_or_expr','cparse.py',604),
  ('expr -> expr AMP expr','expr',3,'p_bitand_expr','cparse.py',611),
  ('expr -> expr PIPE expr','expr',3,'p_bitor_expr','cparse.py',616),
  ('expr -> expr CARROT expr','expr',3,'p_xor_expr','cparse.py',621),
  ('expr -> expr LSHIFT expr','expr',3,'p_lshift_expr','cparse.py',626),
  ('expr -> expr rshift expr','expr',3,'p_rshift_expr','cparse.py',631),
  ('rshift -> GT GT','rshift',2,'p_rshift','cparse.py',636),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',640),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',644),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',649),
  ('expr -> expr PERIOD NAME','expr',3,'p_expr_struct_access','cparse.py',654),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',659),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',663),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',668),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',673),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',678),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',685),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',690),
  ('expr -> INC expr','expr',2,'p_pre_inc','cparse.py',697),
  ('expr -> DEC expr','expr',2,'p_pre_dec','cparse.py',702),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',707),
  ('expr -> INV expr','expr',2,'p_inv_expr','cparse.py',712),
  ('atom -> NULL','atom',1,'p_null','cparse.py',717),
  ('power -> atom','power',1,'p_power_1','cparse.py',722),
  ('power -> atom LPAR RPAR','power',3,'p_power_2','cparse.py',726),
  ('power -> atom LPAR arglist RPAR','power',4,'p_power_call_args','cparse.py',731),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_index','cparse.py',738),
  ('expr -> AMP expr','expr',2,'p_address_of','cparse.py',745),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',750),
  ('atom -> INT','atom',1,'p_atom_int','cparse.py',755),
  ('atom -> FLOAT','atom',1,'p_atom_float','cparse.py',760),
  ('atom -> string','atom',1,'p_atom_str','cparse.py',765),
  ('string -> STRING','string',1,'p_str','cparse.py',769),
  ('atom -> CHAR','atom',1,'p_atom_char','cparse.py',774),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',779),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',784),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',789),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',793),
  ('array_contents -> array_contents COMMA','array_contents',2,'p_array_litral_contents_3','cparse.py',797),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',807),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',811),
  ('argument -> expr','argument',1,'p_argument','cparse.py',815),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',819),
  ('classdef -> CLASS NAME COLON suite','classdef',4,'p_class_decl_plain','cparse.py',824),
  ('classdef -> CLASS NAME LT name_list optional_comma GT COLON suite','classdef',8,'p_class_decl_generic','cparse.py',829),
  ('classdef -> CLASS NAME LPAR typedecl_list optional_comma RPAR COLON suite','classdef',8,'p_class_decl_parents','cparse.py',835),
  ('classdef -> CLASS NAME LT name_list optional_comma GT LPAR typedecl_list optional_comma RPAR COLON suite','classdef',12,'p_class_decl_generics_and_parents','cparse.py',841),
  ('name_list -> NAME','name_list',1,'p_name_list_one','cparse.py',847),
  ('name_list -> name_list COMMA NAME','name_list',3,'p_name_list','cparse.py',851),
  ('typedecl_list -> type_declaration','typedecl_list',1,'p_typedecl_list_one','cparse.py',855),
  ('typedecl_list -> typedecl_list COMMA type_declaration','typedecl_list',3,'p_type_decl_list','cparse.py',859),
]
