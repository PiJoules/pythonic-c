
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INCLUDE_LOCAL INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr MULT expr\n                | expr DIV expr\n                | expr LT expr\n                | expr EQ expr\n                | expr GT expr\n                | powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARtestlist : testlist_multi COMMA\n                    | testlist_multi testlist_multi : testlist_multi COMMA expr\n                        | exprarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'PASS':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[6,-126,-125,-124,6,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,6,-83,-88,-131,-80,-113,-79,-100,6,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'WHILE':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,129,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[47,-126,-125,-124,47,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,155,-132,-128,-112,47,-83,-88,-131,-80,-113,-79,-100,47,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'NULL':([0,1,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,155,156,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[54,-126,-125,-124,54,-76,-6,-75,54,54,54,54,-77,-74,54,-16,-15,-121,54,-109,54,-5,54,54,-120,-78,54,-4,-3,-117,54,54,54,54,-118,54,54,54,54,54,-119,-123,-114,-17,54,-122,-116,-127,54,-115,54,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,54,-128,54,-112,54,54,-83,-88,54,-131,54,-80,-113,-79,-100,54,-7,54,-84,-81,-101,-99,54,-85,-89,-82,-86,54,-87,]),'STRING':([0,1,10,12,13,14,16,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,57,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,155,156,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[1,-126,-125,-124,1,-76,82,-6,-75,1,1,1,1,-77,-74,1,-16,-15,-121,1,-109,1,-5,1,1,-120,106,-78,1,-4,-3,-117,1,1,1,1,-118,1,1,1,1,1,-119,-123,-114,-17,1,-122,-116,-127,1,-115,1,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,1,-128,1,-112,1,1,-83,-88,1,-131,1,-80,-113,-79,-100,1,-7,1,-84,-81,-101,-99,1,-85,-89,-82,-86,1,-87,]),'TYPEDEF':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[7,-126,-125,-124,7,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,7,-83,-88,-131,-80,-113,-79,-100,7,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'SWITCH':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[36,-126,-125,-124,36,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,36,-83,-88,-131,-80,-113,-79,-100,36,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'CASE':([191,202,206,210,218,231,],[207,-99,207,-94,-95,-96,]),'INDENT':([130,167,],[156,191,]),'NE':([1,10,12,15,41,44,46,54,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,150,171,174,178,181,195,204,221,230,],[-126,-125,-124,77,-121,-123,-109,-120,-117,-118,-119,-123,77,-114,77,77,-122,-116,77,77,-127,-115,77,-111,-102,-106,77,-103,-110,-108,-105,-107,-104,77,-132,-128,77,-112,77,-131,77,-113,77,77,77,77,77,]),'$end':([0,1,10,12,13,14,20,22,30,33,35,37,38,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,165,166,171,173,178,181,185,189,196,202,217,222,224,225,229,],[-140,-126,-125,-124,-1,-76,-6,-75,-2,-77,-74,-16,0,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,-83,-88,-131,-80,-113,-79,-7,-84,-81,-99,-85,-89,-82,-86,-87,]),'INCLUDE':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[16,-126,-125,-124,16,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,16,-83,-88,-131,-80,-113,-79,-100,16,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'DO':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[19,-126,-125,-124,19,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,19,-83,-88,-131,-80,-113,-79,-100,19,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'COLON':([1,10,12,19,41,44,46,54,71,76,85,86,88,91,92,95,96,98,101,104,119,120,121,123,124,125,126,127,128,131,138,143,147,159,160,171,175,178,187,190,197,204,211,220,221,230,],[-126,-125,-124,84,-121,97,-109,-120,-117,-118,-119,-123,-114,133,134,-122,-116,141,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,158,-132,-128,-112,-8,97,-131,97,-113,-9,205,213,216,223,227,-97,-98,]),'IFNDEF':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[18,-126,-125,-124,18,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,18,-83,-88,-131,-80,-113,-79,-100,18,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'LPAR':([0,1,7,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,44,46,47,48,49,53,54,55,59,61,64,67,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,90,94,95,96,97,101,102,104,108,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,152,155,156,157,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[61,-126,64,-125,-124,61,-76,-6,-75,61,61,61,61,-77,-74,61,-16,-15,94,61,-123,-109,61,-5,61,61,-120,64,-78,61,64,64,-4,-3,-117,61,61,61,61,-118,61,61,61,61,61,-119,-123,-114,-17,132,61,-122,-116,64,-127,61,-115,64,61,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,61,-128,61,-112,64,61,61,64,-83,-88,61,-131,61,-80,-113,-79,-100,61,-7,61,-84,-81,-101,-99,61,-85,-89,-82,-86,61,-87,]),'LT':([0,1,10,12,13,14,15,20,22,25,26,27,32,33,35,36,37,39,41,42,44,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,87,88,89,91,92,94,95,96,98,100,101,102,104,107,113,119,120,121,122,123,124,125,126,127,128,136,138,142,143,144,146,147,150,155,156,165,166,170,171,172,173,174,178,181,182,183,185,188,189,195,196,201,202,204,207,217,221,222,224,225,226,229,230,],[55,-126,-125,-124,55,-76,73,-6,-75,55,55,55,55,-77,-74,55,-16,-15,-121,55,-123,-109,55,-5,55,55,-120,-78,55,-4,-3,-117,55,55,55,55,-118,55,55,55,55,55,-119,-123,73,-114,-17,73,73,55,-122,-116,73,73,-127,55,-115,73,55,-111,-102,-106,73,-103,-110,-108,-105,-107,-104,73,-132,55,-128,73,55,-112,73,55,55,-83,-88,55,-131,55,-80,73,-113,73,-100,55,-7,55,-84,73,-81,-101,-99,73,55,-85,73,-89,-82,-86,55,-87,73,]),'ASSIGN':([1,10,12,15,41,44,46,54,65,66,71,76,85,86,88,95,96,101,104,109,110,111,112,119,120,121,123,124,125,126,127,128,138,140,143,147,148,149,151,154,171,178,179,],[-126,-125,-124,74,-121,-123,-109,-120,-54,-56,-117,-118,-119,-123,-114,-122,-116,-127,-115,-64,-65,-63,-62,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,172,-128,-112,-57,-66,-67,-55,-131,-113,-68,]),'NOT':([0,1,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,155,156,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[25,-126,-125,-124,25,-76,-6,-75,25,25,25,25,-77,-74,25,-16,-15,-121,25,-109,25,-5,25,25,-120,-78,25,-4,-3,-117,25,25,25,25,-118,25,25,25,25,25,-119,-123,-114,-17,25,-122,-116,-127,25,-115,25,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,25,-128,25,-112,25,25,-83,-88,25,-131,25,-80,-113,-79,-100,25,-7,25,-84,-81,-101,-99,25,-85,-89,-82,-86,25,-87,]),'RETURN':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[26,-126,-125,-124,26,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,26,-83,-88,-131,-80,-113,-79,-100,26,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'ELLIPSIS':([132,186,],[161,161,]),'DEF':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[29,-126,-125,-124,29,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,29,-83,-88,-131,-80,-113,-79,-100,29,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'RBRACE':([1,10,12,41,46,54,65,66,71,76,85,86,88,95,96,101,104,109,110,111,112,118,119,120,121,123,124,125,126,127,128,138,140,143,147,148,149,151,154,168,169,171,176,177,178,179,195,198,199,200,212,214,],[-126,-125,-124,-121,-109,-120,-54,-56,-117,-118,-119,-123,-114,-122,-116,-127,-115,-64,-65,-63,-62,154,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-52,-128,-112,-57,-66,-67,-55,-41,192,-131,-140,-48,-113,-68,-53,-46,-45,215,-42,-47,]),'IF':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[32,-126,-125,-124,32,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,32,-83,-88,-131,-80,-113,-79,-100,32,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'RBRACKET':([1,10,12,41,46,49,54,71,76,85,86,88,95,96,99,100,101,104,113,119,120,121,123,124,125,126,127,128,138,143,147,150,171,174,178,],[-126,-125,-124,-121,-109,101,-120,-117,-118,-119,-123,-114,-122,-116,143,-129,-127,-115,151,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,179,-131,-130,-113,]),'MULT':([0,1,10,12,13,14,15,20,22,25,26,27,32,33,35,36,37,39,41,42,44,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,87,88,89,91,92,94,95,96,98,100,101,102,104,107,113,119,120,121,122,123,124,125,126,127,128,136,138,142,143,144,146,147,150,155,156,165,166,170,171,172,173,174,178,181,182,183,185,188,189,195,196,201,202,204,207,217,221,222,224,225,226,229,230,],[27,-126,-125,-124,27,-76,81,-6,-75,27,27,27,27,-77,-74,27,-16,-15,-121,27,-123,-109,27,-5,27,27,-120,-78,27,-4,-3,-117,27,27,27,27,-118,27,27,27,27,27,-119,-123,81,-114,-17,81,81,27,-122,81,81,81,-127,27,81,81,27,-111,81,81,81,81,81,81,-105,81,-104,81,-132,27,-128,81,27,-112,81,27,27,-83,-88,27,-131,27,-80,81,81,81,-100,27,-7,27,-84,81,-81,-101,-99,81,27,-85,81,-89,-82,-86,27,-87,81,]),'ELSE':([165,173,191,202,206,210,218,225,231,],[190,197,211,-99,211,-94,-95,190,-96,]),'FLOAT':([0,1,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,155,156,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[10,-126,-125,-124,10,-76,-6,-75,10,10,10,10,-77,-74,10,-16,-15,-121,10,-109,10,-5,10,10,-120,-78,10,-4,-3,-117,10,10,10,10,-118,10,10,10,10,10,-119,-123,-114,-17,10,-122,-116,-127,10,-115,10,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,10,-128,10,-112,10,10,-83,-88,10,-131,10,-80,-113,-79,-100,10,-7,10,-84,-81,-101,-99,10,-85,-89,-82,-86,10,-87,]),'MINUS':([0,1,10,12,13,14,15,20,22,25,26,27,32,33,35,36,37,39,41,42,44,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,87,88,89,91,92,94,95,96,98,100,101,102,104,107,113,119,120,121,122,123,124,125,126,127,128,136,138,142,143,144,146,147,150,155,156,165,166,170,171,172,173,174,178,181,182,183,185,188,189,195,196,201,202,204,207,217,221,222,224,225,226,229,230,],[42,-126,-125,-124,42,-76,75,-6,-75,42,42,42,42,-77,-74,42,-16,-15,-121,42,-123,-109,42,-5,42,42,-120,-78,42,-4,-3,-117,42,42,42,42,-118,42,42,42,42,42,-119,-123,75,-114,-17,75,75,42,-122,-116,75,75,-127,42,-115,75,42,-111,-102,75,75,-103,75,75,-105,75,-104,75,-132,42,-128,75,42,-112,75,42,42,-83,-88,42,-131,42,-80,75,75,75,-100,42,-7,42,-84,75,-81,-101,-99,75,42,-85,75,-89,-82,-86,42,-87,75,]),'RPAR':([1,10,12,41,46,54,64,65,66,71,76,85,86,88,94,95,96,101,104,107,109,110,111,112,115,116,119,120,121,123,124,125,126,127,128,132,136,137,138,139,140,143,147,148,149,151,154,160,161,162,163,164,171,178,179,180,194,195,203,],[-126,-125,-124,-121,-109,-120,117,-54,-56,-117,-118,-119,-123,-114,138,-122,-116,-127,-115,147,-64,-65,-63,-62,-60,153,-111,-102,-106,-103,-110,-108,-105,-107,-104,159,-139,-138,-132,171,-52,-128,-112,-57,-66,-67,-55,-11,-13,187,-10,-12,-131,-113,-68,-61,-137,-53,-14,]),'NAME':([0,1,7,10,12,13,14,18,20,22,25,26,27,29,32,33,35,36,37,39,40,41,42,46,47,48,49,50,51,53,54,55,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,97,101,102,104,108,109,110,111,112,113,119,120,121,123,124,125,126,127,128,132,135,138,142,143,145,146,147,148,149,151,152,154,155,156,157,165,166,170,171,172,173,178,179,181,182,183,185,186,188,189,193,196,199,201,202,207,217,222,224,225,226,229,],[44,-126,65,-125,-124,44,-76,83,-6,-75,86,86,86,90,86,-77,-74,86,-16,-15,93,-121,86,-109,86,-5,86,102,103,86,-120,65,-78,86,114,65,-54,-56,65,-4,-3,119,-117,86,86,86,86,-118,86,86,86,86,86,-119,-123,-114,-17,86,-122,-116,65,-127,86,-115,65,-64,-65,-63,-62,86,-111,-102,-106,-103,-110,-108,-105,-107,-104,160,168,-132,86,-128,175,86,-112,-57,-66,-67,65,-55,86,44,65,-83,-88,86,-131,86,-80,-113,-68,-79,-100,44,-7,160,86,-84,212,-81,175,-101,-99,86,-85,-89,-82,-86,86,-87,]),'GT':([1,10,12,15,41,44,46,54,65,66,71,76,85,86,87,88,91,92,95,96,98,100,101,104,105,107,109,110,111,112,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,148,149,150,151,154,171,174,178,179,181,195,204,221,230,],[-126,-125,-124,78,-121,-123,-109,-120,-54,-56,-117,-118,-119,-123,78,-114,78,78,-122,-116,78,78,-127,-115,146,78,-64,-65,-63,-62,-111,-102,-106,78,-103,-110,-108,-105,-107,-104,78,-132,-128,78,-112,-57,-66,78,-67,-55,-131,78,-113,-68,78,78,78,78,78,]),'DIV':([1,10,12,15,41,44,46,54,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,150,171,174,178,181,195,204,221,230,],[-126,-125,-124,79,-121,-123,-109,-120,-117,-118,-119,-123,79,-114,79,79,-122,79,79,79,-127,79,79,-111,79,79,79,79,79,79,-105,79,-104,79,-132,-128,79,-112,79,-131,79,79,79,79,79,79,79,]),'COMMA':([1,10,12,41,46,54,65,66,71,76,85,86,88,95,96,99,100,101,104,109,110,111,112,115,116,119,120,121,123,124,125,126,127,128,136,137,138,139,140,143,147,148,149,151,154,160,161,162,163,164,168,169,171,174,176,177,178,179,180,194,195,203,212,214,220,221,230,],[-126,-125,-124,-121,-109,-120,-54,-56,-117,-118,-119,-123,-114,-122,-116,142,-129,-127,-115,-64,-65,-63,-62,-60,152,-111,-102,-106,-103,-110,-108,-105,-107,-104,-139,-138,-132,170,-52,-128,-112,-57,-66,-67,-55,-11,-13,186,-10,-12,-41,193,-131,-130,199,-48,-113,-68,-61,-137,-53,-14,-42,-47,226,-97,-98,]),'NEWLINE':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,17,20,21,22,23,24,28,31,33,34,35,37,39,41,43,44,45,46,48,52,54,56,58,59,60,65,66,68,69,71,76,82,83,84,85,86,87,88,89,95,96,101,102,104,106,109,110,111,112,114,119,120,121,122,123,124,125,126,127,128,131,133,134,138,140,141,143,144,147,148,149,151,154,158,159,165,166,171,173,178,179,181,184,185,187,189,192,195,196,202,205,213,215,216,217,222,223,224,225,227,229,],[48,-126,-23,-25,-24,-29,-37,-30,-28,-125,-20,-124,69,-76,-71,-31,-6,-21,-75,-18,-38,89,-27,-77,-51,-74,-16,-15,-121,-26,-123,-43,-109,-5,-39,-120,-36,-19,-78,-22,-54,-56,-4,-3,-117,-118,-69,-35,130,-119,-123,-73,-114,-17,-122,-116,-127,-34,-115,-70,-64,-65,-63,-62,-32,-111,-102,-106,-72,-103,-110,-108,-105,-107,-104,-49,130,167,-132,-52,130,-128,-33,-112,-57,-66,-67,-55,130,-8,-83,-88,-131,-80,-113,-68,-79,-50,-7,-9,-84,-40,-53,-81,-99,130,130,-44,130,-85,-89,130,-82,-86,130,-87,]),'LBRACKET':([0,1,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,59,61,63,65,66,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,105,109,110,111,112,113,115,118,119,120,121,123,124,125,126,127,128,138,140,142,143,146,147,148,149,151,154,155,156,165,166,170,171,172,173,178,179,180,181,182,183,184,185,188,189,196,201,202,207,217,222,224,225,226,229,],[49,-126,-125,-124,49,-76,-6,-75,49,49,49,49,-77,-74,49,-16,-15,-121,49,-109,49,-5,49,49,-120,-78,49,113,-54,-56,-4,-3,-117,49,49,49,49,-118,49,49,49,49,49,-119,-123,-114,-17,49,-122,-116,-127,49,-115,113,-64,-65,-63,113,49,113,113,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,113,49,-128,49,-112,-57,-66,-67,-55,49,49,-83,-88,49,-131,49,-80,-113,-68,113,-79,-100,49,113,-7,49,-84,-81,-101,-99,49,-85,-89,-82,-86,49,-87,]),'DEFINE':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[50,-126,-125,-124,50,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,50,-83,-88,-131,-80,-113,-79,-100,50,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'DEDENT':([1,10,12,14,22,33,35,37,39,41,46,54,59,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,165,166,171,173,178,181,182,183,185,189,196,201,202,206,208,209,210,217,218,219,222,224,225,228,229,231,],[-126,-125,-124,-76,-75,-77,-74,-16,-15,-121,-109,-120,-78,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,-83,-88,-131,-80,-113,-79,-100,202,-7,-84,-81,-101,-99,-90,-92,222,-94,-85,-95,-91,-89,-82,-86,-93,-87,-96,]),'ARROW':([1,10,12,15,41,44,46,54,62,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,117,119,120,121,122,123,124,125,126,127,128,131,136,138,143,144,147,150,153,159,171,174,178,181,187,195,204,221,230,],[-126,-125,-124,70,-121,-123,-109,-120,108,-117,-118,70,-123,70,70,70,70,-122,70,70,70,-127,70,70,-58,-111,70,70,70,70,70,70,70,70,70,157,70,-132,-128,70,-112,70,-59,-8,-131,70,70,70,-9,70,70,70,70,]),'STRUCT':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[51,-126,-125,-124,51,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,51,-83,-88,-131,-80,-113,-79,-100,51,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'INC':([1,10,12,15,41,44,46,54,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,150,171,174,178,181,195,204,221,230,],[-126,-125,-124,71,-121,-123,-109,-120,-117,-118,71,-123,71,71,71,71,-122,71,71,71,-127,71,71,-111,71,71,71,71,71,71,71,71,71,71,-132,-128,71,-112,71,-131,71,71,71,71,71,71,71,]),'PLUS':([0,1,10,12,13,14,15,20,22,25,26,27,32,33,35,36,37,39,41,42,44,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,87,88,89,91,92,94,95,96,98,100,101,102,104,107,113,119,120,121,122,123,124,125,126,127,128,136,138,142,143,144,146,147,150,155,156,165,166,170,171,172,173,174,178,181,182,183,185,188,189,195,196,201,202,204,207,217,221,222,224,225,226,229,230,],[53,-126,-125,-124,53,-76,72,-6,-75,53,53,53,53,-77,-74,53,-16,-15,-121,53,-123,-109,53,-5,53,53,-120,-78,53,-4,-3,-117,53,53,53,53,-118,53,53,53,53,53,-119,-123,72,-114,-17,72,72,53,-122,-116,72,72,-127,53,-115,72,53,-111,-102,72,72,-103,72,72,-105,72,-104,72,-132,53,-128,72,53,-112,72,53,53,-83,-88,53,-131,53,-80,72,72,72,-100,53,-7,53,-84,72,-81,-101,-99,72,53,-85,72,-89,-82,-86,53,-87,72,]),'ENDIF':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[56,-126,-125,-124,56,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,56,-83,-88,-131,-80,-113,-79,-100,56,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'INT':([0,1,10,12,13,14,20,22,25,26,27,32,33,35,36,37,39,41,42,46,47,48,49,53,54,59,61,68,69,71,72,73,74,75,76,77,78,79,80,81,85,86,88,89,94,95,96,101,102,104,113,119,120,121,123,124,125,126,127,128,138,142,143,146,147,155,156,165,166,170,171,172,173,178,181,182,183,185,188,189,196,201,202,207,217,222,224,225,226,229,],[12,-126,-125,-124,12,-76,-6,-75,12,12,12,12,-77,-74,12,-16,-15,-121,12,-109,12,-5,12,12,-120,-78,12,-4,-3,-117,12,12,12,12,-118,12,12,12,12,12,-119,-123,-114,-17,12,-122,-116,-127,12,-115,12,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,12,-128,12,-112,12,12,-83,-88,12,-131,12,-80,-113,-79,-100,12,-7,12,-84,-81,-101,-99,12,-85,-89,-82,-86,12,-87,]),'BREAK':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[24,-126,-125,-124,24,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,24,-83,-88,-131,-80,-113,-79,-100,24,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'INCLUDE_LOCAL':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[57,-126,-125,-124,57,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,57,-83,-88,-131,-80,-113,-79,-100,57,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'DEC':([1,10,12,15,41,44,46,54,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,150,171,174,178,181,195,204,221,230,],[-126,-125,-124,76,-121,-123,-109,-120,-117,-118,76,-123,76,76,76,76,-122,76,76,76,-127,76,76,-111,76,76,76,76,76,76,76,76,76,76,-132,-128,76,-112,76,-131,76,76,76,76,76,76,76,]),'LBRACE':([7,55,64,67,93,97,103,108,152,157,],[67,67,67,67,135,67,145,67,67,67,]),'ENUM':([0,1,10,12,13,14,20,22,33,35,37,39,41,46,48,54,59,68,69,71,76,85,86,88,89,95,96,101,104,119,120,121,123,124,125,126,127,128,138,143,147,156,165,166,171,173,178,181,182,183,185,189,196,201,202,217,222,224,225,229,],[40,-126,-125,-124,40,-76,-6,-75,-77,-74,-16,-15,-121,-109,-5,-120,-78,-4,-3,-117,-118,-119,-123,-114,-17,-122,-116,-127,-115,-111,-102,-106,-103,-110,-108,-105,-107,-104,-132,-128,-112,40,-83,-88,-131,-80,-113,-79,-100,40,-7,-84,-81,-101,-99,-85,-89,-82,-86,-87,]),'ELIF':([165,202,225,],[188,-99,188,]),'EQ':([1,10,12,15,41,44,46,54,71,76,85,86,87,88,91,92,95,96,98,100,101,104,107,119,120,121,122,123,124,125,126,127,128,136,138,143,144,147,150,171,174,178,181,195,204,221,230,],[-126,-125,-124,80,-121,-123,-109,-120,-117,-118,-119,-123,80,-114,80,80,-122,-116,80,80,-127,-115,80,-111,-102,-106,80,-103,-110,-108,-105,-107,-104,80,-132,-128,80,-112,80,-131,80,-113,80,80,80,80,80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_stmt':([0,13,156,183,],[2,2,2,2,]),'param_type_list':([7,55,64,67,97,108,152,157,],[62,62,62,62,62,62,62,62,]),'assign_stmt':([0,13,156,183,],[4,4,4,4,]),'typedef_stmt':([0,13,156,183,],[5,5,5,5,]),'trailer':([41,],[95,]),'break':([0,13,156,183,],[8,8,8,8,]),'struct_decl_stmt':([0,13,156,183,],[9,9,9,9,]),'simple_stmt':([0,13,156,183,],[39,39,39,39,]),'define_stmt':([0,13,156,183,],[11,11,11,11,]),'stmt_list':([0,],[13,]),'struct_decl_list':([145,],[176,]),'dowhile_stmt':([0,13,156,183,],[14,14,14,14,]),'case':([191,206,],[210,218,]),'pointer':([63,105,112,115,118,140,148,180,184,],[111,111,111,111,111,111,111,111,111,]),'expr':([0,13,25,26,27,32,36,42,47,49,53,61,72,73,74,75,77,78,79,80,81,94,102,113,142,146,155,156,170,172,183,188,207,226,],[15,15,85,87,88,91,92,96,98,100,104,107,120,121,122,123,124,125,126,127,128,136,144,150,174,178,181,15,136,195,15,204,221,230,]),'pass':([0,13,156,183,],[17,17,17,17,]),'var_decl':([0,13,132,145,156,183,186,199,],[34,34,164,177,34,34,164,214,]),'stmt':([0,13,156,183,],[20,68,182,201,]),'ifndef_stmt':([0,13,156,183,],[21,21,21,21,]),'while_stmt':([0,13,156,183,],[22,22,22,22,]),'return_stmt':([0,13,156,183,],[23,23,23,23,]),'include_stmt':([0,13,156,183,],[58,58,58,58,]),'bracket_list':([63,105,115,118,140,148,180,184,],[112,112,112,112,112,112,112,112,]),'func_decl':([0,13,156,183,],[3,3,3,3,]),'small_stmt':([0,13,156,183,],[28,28,28,28,]),'power':([0,13,25,26,27,32,36,42,47,49,53,61,72,73,74,75,77,78,79,80,81,94,102,113,142,146,155,156,170,172,183,188,207,226,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'empty':([0,176,],[30,198,]),'arglist':([94,],[139,]),'switch_stmt':([0,13,156,183,],[33,33,33,33,]),'if_stmt':([0,13,156,183,],[35,35,35,35,]),'optional_comma':([176,],[200,]),'compound_stmt':([0,13,156,183,],[37,37,37,37,]),'module':([0,],[38,]),'pointer_or_array':([63,105,112,115,118,140,148,180,184,],[110,110,149,110,110,110,110,110,110,]),'argument':([94,170,],[137,194,]),'type_declaration':([7,55,64,67,97,108,152,157,],[63,105,115,118,140,148,180,184,]),'var_decl_stmt':([0,13,156,183,],[43,43,43,43,]),'switch_suite':([134,],[166,]),'default':([191,206,],[208,219,]),'switch_stmts':([191,],[209,]),'struct_decl':([0,13,156,183,],[45,45,45,45,]),'while_orelse':([173,],[196,]),'enum_name_list':([135,],[169,]),'endif_stmt':([0,13,156,183,],[60,60,60,60,]),'case_expr_list':([207,],[220,]),'array':([63,105,112,115,118,140,148,180,184,],[109,109,109,109,109,109,109,109,109,]),'stmts':([156,],[183,]),'enum_decl':([0,13,156,183,],[52,52,52,52,]),'suite':([84,133,141,158,205,213,216,223,227,],[129,165,173,185,217,224,225,228,231,]),'param_list_contents':([64,],[116,]),'case_list':([191,],[206,]),'enum_decl_stmt':([0,13,156,183,],[31,31,31,31,]),'array_contents':([49,],[99,]),'inline_func_decl':([7,55,64,67,97,108,152,157,],[66,66,66,66,66,66,66,66,]),'funcdef':([0,13,156,183,],[59,59,59,59,]),'varaglist_elem':([132,186,],[163,203,]),'parameters':([90,],[131,]),'if_orelse':([165,225,],[189,229,]),'atom':([0,13,25,26,27,32,36,42,47,49,53,61,72,73,74,75,77,78,79,80,81,94,102,113,142,146,155,156,170,172,183,188,207,226,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'varargslist':([132,],[162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',36),
  ('module -> empty','module',1,'p_empty_module','cparse.py',40),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',45),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',50),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',55),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',60),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',112),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',124),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',129),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',134),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',138),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',139),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',143),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',147),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',152),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',153),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',157),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',161),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',162),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',163),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',164),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',165),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',166),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',167),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',168),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',169),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',170),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',171),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',172),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',173),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',174),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',180),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',186),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',190),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',194),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',198),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',203),
  ('break -> BREAK','break',1,'p_break','cparse.py',207),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',212),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',216),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',220),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',224),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',230),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',234),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',238),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',239),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',244),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',248),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',253),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',259),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',263),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',268),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',273),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',278),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',282),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',289),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',293),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',297),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',301),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',305),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',309),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',315),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',331),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',332),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',336),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',340),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',344),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',348),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',353),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',357),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',362),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',367),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',371),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',377),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',378),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',379),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',380),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',381),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',389),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',394),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',398),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',402),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',408),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',412),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',416),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',420),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',424),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',429),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',433),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',437),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',441),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',445),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',449),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',453),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',457),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',461),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',465),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',469),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',474),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',478),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',482),
  ('expr -> expr PLUS expr','expr',3,'p_comparison','cparse.py',515),
  ('expr -> expr MINUS expr','expr',3,'p_comparison','cparse.py',516),
  ('expr -> expr MULT expr','expr',3,'p_comparison','cparse.py',517),
  ('expr -> expr DIV expr','expr',3,'p_comparison','cparse.py',518),
  ('expr -> expr LT expr','expr',3,'p_comparison','cparse.py',519),
  ('expr -> expr EQ expr','expr',3,'p_comparison','cparse.py',520),
  ('expr -> expr GT expr','expr',3,'p_comparison','cparse.py',521),
  ('expr -> power','expr',1,'p_comparison','cparse.py',522),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',529),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',533),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',537),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',541),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',545),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',549),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',553),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',557),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',561),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',565),
  ('expr -> NULL','expr',1,'p_null','cparse.py',573),
  ('power -> atom','power',1,'p_power_1','cparse.py',577),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',581),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',585),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',589),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',593),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',597),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',601),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',605),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',609),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',613),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',620),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',624),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','cparse.py',632),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','cparse.py',633),
  ('testlist_multi -> testlist_multi COMMA expr','testlist_multi',3,'p_testlist_multi','cparse.py',648),
  ('testlist_multi -> expr','testlist_multi',1,'p_testlist_multi','cparse.py',649),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',664),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',668),
  ('argument -> expr','argument',1,'p_argument','cparse.py',674),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',678),
]
