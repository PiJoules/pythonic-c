
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INCLUDE_LOCAL INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr MULT expr\n                | expr DIV expr\n                | expr LT expr\n                | expr EQ expr\n                | expr GT expr\n                | powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARtestlist : testlist_multi COMMA\n                    | testlist_multi testlist_multi : testlist_multi COMMA expr\n                          | exprarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'BREAK':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[5,-75,-6,-5,-15,-76,-78,-109,-74,5,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,5,-81,-84,-100,5,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'LBRACE':([30,49,76,88,89,95,103,128,156,172,],[88,88,119,88,88,88,143,88,88,88,]),'LT':([0,1,2,4,6,11,13,14,15,16,18,19,21,22,24,25,29,32,34,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,74,75,78,80,81,82,83,84,85,86,87,94,96,97,98,99,101,102,108,109,110,111,112,113,114,115,116,117,120,121,123,133,135,138,139,141,148,151,152,159,161,162,163,164,165,169,170,179,186,187,189,194,195,196,197,206,209,213,214,216,219,220,224,226,228,230,231,],[49,-75,-6,63,49,49,-5,49,49,-15,-76,49,-78,-109,-74,49,49,-124,-123,-120,-125,49,49,49,49,-77,-121,-126,-16,49,49,49,-118,49,-117,49,49,49,49,49,63,-123,-114,63,-127,63,-17,63,-119,-4,-3,49,-116,63,-115,63,-122,49,-105,-106,-108,-104,-102,63,-111,-110,-103,-107,-128,49,-112,49,63,49,-132,63,-80,63,-88,63,49,-83,-113,-131,49,49,49,-81,63,49,-84,-100,49,63,-7,49,63,-101,-99,-82,-89,63,-85,49,-86,63,-87,]),'$end':([0,1,2,3,12,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,179,189,196,197,214,216,219,224,228,231,],[-140,-75,-6,-2,0,-5,-15,-76,-78,-109,-74,-1,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,-81,-84,-79,-7,-99,-82,-89,-85,-86,-87,]),'WHILE':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,145,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[6,-75,-6,-5,-15,-76,-78,-109,-74,6,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,170,-80,-88,-83,-113,-131,6,-81,-84,-100,6,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'DEC':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,135,139,141,151,159,163,164,186,196,209,220,230,],[65,-109,-124,-123,-120,-125,-121,-126,-118,-117,65,-123,65,65,-127,65,65,65,65,65,65,65,-122,65,65,65,65,65,65,-111,65,65,65,-128,-112,65,-132,65,65,65,65,-131,65,65,65,65,65,]),'COLON':([22,32,34,38,41,51,53,54,65,67,74,75,78,81,82,85,96,98,99,101,108,109,110,111,112,114,115,116,117,120,123,139,146,163,164,166,173,175,180,188,199,207,209,220,221,230,],[-109,-124,95,-120,-125,-121,104,-126,-118,-117,118,-123,-114,-127,122,-119,-116,-115,137,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,171,-113,-131,95,-8,95,201,210,-9,222,223,-97,225,-98,]),'ENUM':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[8,-75,-6,-5,-15,-76,-78,-109,-74,8,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,8,-81,-84,-100,8,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'INCLUDE_LOCAL':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[10,-75,-6,-5,-15,-76,-78,-109,-74,10,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,10,-81,-84,-100,10,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'NEWLINE':([0,1,2,4,5,7,9,13,16,17,18,20,21,22,23,24,26,27,28,29,32,33,34,35,36,37,38,39,40,41,42,47,48,50,51,54,56,57,58,59,65,67,75,77,78,81,83,85,86,87,91,92,94,96,97,98,101,104,105,107,108,109,110,111,112,113,114,115,116,117,118,120,122,123,129,130,131,132,134,135,136,137,139,146,148,152,154,157,158,160,162,163,164,171,173,179,182,185,186,189,196,197,198,199,201,210,211,214,216,219,222,223,224,225,228,231,],[13,-75,-6,-71,-38,-24,-22,-5,-15,83,-76,-28,-78,-109,-43,-74,-36,-26,-18,87,-124,-25,-123,-31,-20,-23,-120,-29,-39,-125,-51,-77,-19,-37,-121,-126,-30,-16,-27,-21,-118,-117,-123,-70,-114,-127,-17,-119,-4,-3,-54,-56,-34,-116,-73,-115,-122,144,-35,-69,-105,-106,-108,-104,-102,-72,-111,-110,-103,-107,144,-128,153,-112,-64,-32,-62,-65,-63,-33,-52,144,-132,-49,-80,-88,-55,-57,-66,-67,-83,-113,-131,144,-8,-81,-40,-68,-53,-84,-79,-7,-50,-9,144,144,-44,-99,-82,-89,144,144,-85,144,-86,-87,]),'LBRACKET':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,91,92,93,94,96,98,100,101,102,108,109,110,111,112,114,115,116,117,120,121,123,124,126,129,131,132,133,134,136,138,139,148,152,154,157,158,160,161,162,163,164,165,169,170,179,184,185,187,189,194,195,196,197,198,206,213,214,216,219,224,226,228,231,],[14,-75,-6,14,14,-5,14,14,-15,-76,14,-78,-109,-74,14,14,-124,-120,-125,14,14,14,14,-77,-121,-126,-16,14,14,14,-118,14,-117,14,14,14,14,14,-123,-114,-127,-17,-119,-4,-3,-54,-56,133,14,-116,-115,133,-122,14,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,14,-112,133,133,-64,133,-65,14,-63,133,14,-132,-80,-88,-55,-57,-66,-67,14,-83,-113,-131,14,14,14,-81,133,-68,14,-84,-100,14,-79,-7,133,14,-101,-99,-82,-89,-85,14,-86,-87,]),'SWITCH':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[15,-75,-6,-5,-15,-76,-78,-109,-74,15,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,15,-81,-84,-100,15,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'ELIF':([162,214,228,],[187,-99,187,]),'DIV':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,135,139,141,151,159,163,164,186,196,209,220,230,],[62,-109,-124,-123,-120,-125,-121,-126,-118,-117,62,-123,-114,62,-127,62,62,-119,62,62,62,62,-122,-105,62,62,-104,62,62,-111,62,62,62,-128,-112,62,-132,62,62,62,62,-131,62,62,62,62,62,]),'CASE':([183,203,204,214,217,229,],[206,206,-94,-99,-95,-96,]),'GT':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,91,92,96,97,98,99,100,101,108,109,110,111,112,113,114,115,116,117,120,123,129,131,132,134,135,139,141,151,154,157,158,159,160,163,164,185,186,196,209,220,230,],[64,-109,-124,-123,-120,-125,-121,-126,-118,-117,64,-123,-114,64,-127,64,64,-119,-54,-56,-116,64,-115,64,138,-122,-105,-106,-108,-104,-102,64,-111,-110,-103,-107,-128,-112,-64,-62,-65,-63,64,-132,64,64,-55,-57,-66,64,-67,-113,-131,-68,64,64,64,64,64,]),'LPAR':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,30,32,34,38,41,43,44,45,46,47,49,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,88,89,94,95,96,98,101,102,106,108,109,110,111,112,114,115,116,117,120,121,123,128,133,138,139,148,152,156,161,162,163,164,165,169,170,172,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[19,-75,-6,19,19,-5,19,19,-15,-76,19,-78,-109,-74,19,19,89,-124,-123,-120,-125,19,19,19,19,-77,89,102,-126,-16,19,19,19,-118,19,-117,19,19,19,19,19,-123,-114,-127,-17,-119,-4,-3,89,89,19,89,-116,-115,-122,19,147,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,19,-112,89,19,19,-132,-80,-88,89,19,-83,-113,-131,19,19,19,89,-81,19,-84,-100,19,-79,-7,19,-101,-99,-82,-89,-85,19,-86,-87,]),'RBRACKET':([14,22,32,38,41,51,54,65,67,75,78,79,80,81,85,96,98,101,108,109,110,111,112,114,115,116,117,120,123,133,139,151,159,163,164,],[81,-109,-124,-120,-125,-121,-126,-118,-117,-123,-114,120,-129,-127,-119,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,160,-132,-130,185,-113,-131,]),'MULT':([0,1,2,4,6,11,13,14,15,16,18,19,21,22,24,25,29,32,34,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,74,75,78,80,81,82,83,84,85,86,87,94,96,97,98,99,101,102,108,109,110,111,112,113,114,115,116,117,120,121,123,133,135,138,139,141,148,151,152,159,161,162,163,164,165,169,170,179,186,187,189,194,195,196,197,206,209,213,214,216,219,220,224,226,228,230,231,],[11,-75,-6,66,11,11,-5,11,11,-15,-76,11,-78,-109,-74,11,11,-124,-123,-120,-125,11,11,11,11,-77,-121,-126,-16,11,11,11,-118,11,-117,11,11,11,11,11,66,-123,-114,66,-127,66,-17,66,-119,-4,-3,11,66,66,66,66,-122,11,-105,66,66,-104,66,66,-111,66,66,66,-128,11,-112,11,66,11,-132,66,-80,66,-88,66,11,-83,66,-131,11,11,11,-81,66,11,-84,-100,11,66,-7,11,66,-101,-99,-82,-89,66,-85,11,-86,66,-87,]),'TYPEDEF':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[30,-75,-6,-5,-15,-76,-78,-109,-74,30,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,30,-81,-84,-100,30,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'STRUCT':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[52,-75,-6,-5,-15,-76,-78,-109,-74,52,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,52,-81,-84,-100,52,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'ENDIF':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[26,-75,-6,-5,-15,-76,-78,-109,-74,26,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,26,-81,-84,-100,26,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'ASSIGN':([4,22,32,34,38,41,51,54,65,67,75,78,81,85,91,92,96,98,101,108,109,110,111,112,114,115,116,117,120,123,129,131,132,134,136,139,154,157,158,160,163,164,185,],[69,-109,-124,-123,-120,-125,-121,-126,-118,-117,-123,-114,-127,-119,-54,-56,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-64,-62,-65,-63,161,-132,-55,-57,-66,-67,-113,-131,-68,]),'ARROW':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,90,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,125,135,139,141,146,151,155,159,163,164,173,186,196,199,209,220,230,],[70,-109,-124,-123,-120,-125,-121,-126,-118,-117,70,-123,70,70,-127,70,70,70,128,70,70,70,70,-122,70,70,70,70,70,70,-111,70,70,70,-128,-112,-58,70,-132,70,172,70,-59,70,70,-131,-8,70,70,-9,70,70,70,]),'RBRACE':([22,32,38,41,51,54,65,67,75,78,81,85,91,92,96,98,101,108,109,110,111,112,114,115,116,117,120,123,124,129,131,132,134,136,139,149,150,154,157,158,160,163,164,167,168,185,186,191,192,193,202,212,],[-109,-124,-120,-125,-121,-126,-118,-117,-123,-114,-127,-119,-54,-56,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,154,-64,-62,-65,-63,-52,-132,-41,182,-55,-57,-66,-67,-113,-131,-140,-48,-68,-53,211,-46,-45,-42,-47,]),'RPAR':([22,32,38,41,51,54,65,67,75,78,81,84,85,89,91,92,96,98,101,102,108,109,110,111,112,114,115,116,117,120,123,126,127,129,131,132,134,136,139,140,141,142,147,154,157,158,160,163,164,174,175,176,177,178,184,185,186,190,215,],[-109,-124,-120,-125,-121,-126,-118,-117,-123,-114,-127,123,-119,125,-54,-56,-116,-115,-122,139,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-60,155,-64,-62,-65,-63,-52,-132,164,-139,-138,173,-55,-57,-66,-67,-113,-131,199,-11,-10,-12,-13,-61,-68,-53,-137,-14,]),'DEFINE':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[31,-75,-6,-5,-15,-76,-78,-109,-74,31,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,31,-81,-84,-100,31,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'EQ':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,135,139,141,151,159,163,164,186,196,209,220,230,],[73,-109,-124,-123,-120,-125,-121,-126,-118,-117,73,-123,-114,73,-127,73,73,-119,-116,73,-115,73,-122,-105,-106,-108,-104,-102,73,-111,-110,-103,-107,-128,-112,73,-132,73,73,73,-113,-131,73,73,73,73,73,]),'INT':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,94,96,98,101,102,108,109,110,111,112,114,115,116,117,120,121,123,133,138,139,148,152,161,162,163,164,165,169,170,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[32,-75,-6,32,32,-5,32,32,-15,-76,32,-78,-109,-74,32,32,-124,-120,-125,32,32,32,32,-77,-121,-126,-16,32,32,32,-118,32,-117,32,32,32,32,32,-123,-114,-127,-17,-119,-4,-3,32,-116,-115,-122,32,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,32,-112,32,32,-132,-80,-88,32,-83,-113,-131,32,32,32,-81,32,-84,-100,32,-79,-7,32,-101,-99,-82,-89,-85,32,-86,-87,]),'DEDENT':([1,16,18,21,22,24,32,38,41,47,51,54,57,65,67,75,78,81,83,85,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,179,189,194,195,196,197,203,204,205,208,213,214,216,217,218,219,224,227,228,229,231,],[-75,-15,-76,-78,-109,-74,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,-81,-84,-100,214,-79,-7,-90,-94,219,-92,-101,-99,-82,-95,-91,-89,-85,-93,-86,-96,-87,]),'NAME':([0,1,2,6,8,11,13,14,15,16,18,19,21,22,24,25,29,30,31,32,38,41,43,44,45,46,47,49,51,52,54,55,57,60,62,63,64,65,66,67,68,69,70,71,72,73,75,78,81,83,85,86,87,88,89,91,92,93,94,95,96,98,101,102,108,109,110,111,112,114,115,116,117,119,120,121,123,128,129,131,132,133,134,138,139,143,147,148,152,154,156,157,158,160,161,162,163,164,165,169,170,172,179,181,185,187,189,193,194,195,196,197,200,206,213,214,216,219,224,226,228,231,],[34,-75,-6,75,76,75,-5,75,75,-15,-76,75,-78,-109,-74,75,34,91,94,-124,-120,-125,75,75,75,75,-77,91,-121,103,-126,105,-16,106,75,75,75,-118,75,-117,75,75,114,75,75,75,-123,-114,-127,-17,-119,-4,-3,91,91,-54,-56,130,75,91,-116,-115,-122,75,-105,-106,-108,-104,-102,-111,-110,-103,-107,149,-128,75,-112,91,-64,-62,-65,75,-63,75,-132,166,175,-80,-88,-55,91,-57,-66,-67,75,-83,-113,-131,75,34,75,91,-81,202,-68,75,-84,166,-100,34,-79,-7,175,75,-101,-99,-82,-89,-85,75,-86,-87,]),'INC':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,135,139,141,151,159,163,164,186,196,209,220,230,],[67,-109,-124,-123,-120,-125,-121,-126,-118,-117,67,-123,67,67,-127,67,67,67,67,67,67,67,-122,67,67,67,67,67,67,-111,67,67,67,-128,-112,67,-132,67,67,67,67,-131,67,67,67,67,67,]),'NULL':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,94,96,98,101,102,108,109,110,111,112,114,115,116,117,120,121,123,133,138,139,148,152,161,162,163,164,165,169,170,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[38,-75,-6,38,38,-5,38,38,-15,-76,38,-78,-109,-74,38,38,-124,-120,-125,38,38,38,38,-77,-121,-126,-16,38,38,38,-118,38,-117,38,38,38,38,38,-123,-114,-127,-17,-119,-4,-3,38,-116,-115,-122,38,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,38,-112,38,38,-132,-80,-88,38,-83,-113,-131,38,38,38,-81,38,-84,-100,38,-79,-7,38,-101,-99,-82,-89,-85,38,-86,-87,]),'ELSE':([148,162,183,203,204,214,217,228,229,],[180,188,207,207,-94,-99,-95,188,-96,]),'FLOAT':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,94,96,98,101,102,108,109,110,111,112,114,115,116,117,120,121,123,133,138,139,148,152,161,162,163,164,165,169,170,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[41,-75,-6,41,41,-5,41,41,-15,-76,41,-78,-109,-74,41,41,-124,-120,-125,41,41,41,41,-77,-121,-126,-16,41,41,41,-118,41,-117,41,41,41,41,41,-123,-114,-127,-17,-119,-4,-3,41,-116,-115,-122,41,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,41,-112,41,41,-132,-80,-88,41,-83,-113,-131,41,41,41,-81,41,-84,-100,41,-79,-7,41,-101,-99,-82,-89,-85,41,-86,-87,]),'MINUS':([0,1,2,4,6,11,13,14,15,16,18,19,21,22,24,25,29,32,34,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,74,75,78,80,81,82,83,84,85,86,87,94,96,97,98,99,101,102,108,109,110,111,112,113,114,115,116,117,120,121,123,133,135,138,139,141,148,151,152,159,161,162,163,164,165,169,170,179,186,187,189,194,195,196,197,206,209,213,214,216,219,220,224,226,228,230,231,],[43,-75,-6,72,43,43,-5,43,43,-15,-76,43,-78,-109,-74,43,43,-124,-123,-120,-125,43,43,43,43,-77,-121,-126,-16,43,43,43,-118,43,-117,43,43,43,43,43,72,-123,-114,72,-127,72,-17,72,-119,-4,-3,43,-116,72,-115,72,-122,43,-105,72,72,-104,-102,72,-111,72,-103,72,-128,43,-112,43,72,43,-132,72,-80,72,-88,72,43,-83,72,-131,43,43,43,-81,72,43,-84,-100,43,72,-7,43,72,-101,-99,-82,-89,72,-85,43,-86,72,-87,]),'RETURN':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[44,-75,-6,-5,-15,-76,-78,-109,-74,44,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,44,-81,-84,-100,44,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'PLUS':([0,1,2,4,6,11,13,14,15,16,18,19,21,22,24,25,29,32,34,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,74,75,78,80,81,82,83,84,85,86,87,94,96,97,98,99,101,102,108,109,110,111,112,113,114,115,116,117,120,121,123,133,135,138,139,141,148,151,152,159,161,162,163,164,165,169,170,179,186,187,189,194,195,196,197,206,209,213,214,216,219,220,224,226,228,230,231,],[45,-75,-6,68,45,45,-5,45,45,-15,-76,45,-78,-109,-74,45,45,-124,-123,-120,-125,45,45,45,45,-77,-121,-126,-16,45,45,45,-118,45,-117,45,45,45,45,45,68,-123,-114,68,-127,68,-17,68,-119,-4,-3,45,-116,68,-115,68,-122,45,-105,68,68,-104,-102,68,-111,68,-103,68,-128,45,-112,45,68,45,-132,68,-80,68,-88,68,45,-83,68,-131,45,45,45,-81,68,45,-84,-100,45,68,-7,45,68,-101,-99,-82,-89,68,-85,45,-86,68,-87,]),'IF':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[46,-75,-6,-5,-15,-76,-78,-109,-74,46,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,46,-81,-84,-100,46,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'PASS':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[50,-75,-6,-5,-15,-76,-78,-109,-74,50,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,50,-81,-84,-100,50,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'NOT':([0,1,2,6,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,94,96,98,101,102,108,109,110,111,112,114,115,116,117,120,121,123,133,138,139,148,152,161,162,163,164,165,169,170,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[25,-75,-6,25,25,-5,25,25,-15,-76,25,-78,-109,-74,25,25,-124,-120,-125,25,25,25,25,-77,-121,-126,-16,25,25,25,-118,25,-117,25,25,25,25,25,-123,-114,-127,-17,-119,-4,-3,25,-116,-115,-122,25,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,25,-112,25,25,-132,-80,-88,25,-83,-113,-131,25,25,25,-81,25,-84,-100,25,-79,-7,25,-101,-99,-82,-89,-85,25,-86,-87,]),'INDENT':([144,153,],[169,183,]),'DO':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[53,-75,-6,-5,-15,-76,-78,-109,-74,53,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,53,-81,-84,-100,53,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'STRING':([0,1,2,6,10,11,13,14,15,16,18,19,21,22,24,25,29,32,38,41,43,44,45,46,47,51,54,57,61,62,63,64,65,66,67,68,69,71,72,73,75,78,81,83,85,86,87,94,96,98,101,102,108,109,110,111,112,114,115,116,117,120,121,123,133,138,139,148,152,161,162,163,164,165,169,170,179,187,189,194,195,196,197,206,213,214,216,219,224,226,228,231,],[54,-75,-6,54,77,54,-5,54,54,-15,-76,54,-78,-109,-74,54,54,-124,-120,-125,54,54,54,54,-77,-121,-126,-16,107,54,54,54,-118,54,-117,54,54,54,54,54,-123,-114,-127,-17,-119,-4,-3,54,-116,-115,-122,54,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,54,-112,54,54,-132,-80,-88,54,-83,-113,-131,54,54,54,-81,54,-84,-100,54,-79,-7,54,-101,-99,-82,-89,-85,54,-86,-87,]),'IFNDEF':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[55,-75,-6,-5,-15,-76,-78,-109,-74,55,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,55,-81,-84,-100,55,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'COMMA':([22,32,38,41,51,54,65,67,75,78,79,80,81,85,91,92,96,98,101,108,109,110,111,112,114,115,116,117,120,123,126,127,129,131,132,134,136,139,140,141,142,149,150,151,154,157,158,160,163,164,167,168,174,175,176,177,178,184,185,186,190,202,212,215,220,221,230,],[-109,-124,-120,-125,-121,-126,-118,-117,-123,-114,121,-129,-127,-119,-54,-56,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-60,156,-64,-62,-65,-63,-52,-132,165,-139,-138,-41,181,-130,-55,-57,-66,-67,-113,-131,193,-48,200,-11,-10,-12,-13,-61,-68,-53,-137,-42,-47,-14,-97,226,-98,]),'DEF':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[60,-75,-6,-5,-15,-76,-78,-109,-74,60,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,60,-81,-84,-100,60,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'INCLUDE':([0,1,2,13,16,18,21,22,24,29,32,38,41,47,51,54,57,65,67,75,78,81,83,85,86,87,96,98,101,108,109,110,111,112,114,115,116,117,120,123,139,148,152,162,163,164,169,179,189,194,195,196,197,213,214,216,219,224,228,231,],[61,-75,-6,-5,-15,-76,-78,-109,-74,61,-124,-120,-125,-77,-121,-126,-16,-118,-117,-123,-114,-127,-17,-119,-4,-3,-116,-115,-122,-105,-106,-108,-104,-102,-111,-110,-103,-107,-128,-112,-132,-80,-88,-83,-113,-131,61,-81,-84,-100,61,-79,-7,-101,-99,-82,-89,-85,-86,-87,]),'ELLIPSIS':([147,200,],[178,178,]),'NE':([4,22,32,34,38,41,51,54,65,67,74,75,78,80,81,82,84,85,96,97,98,99,101,108,109,110,111,112,113,114,115,116,117,120,123,135,139,141,151,159,163,164,186,196,209,220,230,],[71,-109,-124,-123,-120,-125,-121,-126,-118,-117,71,-123,-114,71,-127,71,71,-119,-116,71,-115,71,-122,-105,-106,-108,-104,-102,71,-111,-110,-103,-107,-128,-112,71,-132,71,71,71,-113,-131,71,71,71,71,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'case_list':([183,],[203,]),'while_stmt':([0,29,169,195,],[1,1,1,1,]),'stmt':([0,29,169,195,],[2,86,194,213,]),'empty':([0,167,],[3,192,]),'expr':([0,6,11,14,15,19,25,29,43,44,45,46,62,63,64,66,68,69,71,72,73,94,102,121,133,138,161,165,169,170,187,195,206,226,],[4,74,78,80,82,84,85,4,96,97,98,99,108,109,110,111,112,113,115,116,117,135,141,151,159,163,186,141,4,196,209,4,220,230,]),'parameters':([106,],[146,]),'enum_name_list':([119,],[150,]),'assign_stmt':([0,29,169,195,],[7,7,7,7,]),'if_orelse':([162,228,],[189,231,]),'arglist':([102,],[140,]),'endif_stmt':([0,29,169,195,],[9,9,9,9,]),'module':([0,],[12,]),'default':([183,203,],[208,218,]),'simple_stmt':([0,29,169,195,],[16,16,16,16,]),'varargslist':([147,],[174,]),'small_stmt':([0,29,169,195,],[17,17,17,17,]),'pointer_or_array':([93,100,124,126,131,136,157,184,198,],[132,132,132,132,158,132,132,132,132,]),'bracket_list':([93,100,124,126,136,157,184,198,],[131,131,131,131,131,131,131,131,]),'struct_decl_stmt':([0,29,169,195,],[20,20,20,20,]),'funcdef':([0,29,169,195,],[21,21,21,21,]),'switch_stmts':([183,],[205,]),'suite':([104,118,137,171,201,210,222,223,225,],[145,148,162,197,216,224,227,228,229,]),'power':([0,6,11,14,15,19,25,29,43,44,45,46,62,63,64,66,68,69,71,72,73,94,102,121,133,138,161,165,169,170,187,195,206,226,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'struct_decl':([0,29,169,195,],[23,23,23,23,]),'pointer':([93,100,124,126,131,136,157,184,198,],[134,134,134,134,134,134,134,134,134,]),'trailer':([51,],[101,]),'var_decl_stmt':([0,29,169,195,],[27,27,27,27,]),'struct_decl_list':([143,],[167,]),'return_stmt':([0,29,169,195,],[28,28,28,28,]),'stmt_list':([0,],[29,]),'if_stmt':([0,29,169,195,],[24,24,24,24,]),'stmts':([169,],[195,]),'func_decl':([0,29,169,195,],[33,33,33,33,]),'type_declaration':([30,49,88,89,95,128,156,172,],[93,100,124,126,136,157,184,198,]),'switch_suite':([122,],[152,]),'pass':([0,29,169,195,],[35,35,35,35,]),'param_list_contents':([89,],[127,]),'define_stmt':([0,29,169,195,],[36,36,36,36,]),'expr_stmt':([0,29,169,195,],[37,37,37,37,]),'typedef_stmt':([0,29,169,195,],[39,39,39,39,]),'case_expr_list':([206,],[221,]),'enum_decl':([0,29,169,195,],[40,40,40,40,]),'param_type_list':([30,49,88,89,95,128,156,172,],[90,90,90,90,90,90,90,90,]),'var_decl':([0,29,143,147,169,193,195,200,],[42,42,168,177,42,212,42,177,]),'argument':([102,165,],[142,190,]),'array':([93,100,124,126,131,136,157,184,198,],[129,129,129,129,129,129,129,129,129,]),'switch_stmt':([0,29,169,195,],[47,47,47,47,]),'include_stmt':([0,29,169,195,],[48,48,48,48,]),'while_orelse':([148,],[179,]),'atom':([0,6,11,14,15,19,25,29,43,44,45,46,62,63,64,66,68,69,71,72,73,94,102,121,133,138,161,165,169,170,187,195,206,226,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'dowhile_stmt':([0,29,169,195,],[18,18,18,18,]),'optional_comma':([167,],[191,]),'varaglist_elem':([147,200,],[176,215,]),'break':([0,29,169,195,],[56,56,56,56,]),'array_contents':([14,],[79,]),'compound_stmt':([0,29,169,195,],[57,57,57,57,]),'enum_decl_stmt':([0,29,169,195,],[58,58,58,58,]),'ifndef_stmt':([0,29,169,195,],[59,59,59,59,]),'inline_func_decl':([30,49,88,89,95,128,156,172,],[92,92,92,92,92,92,92,92,]),'case':([183,203,],[204,217,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',36),
  ('module -> empty','module',1,'p_empty_module','cparse.py',40),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',45),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',50),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',55),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',60),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',112),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',124),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',129),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',134),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',138),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',139),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',143),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',147),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',152),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',153),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',157),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',161),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',162),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',163),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',164),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',165),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',166),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',167),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',168),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',169),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',170),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',171),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',172),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',173),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',174),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',180),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',186),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',190),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',194),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',198),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',203),
  ('break -> BREAK','break',1,'p_break','cparse.py',207),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',212),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',216),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',220),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',224),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',230),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',234),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',238),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',239),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',244),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',248),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',253),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',259),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',263),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',268),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',273),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',278),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',282),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',289),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',293),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',297),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',301),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',305),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',309),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',315),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',331),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',332),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',336),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',340),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',344),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',348),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',353),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',357),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',362),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',367),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',371),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',377),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',378),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',379),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',380),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',381),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',389),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',394),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',398),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',402),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',408),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',412),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',416),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',420),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',424),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',429),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',433),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',437),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',441),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',445),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',449),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',453),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',457),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',461),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',465),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',469),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',474),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',478),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',482),
  ('expr -> expr PLUS expr','expr',3,'p_comparison','cparse.py',515),
  ('expr -> expr MINUS expr','expr',3,'p_comparison','cparse.py',516),
  ('expr -> expr MULT expr','expr',3,'p_comparison','cparse.py',517),
  ('expr -> expr DIV expr','expr',3,'p_comparison','cparse.py',518),
  ('expr -> expr LT expr','expr',3,'p_comparison','cparse.py',519),
  ('expr -> expr EQ expr','expr',3,'p_comparison','cparse.py',520),
  ('expr -> expr GT expr','expr',3,'p_comparison','cparse.py',521),
  ('expr -> power','expr',1,'p_comparison','cparse.py',522),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',529),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',533),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',537),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',541),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',545),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',549),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',553),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',557),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',561),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',565),
  ('expr -> NULL','expr',1,'p_null','cparse.py',573),
  ('power -> atom','power',1,'p_power_1','cparse.py',577),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',581),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',585),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',589),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',593),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',597),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',601),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',605),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',609),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',613),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',620),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',624),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','cparse.py',632),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','cparse.py',633),
  ('testlist_multi -> testlist_multi COMMA expr','testlist_multi',3,'p_testlist_multi','cparse.py',648),
  ('testlist_multi -> expr','testlist_multi',1,'p_testlist_multi','cparse.py',649),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',668),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',672),
  ('argument -> expr','argument',1,'p_argument','cparse.py',676),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',680),
]
