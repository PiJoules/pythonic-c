
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQGTLTleftPLUSMINUSleftMULTDIVDEF IF NAME NUMBER STRING LPAR RPAR COLON EQ ASSIGN LT GT PLUS MINUS MULT DIV RETURN WS NEWLINE COMMA INDENT DEDENTmodule : stmt_liststmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPAR\n                  | LPAR varargslist RPARvarargslist : varargslist COMMA NAME\n                   | NAMEstmt : simple_stmtstmt : compound_stmtsimple_stmt : small_stmts NEWLINEsmall_stmts : small_stmtsmall_stmt : flow_stmt\n                  | expr_stmtexpr_stmt : testlist ASSIGN testlist\n                 | testlist flow_stmt : return_stmtreturn_stmt : RETURN testlistcompound_stmt : if_stmt\n                     | funcdefif_stmt : IF test COLON suitesuite : simple_stmt\n             | NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtcomparison : comparison PLUS comparison\n                  | comparison MINUS comparison\n                  | comparison MULT comparison\n                  | comparison DIV comparison\n                  | comparison LT comparison\n                  | comparison EQ comparison\n                  | comparison GT comparison\n                  | PLUS comparison\n                  | MINUS comparison\n                  | powerpower : atom\n             | atom traileratom : NAMEatom : NUMBER\n            | STRINGatom : LPAR testlist RPARtrailer : LPAR arglist RPARtestlist : testlist_multi COMMA\n                | testlist_multi testlist_multi : testlist_multi COMMA test\n                      | testtest : comparisonarglist : arglist COMMA argument\n               | argumentargument : test'
    
_lr_action_items = {'INDENT':([72,],[78,]),'NAME':([0,1,6,8,11,13,15,16,18,19,20,21,25,27,29,30,36,38,40,41,42,43,44,45,46,47,48,50,57,68,69,71,73,74,76,78,80,81,82,83,],[12,-11,-21,-5,12,32,-4,12,12,-12,-22,12,12,12,-13,12,12,12,-3,-2,12,12,12,12,12,12,12,65,12,12,12,-24,-23,79,-6,12,-26,12,-27,-25,]),'GT':([12,14,22,24,26,28,33,34,37,52,58,59,60,61,62,63,64,70,],[-40,-41,-38,-42,-37,44,-36,-35,-39,-43,-30,-29,-34,-28,-33,-32,-31,-44,]),'EQ':([12,14,22,24,26,28,33,34,37,52,58,59,60,61,62,63,64,70,],[-40,-41,-38,-42,-37,46,-36,-35,-39,-43,-30,-29,-34,-28,-33,-32,-31,-44,]),'MULT':([12,14,22,24,26,28,33,34,37,52,58,59,60,61,62,63,64,70,],[-40,-41,-38,-42,-37,42,42,42,-39,-43,-30,42,42,42,42,42,-31,-44,]),'ASSIGN':([2,7,12,14,22,23,24,26,28,33,34,37,38,52,56,58,59,60,61,62,63,64,70,],[-48,30,-40,-41,-38,-46,-42,-37,-49,-36,-35,-39,-45,-43,-47,-30,-29,-34,-28,-33,-32,-31,-44,]),'RPAR':([2,12,14,22,23,24,26,28,33,34,35,37,38,50,52,53,54,55,56,58,59,60,61,62,63,64,65,67,70,77,79,],[-48,-40,-41,-38,-46,-42,-37,-49,-36,-35,52,-39,-45,66,-43,-52,70,-51,-47,-30,-29,-34,-28,-33,-32,-31,-10,75,-44,-50,-9,]),'COMMA':([2,12,14,22,23,24,26,28,33,34,37,52,53,54,55,56,58,59,60,61,62,63,64,65,67,70,77,79,],[-48,-40,-41,-38,38,-42,-37,-49,-36,-35,-39,-43,-52,69,-51,-47,-30,-29,-34,-28,-33,-32,-31,-10,74,-44,-50,-9,]),'DIV':([12,14,22,24,26,28,33,34,37,52,58,59,60,61,62,63,64,70,],[-40,-41,-38,-42,-37,48,48,48,-39,-43,-30,48,48,48,48,48,-31,-44,]),'COLON':([12,14,22,24,26,28,33,34,37,39,51,52,58,59,60,61,62,63,64,66,70,75,],[-40,-41,-38,-42,-37,-49,-36,-35,-39,57,68,-43,-30,-29,-34,-28,-33,-32,-31,-7,-44,-8,]),'LT':([12,14,22,24,26,28,33,34,37,52,58,59,60,61,62,63,64,70,],[-40,-41,-38,-42,-37,47,-36,-35,-39,-43,-30,-29,-34,-28,-33,-32,-31,-44,]),'NEWLINE':([0,1,2,3,4,5,6,7,8,9,10,12,14,15,19,20,22,23,24,26,27,28,29,31,33,34,37,38,40,41,49,52,56,57,58,59,60,61,62,63,64,68,70,71,73,76,83,],[15,-11,-48,-14,29,-19,-21,-18,-5,-15,-16,-40,-41,-4,-12,-22,-38,-46,-42,-37,41,-49,-13,-20,-36,-35,-39,-45,-3,-2,-17,-43,-47,72,-30,-29,-34,-28,-33,-32,-31,72,-44,-24,-23,-6,-25,]),'DEF':([0,1,6,8,15,19,20,27,29,40,41,71,73,76,78,80,81,82,83,],[13,-11,-21,-5,-4,-12,-22,13,-13,-3,-2,-24,-23,-6,13,-26,13,-27,-25,]),'MINUS':([0,1,6,8,11,12,14,15,16,18,19,20,21,22,24,25,26,27,28,29,30,33,34,36,37,38,40,41,42,43,44,45,46,47,48,52,57,58,59,60,61,62,63,64,68,69,70,71,73,76,78,80,81,82,83,],[16,-11,-21,-5,16,-40,-41,-4,16,16,-12,-22,16,-38,-42,16,-37,16,43,-13,16,-36,-35,16,-39,16,-3,-2,16,16,16,16,16,16,16,-43,16,-30,-29,43,-28,43,43,-31,16,16,-44,-24,-23,-6,16,-26,16,-27,-25,]),'$end':([1,6,8,15,17,19,20,27,29,40,41,71,73,76,83,],[-11,-21,-5,-4,0,-12,-22,-1,-13,-3,-2,-24,-23,-6,-25,]),'RETURN':([0,1,6,8,15,19,20,27,29,40,41,57,68,71,73,76,78,80,81,82,83,],[11,-11,-21,-5,-4,-12,-22,11,-13,-3,-2,11,11,-24,-23,-6,11,-26,11,-27,-25,]),'PLUS':([0,1,6,8,11,12,14,15,16,18,19,20,21,22,24,25,26,27,28,29,30,33,34,36,37,38,40,41,42,43,44,45,46,47,48,52,57,58,59,60,61,62,63,64,68,69,70,71,73,76,78,80,81,82,83,],[18,-11,-21,-5,18,-40,-41,-4,18,18,-12,-22,18,-38,-42,18,-37,18,45,-13,18,-36,-35,18,-39,18,-3,-2,18,18,18,18,18,18,18,-43,18,-30,-29,45,-28,45,45,-31,18,18,-44,-24,-23,-6,18,-26,18,-27,-25,]),'NUMBER':([0,1,6,8,11,15,16,18,19,20,21,25,27,29,30,36,38,40,41,42,43,44,45,46,47,48,57,68,69,71,73,76,78,80,81,82,83,],[14,-11,-21,-5,14,-4,14,14,-12,-22,14,14,14,-13,14,14,14,-3,-2,14,14,14,14,14,14,14,14,14,14,-24,-23,-6,14,-26,14,-27,-25,]),'LPAR':([0,1,6,8,11,12,14,15,16,18,19,20,21,22,24,25,27,29,30,32,36,38,40,41,42,43,44,45,46,47,48,52,57,68,69,71,73,76,78,80,81,82,83,],[21,-11,-21,-5,21,-40,-41,-4,21,21,-12,-22,21,36,-42,21,21,-13,21,50,21,21,-3,-2,21,21,21,21,21,21,21,-43,21,21,21,-24,-23,-6,21,-26,21,-27,-25,]),'IF':([0,1,6,8,15,19,20,27,29,40,41,71,73,76,78,80,81,82,83,],[25,-11,-21,-5,-4,-12,-22,25,-13,-3,-2,-24,-23,-6,25,-26,25,-27,-25,]),'DEDENT':([1,6,19,20,29,71,73,76,80,81,82,83,],[-11,-21,-12,-22,-13,-24,-23,-6,-26,83,-27,-25,]),'STRING':([0,1,6,8,11,15,16,18,19,20,21,25,27,29,30,36,38,40,41,42,43,44,45,46,47,48,57,68,69,71,73,76,78,80,81,82,83,],[24,-11,-21,-5,24,-4,24,24,-12,-22,24,24,24,-13,24,24,24,-3,-2,24,24,24,24,24,24,24,24,24,24,-24,-23,-6,24,-26,24,-27,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'simple_stmt':([0,27,57,68,78,81,],[1,1,71,71,1,1,]),'test':([0,11,21,25,27,30,36,38,57,68,69,78,81,],[2,2,2,39,2,2,53,56,2,2,53,2,2,]),'small_stmt':([0,27,57,68,78,81,],[3,3,3,3,3,3,]),'small_stmts':([0,27,57,68,78,81,],[4,4,4,4,4,4,]),'return_stmt':([0,27,57,68,78,81,],[5,5,5,5,5,5,]),'stmt':([0,27,78,81,],[8,40,80,82,]),'testlist':([0,11,21,27,30,57,68,78,81,],[7,31,35,7,49,7,7,7,7,]),'if_stmt':([0,27,78,81,],[6,6,6,6,]),'flow_stmt':([0,27,57,68,78,81,],[9,9,9,9,9,9,]),'expr_stmt':([0,27,57,68,78,81,],[10,10,10,10,10,10,]),'power':([0,11,16,18,21,25,27,30,36,38,42,43,44,45,46,47,48,57,68,69,78,81,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'arglist':([36,],[54,]),'trailer':([22,],[37,]),'comparison':([0,11,16,18,21,25,27,30,36,38,42,43,44,45,46,47,48,57,68,69,78,81,],[28,28,33,34,28,28,28,28,28,28,58,59,60,61,62,63,64,28,28,28,28,28,]),'varargslist':([50,],[67,]),'stmts':([78,],[81,]),'module':([0,],[17,]),'parameters':([32,],[51,]),'compound_stmt':([0,27,78,81,],[19,19,19,19,]),'funcdef':([0,27,78,81,],[20,20,20,20,]),'suite':([57,68,],[73,76,]),'atom':([0,11,16,18,21,25,27,30,36,38,42,43,44,45,46,47,48,57,68,69,78,81,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'testlist_multi':([0,11,21,27,30,57,68,78,81,],[23,23,23,23,23,23,23,23,23,]),'argument':([36,69,],[55,77,]),'stmt_list':([0,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','GardenSnake.py',378),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','GardenSnake.py',383),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','GardenSnake.py',388),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','GardenSnake.py',393),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','GardenSnake.py',398),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','GardenSnake.py',405),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters','GardenSnake.py',412),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters','GardenSnake.py',413),
  ('varargslist -> varargslist COMMA NAME','varargslist',3,'p_varargslist','GardenSnake.py',423),
  ('varargslist -> NAME','varargslist',1,'p_varargslist','GardenSnake.py',424),
  ('stmt -> simple_stmt','stmt',1,'p_stmt_simple','GardenSnake.py',434),
  ('stmt -> compound_stmt','stmt',1,'p_stmt_compound','GardenSnake.py',440),
  ('simple_stmt -> small_stmts NEWLINE','simple_stmt',2,'p_simple_stmt','GardenSnake.py',447),
  ('small_stmts -> small_stmt','small_stmts',1,'p_small_stmts','GardenSnake.py',452),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','GardenSnake.py',460),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','GardenSnake.py',461),
  ('expr_stmt -> testlist ASSIGN testlist','expr_stmt',3,'p_expr_stmt','GardenSnake.py',471),
  ('expr_stmt -> testlist','expr_stmt',1,'p_expr_stmt','GardenSnake.py',472),
  ('flow_stmt -> return_stmt','flow_stmt',1,'p_flow_stmt','GardenSnake.py',481),
  ('return_stmt -> RETURN testlist','return_stmt',2,'p_return_stmt','GardenSnake.py',488),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','GardenSnake.py',493),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','GardenSnake.py',494),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','GardenSnake.py',499),
  ('suite -> simple_stmt','suite',1,'p_suite','GardenSnake.py',504),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','GardenSnake.py',505),
  ('stmts -> stmt','stmts',1,'p_stmts_1','GardenSnake.py',513),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','GardenSnake.py',518),
  ('comparison -> comparison PLUS comparison','comparison',3,'p_comparison','GardenSnake.py',579),
  ('comparison -> comparison MINUS comparison','comparison',3,'p_comparison','GardenSnake.py',580),
  ('comparison -> comparison MULT comparison','comparison',3,'p_comparison','GardenSnake.py',581),
  ('comparison -> comparison DIV comparison','comparison',3,'p_comparison','GardenSnake.py',582),
  ('comparison -> comparison LT comparison','comparison',3,'p_comparison','GardenSnake.py',583),
  ('comparison -> comparison EQ comparison','comparison',3,'p_comparison','GardenSnake.py',584),
  ('comparison -> comparison GT comparison','comparison',3,'p_comparison','GardenSnake.py',585),
  ('comparison -> PLUS comparison','comparison',2,'p_comparison','GardenSnake.py',586),
  ('comparison -> MINUS comparison','comparison',2,'p_comparison','GardenSnake.py',587),
  ('comparison -> power','comparison',1,'p_comparison','GardenSnake.py',588),
  ('power -> atom','power',1,'p_power','GardenSnake.py',602),
  ('power -> atom trailer','power',2,'p_power','GardenSnake.py',603),
  ('atom -> NAME','atom',1,'p_atom_name','GardenSnake.py',614),
  ('atom -> NUMBER','atom',1,'p_atom_number','GardenSnake.py',619),
  ('atom -> STRING','atom',1,'p_atom_number','GardenSnake.py',620),
  ('atom -> LPAR testlist RPAR','atom',3,'p_atom_tuple','GardenSnake.py',625),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','GardenSnake.py',632),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','GardenSnake.py',640),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','GardenSnake.py',641),
  ('testlist_multi -> testlist_multi COMMA test','testlist_multi',3,'p_testlist_multi','GardenSnake.py',656),
  ('testlist_multi -> test','testlist_multi',1,'p_testlist_multi','GardenSnake.py',657),
  ('test -> comparison','test',1,'p_test','GardenSnake.py',672),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','GardenSnake.py',679),
  ('arglist -> argument','arglist',1,'p_arglist','GardenSnake.py',680),
  ('argument -> test','argument',1,'p_argument','GardenSnake.py',690),
]
