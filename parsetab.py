
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE CHAR COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom LPAR RPARpower : atom LPAR arglist RPARexpr : expr LBRACKET expr RBRACKETatom : NAMEexpr : INTexpr : FLOATexpr : STRINGexpr : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'NAME':([0,2,4,5,6,7,10,11,12,13,18,20,21,22,23,29,31,32,33,34,35,36,37,38,42,43,45,46,49,54,56,57,58,60,61,62,63,64,66,69,70,71,77,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,110,111,112,113,114,115,116,122,123,124,125,126,130,131,132,134,135,136,138,139,140,142,145,148,149,150,151,152,154,155,156,157,159,167,168,169,170,178,179,181,182,183,184,187,191,192,195,197,199,201,202,203,208,217,223,224,227,229,232,],[1,63,66,63,-5,-128,73,74,-15,-77,-6,75,63,-127,63,-73,-16,63,81,63,63,-76,-75,-125,-119,66,-126,63,63,1,-74,-120,105,-108,63,66,-124,-113,-54,66,-56,66,-129,-118,63,-115,-17,129,-116,63,63,63,63,134,-117,63,63,63,63,63,63,-114,-3,-4,63,66,-65,-63,-64,63,63,-62,161,163,-130,63,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,173,63,63,1,-57,-112,-67,-66,-55,66,-87,-79,-123,-122,63,66,-82,-78,-99,1,-68,210,163,-80,173,-7,-83,63,-98,-100,63,-88,-81,-84,63,-85,-86,]),'MULT':([0,1,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,44,45,46,49,54,56,57,60,61,63,64,72,77,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,106,114,115,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,148,149,150,152,153,159,166,167,168,169,170,179,180,181,182,183,192,197,199,201,202,203,208,216,217,220,223,224,227,229,230,232,],[2,-124,2,2,-5,-128,-15,-77,-6,2,-127,2,-73,-16,2,2,2,-76,-75,-125,-119,88,-126,2,2,2,-74,-120,-108,2,-124,-113,88,-129,88,88,-118,2,88,88,-17,-116,2,2,2,2,-117,2,2,2,2,2,2,88,88,-3,-4,2,88,2,2,-130,2,-111,88,88,-103,-104,88,-110,88,88,88,88,88,88,-121,88,2,2,2,88,88,-87,88,-79,-123,-122,2,-82,88,88,-99,2,-80,-7,-83,2,-98,-100,2,88,-88,88,-81,-84,2,-85,88,-86,]),'DO':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[3,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,3,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,3,-112,-87,-79,-123,-122,-82,-78,-99,3,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'SWITCH':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[5,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,5,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,5,-112,-87,-79,-123,-122,-82,-78,-99,5,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'NEWLINE':([0,1,6,7,8,9,12,13,14,15,16,17,18,22,24,25,27,28,29,30,31,36,37,38,39,40,41,42,44,45,47,48,50,51,53,54,55,56,57,59,60,63,64,65,66,70,75,77,80,81,82,84,86,92,99,100,101,102,103,107,111,112,113,116,121,124,126,127,128,129,130,131,132,134,135,136,137,138,139,140,142,146,147,151,152,154,155,156,159,167,168,169,172,177,179,180,181,184,188,192,196,197,198,199,202,211,213,215,217,218,223,224,225,228,229,232,],[6,-124,-5,-128,-51,-19,-15,-77,-20,-21,-27,-24,-6,-127,-36,-43,-29,-26,-73,-30,-16,-76,-75,-125,-39,-37,84,-119,-70,-126,-28,-25,-18,-23,-38,102,-22,-74,-120,-31,-108,-124,-113,109,-54,-56,-35,-129,-118,-34,-115,-17,-116,-117,-114,-72,-69,-3,-4,-52,-65,-63,-64,-62,160,-130,-111,-33,109,-32,-107,-103,-104,-110,-102,-106,-71,-101,-109,-105,-121,-49,109,-57,-112,-67,-66,-55,-87,-79,-123,-122,-8,109,-82,-53,-78,-68,-40,-80,-9,-7,-50,-83,-98,-44,109,109,-88,109,-81,-84,109,109,-85,-86,]),'CHAR':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[7,7,7,-5,-128,-15,-77,-6,7,-127,7,-73,-16,7,7,7,-76,-75,-125,-119,-126,7,7,7,-74,-120,-108,7,-124,-113,-129,-118,7,-115,-17,-116,7,7,7,7,-117,7,7,7,7,7,7,-114,-3,-4,7,7,7,-130,7,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,7,7,7,-112,-87,-79,-123,-122,7,-82,-78,-99,7,-80,-7,-83,7,-98,-100,7,-88,-81,-84,7,-85,-86,]),'ENUM':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[10,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,10,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,10,-112,-87,-79,-123,-122,-82,-78,-99,10,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'RPAR':([7,22,38,42,45,57,60,63,64,66,70,71,77,79,80,82,86,92,99,104,107,111,112,113,116,119,120,124,126,130,131,132,134,135,136,138,139,140,141,142,143,144,145,151,152,154,155,156,168,169,171,173,174,175,176,180,184,185,194,214,],[-128,-127,-125,-119,-126,-120,-108,-124,-113,-54,-56,118,-129,126,-118,-115,-116,-117,-114,142,-52,-65,-63,-64,-62,-60,158,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-134,-121,-135,169,172,-57,-112,-67,-66,-55,-123,-122,196,-11,-10,-13,-12,-53,-68,-61,-133,-14,]),'LBRACE':([4,43,62,69,71,73,74,110,157,178,],[69,69,69,69,69,122,123,69,69,69,]),'LPAR':([0,1,2,4,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,43,45,46,49,54,56,57,60,61,62,63,64,69,71,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,105,110,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,157,159,167,168,169,170,178,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[23,-124,23,71,23,-5,-128,-15,-77,-6,23,-127,23,-73,-16,23,23,23,-76,-75,-125,-119,71,-126,23,23,23,-74,104,-108,23,71,-124,-113,71,71,-129,-118,23,-115,-17,-116,23,23,23,23,-117,23,23,23,23,23,23,-114,-3,-4,23,145,71,23,23,-130,23,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,23,23,23,-112,71,-87,-79,-123,-122,23,71,-82,-78,-99,23,-80,-7,-83,23,-98,-100,23,-88,-81,-84,23,-85,-86,]),'COMMA':([7,22,38,42,45,57,60,63,64,66,70,76,77,78,80,82,86,92,99,107,111,112,113,116,119,120,124,126,130,131,132,134,135,136,138,139,140,141,142,143,144,151,152,154,155,156,161,162,164,165,166,168,169,171,173,174,175,176,180,184,185,194,210,212,214,219,220,230,],[-128,-127,-125,-119,-126,-120,-108,-124,-113,-54,-56,125,-129,-131,-118,-115,-116,-117,-114,-52,-65,-63,-64,-62,-60,157,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-134,-121,-135,170,-57,-112,-67,-66,-55,-41,187,191,-48,-132,-123,-122,195,-11,-10,-13,-12,-53,-68,-61,-133,-42,-47,-14,227,-96,-97,]),'DEDENT':([7,12,13,22,29,31,36,37,38,42,45,56,57,60,63,64,77,80,82,84,86,92,99,124,126,130,131,132,134,135,136,138,139,140,142,152,159,167,168,169,179,181,182,183,192,197,199,202,203,204,205,206,209,217,221,222,223,224,226,229,231,232,],[-128,-15,-77,-127,-73,-16,-76,-75,-125,-119,-126,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,-112,-87,-79,-123,-122,-82,-78,-99,202,-80,-7,-83,-98,-100,-91,-93,217,-89,-88,-90,-94,-81,-84,-92,-85,-95,-86,]),'INC':([1,7,22,38,42,44,45,57,60,63,64,72,77,78,79,80,82,83,86,92,99,100,106,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,152,153,166,168,169,180,181,216,220,230,],[-124,-128,-127,-125,-119,86,-126,-120,-108,-124,86,86,-129,86,86,86,86,86,-116,-117,86,86,86,-130,-111,86,86,86,86,86,-110,86,86,86,86,86,86,-121,86,86,86,86,-123,-122,86,86,86,86,86,]),'ELSE':([167,179,186,202,205,209,222,229,231,],[193,200,207,-98,-93,207,-94,200,-95,]),'NE':([1,7,22,38,42,44,45,57,60,63,64,72,77,78,79,80,82,83,86,92,99,100,106,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,152,153,166,168,169,180,181,216,220,230,],[-124,-128,-127,-125,-119,97,-126,-120,-108,-124,-113,97,-129,97,97,-118,-115,97,-116,-117,-114,97,97,-130,-111,97,-107,-103,-104,97,-110,-102,-106,97,-101,-109,-105,-121,97,-112,97,97,-123,-122,97,97,97,97,97,]),'IFNDEF':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[20,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,20,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,20,-112,-87,-79,-123,-122,-82,-78,-99,20,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'LBRACKET':([0,1,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,44,45,46,49,54,56,57,60,61,63,64,66,68,70,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,106,107,111,112,113,114,115,116,117,119,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,148,149,150,151,152,153,154,155,156,159,166,167,168,169,170,179,180,181,182,183,184,185,192,197,198,199,201,202,203,208,216,217,220,223,224,227,229,230,232,],[21,-124,21,21,-5,-128,-15,-77,-6,21,-127,21,-73,-16,21,21,21,-76,-75,-125,-119,90,-126,21,21,21,-74,-120,-108,21,-124,-113,-54,115,-56,90,-129,90,90,-118,21,-115,90,-17,115,-116,21,21,21,21,-117,21,21,21,21,21,21,-114,90,-3,-4,21,90,115,-65,-63,-64,21,21,115,115,115,-130,21,-111,90,-107,-103,-104,90,-110,-102,-106,90,-101,-109,-105,-121,90,21,21,21,-57,-112,90,-67,-66,-55,-87,90,-79,-123,-122,21,-82,90,90,-99,21,-68,115,-80,-7,115,-83,21,-98,-100,21,90,-88,90,-81,-84,21,-85,90,-86,]),'RBRACE':([7,22,38,42,45,57,60,63,64,66,70,77,80,82,86,92,99,107,111,112,113,116,117,124,126,130,131,132,134,135,136,138,139,140,142,151,152,154,155,156,161,162,164,165,168,169,180,184,189,190,191,210,212,],[-128,-127,-125,-119,-126,-120,-108,-124,-113,-54,-56,-129,-118,-115,-116,-117,-114,-52,-65,-63,-64,-62,156,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,-57,-112,-67,-66,-55,-41,188,-136,-48,-123,-122,-53,-68,211,-46,-45,-42,-47,]),'DEC':([1,7,22,38,42,44,45,57,60,63,64,72,77,78,79,80,82,83,86,92,99,100,106,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,152,153,166,168,169,180,181,216,220,230,],[-124,-128,-127,-125,-119,92,-126,-120,-108,-124,92,92,-129,92,92,92,92,92,-116,-117,92,92,92,-130,-111,92,92,92,92,92,-110,92,92,92,92,92,92,-121,92,92,92,92,-123,-122,92,92,92,92,92,]),'CASE':([186,202,205,209,222,231,],[208,-98,-93,208,-94,-95,]),'ENDIF':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[24,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,24,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,24,-112,-87,-79,-123,-122,-82,-78,-99,24,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'ELLIPSIS':([145,195,],[175,175,]),'EQ':([1,7,22,38,42,44,45,57,60,63,64,72,77,78,79,80,82,83,86,92,99,100,106,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,152,153,166,168,169,180,181,216,220,230,],[-124,-128,-127,-125,-119,98,-126,-120,-108,-124,-113,98,-129,98,98,-118,-115,98,-116,-117,-114,98,98,-130,-111,98,-107,-103,-104,98,-110,-102,-106,98,-101,-109,-105,-121,98,-112,98,98,-123,-122,98,98,98,98,98,]),'NULL':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[42,42,42,-5,-128,-15,-77,-6,42,-127,42,-73,-16,42,42,42,-76,-75,-125,-119,-126,42,42,42,-74,-120,-108,42,-124,-113,-129,-118,42,-115,-17,-116,42,42,42,42,-117,42,42,42,42,42,42,-114,-3,-4,42,42,42,-130,42,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,42,42,42,-112,-87,-79,-123,-122,42,-82,-78,-99,42,-80,-7,-83,42,-98,-100,42,-88,-81,-84,42,-85,-86,]),'DEFINE':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[33,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,33,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,33,-112,-87,-79,-123,-122,-82,-78,-99,33,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'$end':([0,6,7,12,13,18,19,22,26,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,152,159,167,168,169,179,181,192,197,199,202,217,223,224,229,232,],[-136,-5,-128,-15,-77,-6,-2,-127,0,-73,-16,-76,-75,-125,-119,-126,-1,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,-112,-87,-79,-123,-122,-82,-78,-80,-7,-83,-98,-88,-81,-84,-85,-86,]),'MINUS':([0,1,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,44,45,46,49,54,56,57,60,61,63,64,72,77,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,106,114,115,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,148,149,150,152,153,159,166,167,168,169,170,179,180,181,182,183,192,197,199,201,202,203,208,216,217,220,223,224,227,229,230,232,],[34,-124,34,34,-5,-128,-15,-77,-6,34,-127,34,-73,-16,34,34,34,-76,-75,-125,-119,93,-126,34,34,34,-74,-120,-108,34,-124,-113,93,-129,93,93,-118,34,-115,93,-17,-116,34,34,34,34,-117,34,34,34,34,34,34,-114,93,-3,-4,34,93,34,34,-130,34,-111,93,93,-103,-104,93,-110,-102,93,93,-101,93,93,-121,93,34,34,34,93,93,-87,93,-79,-123,-122,34,-82,93,93,-99,34,-80,-7,-83,34,-98,-100,34,93,-88,93,-81,-84,34,-85,93,-86,]),'WHILE':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,108,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[35,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,35,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,149,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,35,-112,-87,-79,-123,-122,-82,-78,-99,35,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'NOT':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[32,32,32,-5,-128,-15,-77,-6,32,-127,32,-73,-16,32,32,32,-76,-75,-125,-119,-126,32,32,32,-74,-120,-108,32,-124,-113,-129,-118,32,-115,-17,-116,32,32,32,32,-117,32,32,32,32,32,32,-114,-3,-4,32,32,32,-130,32,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,32,32,32,-112,-87,-79,-123,-122,32,-82,-78,-99,32,-80,-7,-83,32,-98,-100,32,-88,-81,-84,32,-85,-86,]),'FLOAT':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[45,45,45,-5,-128,-15,-77,-6,45,-127,45,-73,-16,45,45,45,-76,-75,-125,-119,-126,45,45,45,-74,-120,-108,45,-124,-113,-129,-118,45,-115,-17,-116,45,45,45,45,-117,45,45,45,45,45,45,-114,-3,-4,45,45,45,-130,45,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,45,45,45,-112,-87,-79,-123,-122,45,-82,-78,-99,45,-80,-7,-83,45,-98,-100,45,-88,-81,-84,45,-85,-86,]),'STRING':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,52,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[22,22,22,-5,-128,-15,-77,-6,22,-127,22,-73,-16,22,22,22,-76,-75,-125,-119,-126,22,22,101,22,-74,-120,-108,22,-124,-113,-129,-118,22,-115,-17,-116,22,22,22,22,-117,22,22,22,22,22,22,-114,-3,-4,22,22,22,-130,22,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,22,22,22,-112,-87,-79,-123,-122,22,-82,-78,-99,22,-80,-7,-83,22,-98,-100,22,-88,-81,-84,22,-85,-86,]),'BREAK':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[53,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,53,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,53,-112,-87,-79,-123,-122,-82,-78,-99,53,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'GT':([1,7,22,38,42,44,45,57,60,63,64,66,68,70,72,77,78,79,80,82,83,86,92,99,100,106,111,112,113,116,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,151,152,153,154,155,156,166,168,169,180,181,184,216,220,230,],[-124,-128,-127,-125,-119,87,-126,-120,-108,-124,-113,-54,114,-56,87,-129,87,87,-118,-115,87,-116,-117,-114,87,87,-65,-63,-64,-62,-130,-111,87,-107,-103,-104,87,-110,-102,-106,87,-101,-109,-105,-121,87,-57,-112,87,-67,-66,-55,87,-123,-122,87,87,-68,87,87,87,]),'PASS':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[40,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,40,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,40,-112,-87,-79,-123,-122,-82,-78,-99,40,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'LT':([0,1,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,44,45,46,49,54,56,57,60,61,63,64,72,77,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,106,114,115,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,148,149,150,152,153,159,166,167,168,169,170,179,180,181,182,183,192,197,199,201,202,203,208,216,217,220,223,224,227,229,230,232,],[4,-124,4,4,-5,-128,-15,-77,-6,4,-127,4,-73,-16,4,4,4,-76,-75,-125,-119,94,-126,4,4,4,-74,-120,-108,4,-124,-113,94,-129,94,94,-118,4,-115,94,-17,-116,4,4,4,4,-117,4,4,4,4,4,4,-114,94,-3,-4,4,94,4,4,-130,4,-111,94,-107,-103,-104,94,-110,-102,-106,94,-101,-109,-105,-121,94,4,4,4,-112,94,-87,94,-79,-123,-122,4,-82,94,94,-99,4,-80,-7,-83,4,-98,-100,4,94,-88,94,-81,-84,4,-85,94,-86,]),'ASSIGN':([1,7,22,38,42,44,45,57,60,63,64,66,70,77,80,82,86,92,99,107,111,112,113,116,124,126,130,131,132,134,135,136,138,139,140,142,151,152,154,155,156,168,169,184,],[-124,-128,-127,-125,-119,95,-126,-120,-108,-124,-113,-54,-56,-129,-118,-115,-116,-117,-114,148,-65,-63,-64,-62,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,-57,-112,-67,-66,-55,-123,-122,-68,]),'INT':([0,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,45,46,49,54,56,57,60,61,63,64,77,80,81,82,84,86,87,88,89,90,92,93,94,95,96,97,98,99,102,103,104,114,115,124,125,126,130,131,132,134,135,136,138,139,140,142,148,149,150,152,159,167,168,169,170,179,181,182,183,192,197,199,201,202,203,208,217,223,224,227,229,232,],[38,38,38,-5,-128,-15,-77,-6,38,-127,38,-73,-16,38,38,38,-76,-75,-125,-119,-126,38,38,38,-74,-120,-108,38,-124,-113,-129,-118,38,-115,-17,-116,38,38,38,38,-117,38,38,38,38,38,38,-114,-3,-4,38,38,38,-130,38,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,38,38,38,-112,-87,-79,-123,-122,38,-82,-78,-99,38,-80,-7,-83,38,-98,-100,38,-88,-81,-84,38,-85,-86,]),'COLON':([1,3,7,22,38,42,45,57,60,63,64,72,77,80,82,83,86,92,99,106,124,126,130,131,132,134,135,136,138,139,140,142,146,152,163,168,169,172,173,193,196,200,207,216,219,220,230,],[62,65,-128,-127,-125,-119,-126,-120,-108,-124,-113,121,-129,-118,-115,128,-116,-117,-114,147,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,177,-112,62,-123,-122,-8,62,213,-9,215,218,225,228,-96,-97,]),'TYPEDEF':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[43,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,43,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,43,-112,-87,-79,-123,-122,-82,-78,-99,43,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'DEF':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[58,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,58,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,58,-112,-87,-79,-123,-122,-82,-78,-99,58,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'INCLUDE':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[52,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,52,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,52,-112,-87,-79,-123,-122,-82,-78,-99,52,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'INDENT':([109,160,],[150,186,]),'RETURN':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[49,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,49,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,49,-112,-87,-79,-123,-122,-82,-78,-99,49,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'RBRACKET':([7,21,22,38,42,45,57,60,63,64,76,77,78,80,82,86,92,99,115,124,126,130,131,132,133,134,135,136,138,139,140,142,152,153,166,168,169,],[-128,77,-127,-125,-119,-126,-120,-108,-124,-113,124,-129,-131,-118,-115,-116,-117,-114,154,-130,-111,-107,-103,-104,168,-110,-102,-106,-101,-109,-105,-121,-112,184,-132,-123,-122,]),'ARROW':([1,7,22,38,42,44,45,57,60,63,64,67,72,77,78,79,80,82,83,86,92,99,100,106,118,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,146,152,153,158,166,168,169,172,180,181,196,216,220,230,],[-124,-128,-127,-125,-119,91,-126,-120,-108,-124,91,110,91,-129,91,91,91,91,91,-116,-117,91,91,91,-58,-130,-111,91,91,91,91,91,-110,91,91,91,91,91,91,-121,91,178,91,91,-59,91,-123,-122,-8,91,91,-9,91,91,91,]),'ELIF':([179,202,229,],[201,-98,201,]),'DIV':([1,7,22,38,42,44,45,57,60,63,64,72,77,78,79,80,82,83,86,92,99,100,106,124,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,152,153,166,168,169,180,181,216,220,230,],[-124,-128,-127,-125,-119,89,-126,-120,-108,-124,-113,89,-129,89,89,-118,89,89,-116,-117,89,89,89,-130,-111,89,89,-103,-104,89,-110,89,89,89,89,89,89,-121,89,89,89,89,-123,-122,89,89,89,89,89,]),'PLUS':([0,1,2,5,6,7,12,13,18,21,22,23,29,31,32,34,35,36,37,38,42,44,45,46,49,54,56,57,60,61,63,64,72,77,78,79,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,102,103,104,106,114,115,124,125,126,127,130,131,132,133,134,135,136,137,138,139,140,142,143,148,149,150,152,153,159,166,167,168,169,170,179,180,181,182,183,192,197,199,201,202,203,208,216,217,220,223,224,227,229,230,232,],[46,-124,46,46,-5,-128,-15,-77,-6,46,-127,46,-73,-16,46,46,46,-76,-75,-125,-119,96,-126,46,46,46,-74,-120,-108,46,-124,-113,96,-129,96,96,-118,46,-115,96,-17,-116,46,46,46,46,-117,46,46,46,46,46,46,-114,96,-3,-4,46,96,46,46,-130,46,-111,96,96,-103,-104,96,-110,-102,96,96,-101,96,96,-121,96,46,46,46,96,96,-87,96,-79,-123,-122,46,-82,96,96,-99,46,-80,-7,-83,46,-98,-100,46,96,-88,96,-81,-84,46,-85,96,-86,]),'STRUCT':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[11,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,11,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,11,-112,-87,-79,-123,-122,-82,-78,-99,11,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),'IF':([0,6,7,12,13,18,22,29,31,36,37,38,42,45,54,56,57,60,63,64,77,80,82,84,86,92,99,102,103,124,126,130,131,132,134,135,136,138,139,140,142,150,152,159,167,168,169,179,181,182,183,192,197,199,202,203,217,223,224,229,232,],[61,-5,-128,-15,-77,-6,-127,-73,-16,-76,-75,-125,-119,-126,61,-74,-120,-108,-124,-113,-129,-118,-115,-17,-116,-117,-114,-3,-4,-130,-111,-107,-103,-104,-110,-102,-106,-101,-109,-105,-121,61,-112,-87,-79,-123,-122,-82,-78,-99,61,-80,-7,-83,-98,-100,-88,-81,-84,-85,-86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'while_orelse':([167,],[192,]),'suite':([65,128,147,177,213,215,218,225,228,],[108,167,179,197,223,224,226,229,231,]),'varargslist':([145,],[171,]),'include_stmt':([0,54,150,183,],[9,9,9,9,]),'simple_stmt':([0,54,150,183,],[12,12,12,12,]),'funcdef':([0,54,150,183,],[13,13,13,13,]),'define_stmt':([0,54,150,183,],[14,14,14,14,]),'var_decl':([0,54,123,145,150,183,191,195,],[8,8,165,176,8,8,212,176,]),'default':([186,209,],[204,221,]),'enum_name_list':([122,],[162,]),'enum_decl_stmt':([0,54,150,183,],[16,16,16,16,]),'switch_stmts':([186,],[206,]),'assign_stmt':([0,54,150,183,],[17,17,17,17,]),'stmt':([0,54,150,183,],[18,103,182,203,]),'inline_func_decl':([4,43,62,69,71,110,157,178,],[70,70,70,70,70,70,70,70,]),'case_expr_list':([208,],[219,]),'struct_decl':([0,54,150,183,],[25,25,25,25,]),'module':([0,],[26,]),'param_list_contents':([71,],[120,]),'ifndef_stmt':([0,54,150,183,],[15,15,15,15,]),'var_decl_stmt':([0,54,150,183,],[28,28,28,28,]),'if_stmt':([0,54,150,183,],[29,29,29,29,]),'bracket_list':([68,85,107,117,119,151,185,198,],[116,116,116,116,116,116,116,116,]),'argument':([104,170,],[141,194,]),'break':([0,54,150,183,],[30,30,30,30,]),'compound_stmt':([0,54,150,183,],[31,31,31,31,]),'stmts':([150,],[183,]),'param_type_list':([4,43,62,69,71,110,157,178,],[67,67,67,67,67,67,67,67,]),'type_declaration':([4,43,62,69,71,110,157,178,],[68,85,107,117,119,151,185,198,]),'switch_stmt':([0,54,150,183,],[36,36,36,36,]),'array_contents':([21,],[76,]),'case':([186,209,],[205,222,]),'if_orelse':([179,229,],[199,232,]),'dowhile_stmt':([0,54,150,183,],[37,37,37,37,]),'parameters':([105,],[146,]),'small_stmt':([0,54,150,183,],[41,41,41,41,]),'optional_comma':([164,],[189,]),'switch_suite':([121,],[159,]),'expr':([0,2,5,21,23,32,34,35,46,49,54,61,81,87,88,89,90,93,94,95,96,97,98,104,114,115,125,148,149,150,170,183,201,208,227,],[44,64,72,78,79,80,82,83,99,100,44,106,127,130,131,132,133,135,136,137,138,139,140,143,152,153,166,180,181,44,143,44,216,220,230,]),'typedef_stmt':([0,54,150,183,],[27,27,27,27,]),'struct_decl_stmt':([0,54,150,183,],[47,47,47,47,]),'endif_stmt':([0,54,150,183,],[55,55,55,55,]),'func_decl':([0,54,150,183,],[48,48,48,48,]),'case_list':([186,],[209,]),'array':([68,85,107,116,117,119,151,185,198,],[113,113,113,113,113,113,113,113,113,]),'return_stmt':([0,54,150,183,],[50,50,50,50,]),'pointer_or_array':([68,85,107,116,117,119,151,185,198,],[111,111,111,155,111,111,111,111,111,]),'struct_decl_list':([123,],[164,]),'expr_stmt':([0,54,150,183,],[51,51,51,51,]),'empty':([0,164,],[19,190,]),'stmt_list':([0,],[54,]),'pointer':([68,85,107,116,117,119,151,185,198,],[112,112,112,112,112,112,112,112,112,]),'varaglist_elem':([145,195,],[174,214,]),'enum_decl':([0,54,150,183,],[39,39,39,39,]),'while_stmt':([0,54,150,183,],[56,56,56,56,]),'atom':([0,2,5,21,23,32,34,35,46,49,54,61,81,87,88,89,90,93,94,95,96,97,98,104,114,115,125,148,149,150,170,183,201,208,227,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'arglist':([104,],[144,]),'pass':([0,54,150,183,],[59,59,59,59,]),'power':([0,2,5,21,23,32,34,35,46,49,54,61,81,87,88,89,90,93,94,95,96,97,98,104,114,115,125,148,149,150,170,183,201,208,227,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',45),
  ('module -> empty','module',1,'p_empty_module','cparse.py',49),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',54),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',58),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',62),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',66),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',71),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',76),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',80),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',84),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',88),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',93),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',97),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',101),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',110),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',114),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',133),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',139),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',143),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',147),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',151),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',155),
  ('break -> BREAK','break',1,'p_break','cparse.py',159),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',164),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',168),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',172),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',176),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',182),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',186),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',190),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',196),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',200),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',205),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',210),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',214),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',219),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',224),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',228),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',232),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',239),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',243),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',247),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',251),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',255),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',259),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',265),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',279),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',280),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',284),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',288),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',292),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',296),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',300),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',304),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',309),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',313),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',319),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',320),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',321),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',322),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',323),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',331),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',336),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',340),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',344),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',350),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',354),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',358),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',362),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',366),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',371),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',375),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',379),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',383),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',387),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',391),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',395),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',399),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',403),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',407),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',411),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',416),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',420),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',424),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',432),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',436),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',440),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',444),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',448),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',452),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',456),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',460),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',464),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',468),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',472),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',476),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',480),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',484),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',488),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',492),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',496),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',500),
  ('expr -> NULL','expr',1,'p_null','cparse.py',504),
  ('power -> atom','power',1,'p_power_1','cparse.py',508),
  ('power -> atom LPAR RPAR','power',3,'p_power_2','cparse.py',512),
  ('power -> atom LPAR arglist RPAR','power',4,'p_power_call_args','cparse.py',516),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_power_index','cparse.py',522),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',526),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',530),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',534),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',538),
  ('expr -> CHAR','expr',1,'p_atom_char','cparse.py',542),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',546),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',550),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',554),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',558),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',568),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',572),
  ('argument -> expr','argument',1,'p_argument','cparse.py',576),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',580),
]
