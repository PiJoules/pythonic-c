
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftGTLTleftPLUSMINUSleftMULTDIVrightAMPNOTCASTleftARROWINCDECAMP ARROW ASSIGN BREAK CASE CAST CHAR COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT expr %prec CASTexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT expratom : NULLpower : atompower : atom LPAR RPARpower : atom LPAR arglist RPARexpr : expr LBRACKET expr RBRACKETexpr : AMP expratom : NAMEatom : INTatom : FLOATatom : STRINGatom : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'INDENT':([136,180,],[177,203,]),'IF':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[1,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,1,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,1,-87,-123,-83,-80,-7,-99,1,-78,-100,-98,-84,-81,-88,-85,-86,]),'COLON':([8,18,19,31,32,35,44,52,58,63,64,67,69,76,77,78,86,92,95,102,103,111,126,131,132,139,141,142,143,144,145,146,147,148,151,158,163,169,174,181,183,191,196,205,213,223,224,234,],[-127,-126,-128,-120,-108,83,-129,93,-119,109,-125,-124,-115,-118,123,-113,-130,-114,138,-116,-117,-111,-121,-131,168,-106,-103,-101,-102,-107,-110,-104,-109,-105,83,-112,-122,83,-8,-123,204,208,-9,220,222,230,-96,-97,]),'MINUS':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,35,39,42,44,46,50,54,56,57,58,59,61,63,64,67,68,69,76,77,78,79,80,81,82,86,87,91,92,94,95,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,127,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,156,158,162,163,164,165,166,177,178,179,181,182,184,190,193,195,200,201,202,205,211,212,214,219,221,224,227,228,231,232,234,],[12,12,-6,12,-127,12,-16,12,-73,12,12,-126,-128,-77,-75,12,-120,-108,12,-125,12,-5,-129,-74,12,-76,12,-15,-119,12,100,100,-125,-124,100,-115,-118,100,-113,12,-17,-4,-3,-130,100,12,-114,100,100,12,12,12,12,12,12,-116,-117,12,12,12,12,-111,12,12,-121,100,12,-131,100,100,100,-103,-101,-102,100,-110,-104,100,100,100,-82,100,-112,-79,-122,12,12,100,12,12,-87,-123,-83,12,-80,100,-7,-99,12,100,100,-100,-98,12,-84,-81,100,-88,-85,12,-86,100,]),'$end':([0,2,6,8,10,14,18,19,20,22,30,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,179,181,182,190,195,202,212,219,221,227,228,232,],[-137,0,-6,-127,-16,-73,-126,-128,-77,-75,-2,-120,-108,-1,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,-87,-123,-83,-80,-7,-78,-98,-84,-81,-88,-85,-86,]),'INC':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,76,77,78,86,87,92,94,95,102,103,111,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,156,158,163,166,181,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,102,102,-125,102,102,102,102,102,102,-130,102,102,102,102,-116,-117,-111,-121,102,-131,102,102,102,102,102,102,102,-110,102,102,102,102,102,102,-122,102,-123,102,102,102,102,102,]),'TYPEDEF':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[38,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,38,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,38,-87,-123,-83,-80,-7,-99,38,-78,-100,-98,-84,-81,-88,-85,-86,]),'INCLUDE':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[4,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,4,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,4,-87,-123,-83,-80,-7,-99,4,-78,-100,-98,-84,-81,-88,-85,-86,]),'COMMA':([8,18,19,31,32,44,58,64,67,69,72,75,76,78,85,86,87,92,102,103,111,113,114,116,118,119,120,124,125,126,127,128,131,139,141,142,143,144,145,146,147,148,152,153,154,155,157,158,161,163,166,169,170,171,172,173,175,176,181,188,189,192,193,206,209,210,223,224,234,],[-127,-126,-128,-120,-108,-129,-119,-125,-124,-115,-54,-56,-118,-113,130,-130,-132,-114,-116,-117,-111,-65,-64,-62,-63,160,-60,164,-135,-121,-136,-52,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,185,-48,-55,-67,-66,-112,-57,-122,-133,-11,197,-13,-12,-10,-41,198,-123,-68,-61,-134,-53,-47,-14,-42,231,-96,-97,]),'CASE':([203,212,216,217,226,233,],[214,-98,214,-93,-94,-95,]),'ASSIGN':([8,18,19,31,32,35,44,58,61,64,67,69,72,75,76,78,86,92,102,103,111,113,114,116,118,126,128,131,139,141,142,143,144,145,146,147,148,154,155,157,158,161,163,181,188,],[-127,-126,-128,-120,-108,-125,-129,-119,108,-125,-124,-115,-54,-56,-118,-113,-130,-114,-116,-117,-111,-65,-64,-62,-63,-121,165,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-55,-67,-66,-112,-57,-122,-123,-68,]),'AMP':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[7,7,-6,7,-127,7,-16,7,-73,7,7,-126,-128,-77,-75,7,-120,-108,7,7,-5,-129,-74,7,-76,7,-15,-119,7,-125,-124,-115,-118,-113,7,-17,-4,-3,-130,7,-114,7,7,7,7,7,7,-116,-117,7,7,7,7,-111,7,7,-121,7,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,7,7,7,7,-87,-123,-83,7,-80,-7,-99,7,-78,-100,-98,7,-84,-81,-88,-85,7,-86,]),'STRUCT':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[5,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,5,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,5,-87,-123,-83,-80,-7,-99,5,-78,-100,-98,-84,-81,-88,-85,-86,]),'LBRACKET':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,35,39,42,44,46,50,54,56,57,58,59,61,63,64,67,68,69,71,72,75,76,77,78,79,80,81,82,84,86,87,91,92,94,95,96,97,98,99,100,101,102,103,105,106,107,108,111,112,113,114,115,116,117,118,120,126,127,128,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,154,155,156,157,158,161,162,163,164,165,166,177,178,179,181,182,184,188,189,190,193,194,195,200,201,202,205,211,212,214,219,221,224,227,228,231,232,234,],[39,39,-6,39,-127,39,-16,39,-73,39,39,-126,-128,-77,-75,39,-120,-108,39,-125,39,-5,-129,-74,39,-76,39,-15,-119,39,97,97,-125,-124,97,-115,115,-54,-56,-118,97,-113,39,-17,-4,-3,115,-130,97,39,-114,97,97,39,39,39,39,39,39,-116,-117,39,39,39,39,-111,115,-65,-64,39,115,39,-63,115,-121,97,115,39,-131,97,-106,97,-103,-101,-102,-107,-110,-104,-109,-105,97,-82,-55,-67,97,-66,-112,-57,-79,-122,39,39,97,39,39,-87,-123,-83,39,-68,115,-80,97,115,-7,-99,39,97,97,-100,-98,39,-84,-81,97,-88,-85,39,-86,97,]),'NOT':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[16,16,-6,16,-127,16,-16,16,-73,16,16,-126,-128,-77,-75,16,-120,-108,16,16,-5,-129,-74,16,-76,16,-15,-119,16,-125,-124,-115,-118,-113,16,-17,-4,-3,-130,16,-114,16,16,16,16,16,16,-116,-117,16,16,16,16,-111,16,16,-121,16,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,16,16,16,16,-87,-123,-83,16,-80,-7,-99,16,-78,-100,-98,16,-84,-81,-88,-85,16,-86,]),'ENUM':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[41,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,41,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,41,-87,-123,-83,-80,-7,-99,41,-78,-100,-98,-84,-81,-88,-85,-86,]),'NEWLINE':([0,3,6,8,10,11,13,14,18,19,20,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,42,44,45,46,48,49,51,53,54,55,57,58,60,61,62,64,65,67,69,72,75,76,78,80,81,82,86,90,91,92,93,94,102,103,109,111,113,114,116,118,123,126,128,129,131,132,135,138,139,141,142,143,144,145,146,147,148,149,150,154,155,157,158,161,162,163,168,174,179,181,182,188,190,193,194,195,196,199,202,204,207,208,212,219,220,221,222,227,228,230,232,],[42,-27,-6,-127,-16,-18,-31,-73,-126,-128,-77,-29,-75,-38,-22,-30,-20,-51,-25,-120,-108,80,82,-125,-26,-19,-5,-129,-24,-74,-36,-28,-23,-21,-76,-39,-15,-119,-37,-70,-43,-125,-69,-124,-115,-54,-56,-118,-113,-17,-4,-3,-130,-35,-34,-114,136,-72,-116,-117,136,-111,-65,-64,-62,-63,136,-121,-52,-32,-131,-49,-33,180,-106,-103,-101,-102,-107,-110,-104,-109,-105,-71,-82,-55,-67,-66,-112,-57,-79,-122,136,-8,-87,-123,-83,-68,-80,-53,-50,-7,-9,-40,-78,136,-44,136,-98,-84,136,-81,136,-88,-85,136,-86,]),'LPAR':([0,1,6,7,8,9,10,12,14,15,16,17,18,19,20,22,24,31,32,34,35,38,39,42,44,46,50,54,56,57,58,59,64,67,69,70,73,76,78,79,80,81,82,83,86,88,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,122,126,130,131,139,141,142,143,144,145,146,147,148,150,158,160,162,163,164,165,167,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[9,9,-6,9,-127,9,-16,9,-73,73,9,9,-126,-128,-77,-75,9,79,-108,9,-125,73,9,-5,-129,-74,9,-76,9,-15,-119,9,-125,-124,-115,73,73,-118,-113,9,-17,-4,-3,73,-130,133,9,-114,9,9,9,9,9,9,-116,-117,9,9,9,9,-111,9,9,73,-121,9,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,73,-79,-122,9,9,73,9,9,-87,-123,-83,9,-80,-7,-99,9,-78,-100,-98,9,-84,-81,-88,-85,9,-86,]),'GT':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,71,72,75,76,77,78,86,87,92,94,95,102,103,111,113,114,116,118,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,154,155,156,157,158,161,163,166,181,188,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,101,101,-125,-124,101,-115,117,-54,-56,-118,101,-113,-130,101,-114,101,101,-116,-117,-111,-65,-64,-62,-63,-121,101,-131,101,-106,101,-103,-101,-102,-107,-110,-104,101,101,101,-55,-67,101,-66,-112,-57,-122,101,-123,-68,101,101,101,101,101,]),'IFNDEF':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[43,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,43,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,43,-87,-123,-83,-80,-7,-99,43,-78,-100,-98,-84,-81,-88,-85,-86,]),'FLOAT':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[8,8,-6,8,-127,8,-16,8,-73,8,8,-126,-128,-77,-75,8,-120,-108,8,8,-5,-129,-74,8,-76,8,-15,-119,8,-125,-124,-115,-118,-113,8,-17,-4,-3,-130,8,-114,8,8,8,8,8,8,-116,-117,8,8,8,8,-111,8,8,-121,8,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,8,8,8,8,-87,-123,-83,8,-80,-7,-99,8,-78,-100,-98,8,-84,-81,-88,-85,8,-86,]),'ELLIPSIS':([133,197,],[171,171,]),'RBRACKET':([8,18,19,31,32,39,44,58,64,67,69,76,78,85,86,87,92,102,103,111,115,126,131,139,140,141,142,143,144,145,146,147,148,156,158,163,166,181,],[-127,-126,-128,-120,-108,86,-129,-119,-125,-124,-115,-118,-113,131,-130,-132,-114,-116,-117,-111,155,-121,-131,-106,181,-103,-101,-102,-107,-110,-104,-109,-105,188,-112,-122,-133,-123,]),'DEC':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,76,77,78,86,87,92,94,95,102,103,111,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,156,158,163,166,181,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,103,103,-125,103,103,103,103,103,103,-130,103,103,103,103,-116,-117,-111,-121,103,-131,103,103,103,103,103,103,103,-110,103,103,103,103,103,103,-122,103,-123,103,103,103,103,103,]),'INT':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[18,18,-6,18,-127,18,-16,18,-73,18,18,-126,-128,-77,-75,18,-120,-108,18,18,-5,-129,-74,18,-76,18,-15,-119,18,-125,-124,-115,-118,-113,18,-17,-4,-3,-130,18,-114,18,18,18,18,18,18,-116,-117,18,18,18,18,-111,18,18,-121,18,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,18,18,18,18,-87,-123,-83,18,-80,-7,-99,18,-78,-100,-98,18,-84,-81,-88,-85,18,-86,]),'DIV':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,76,77,78,86,87,92,94,95,102,103,111,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,156,158,163,166,181,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,105,105,-125,-124,105,105,-118,105,-113,-130,105,105,105,105,-116,-117,-111,-121,105,-131,105,105,105,-103,105,105,105,-110,-104,105,105,105,105,-112,-122,105,-123,105,105,105,105,105,]),'NE':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,76,77,78,86,87,92,94,95,102,103,111,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,156,158,163,166,181,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,106,106,-125,-124,106,-115,-118,106,-113,-130,106,-114,106,106,-116,-117,-111,-121,106,-131,106,-106,106,-103,-101,-102,-107,-110,-104,-109,-105,106,106,-112,-122,106,-123,106,106,106,106,106,]),'NAME':([0,1,5,6,7,8,9,10,12,14,15,16,17,18,19,20,22,24,31,32,34,38,39,40,41,42,43,44,46,47,50,54,56,57,58,59,64,67,69,70,72,73,75,76,78,79,80,81,82,83,84,86,91,92,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,114,115,116,117,118,122,126,130,131,133,134,139,141,142,143,144,145,146,147,148,150,154,155,157,158,160,161,162,163,164,165,167,177,178,179,181,182,184,185,188,190,195,197,198,200,201,202,211,212,214,219,221,227,228,231,232,],[35,64,66,-6,64,-127,64,-16,64,-73,72,64,64,-126,-128,-77,-75,64,-120,-108,35,72,64,88,89,-5,90,-129,-74,91,64,-76,64,-15,-119,64,-125,-124,-115,72,-54,72,-56,-118,-113,64,-17,-4,-3,72,129,-130,64,-114,64,64,64,64,64,64,-116,-117,145,64,64,64,64,151,-111,-65,-64,64,-62,64,-63,72,-121,64,-131,169,175,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-55,-67,-66,-112,72,-57,-79,-122,64,64,72,35,64,-87,-123,-83,64,151,-68,-80,-7,169,210,-99,35,-78,-100,-98,64,-84,-81,-88,-85,64,-86,]),'DEFINE':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[47,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,47,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,47,-87,-123,-83,-80,-7,-99,47,-78,-100,-98,-84,-81,-88,-85,-86,]),'ENDIF':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[48,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,48,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,48,-87,-123,-83,-80,-7,-99,48,-78,-100,-98,-84,-81,-88,-85,-86,]),'LT':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,35,39,42,44,46,50,54,56,57,58,59,61,63,64,67,68,69,76,77,78,79,80,81,82,86,87,91,92,94,95,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,127,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,156,158,162,163,164,165,166,177,178,179,181,182,184,190,193,195,200,201,202,205,211,212,214,219,221,224,227,228,231,232,234,],[15,15,-6,15,-127,15,-16,15,-73,15,15,-126,-128,-77,-75,15,-120,-108,15,-125,15,-5,-129,-74,15,-76,15,-15,-119,15,96,96,-125,-124,96,-115,-118,96,-113,15,-17,-4,-3,-130,96,15,-114,96,96,15,15,15,15,15,15,-116,-117,15,15,15,15,-111,15,15,-121,96,15,-131,96,-106,96,-103,-101,-102,-107,-110,-104,96,96,96,-82,96,-112,-79,-122,15,15,96,15,15,-87,-123,-83,15,-80,96,-7,-99,15,96,96,-100,-98,15,-84,-81,96,-88,-85,15,-86,96,]),'DEF':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[40,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,40,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,40,-87,-123,-83,-80,-7,-99,40,-78,-100,-98,-84,-81,-88,-85,-86,]),'BREAK':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[23,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,23,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,23,-87,-123,-83,-80,-7,-99,23,-78,-100,-98,-84,-81,-88,-85,-86,]),'PLUS':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,35,39,42,44,46,50,54,56,57,58,59,61,63,64,67,68,69,76,77,78,79,80,81,82,86,87,91,92,94,95,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,127,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,156,158,162,163,164,165,166,177,178,179,181,182,184,190,193,195,200,201,202,205,211,212,214,219,221,224,227,228,231,232,234,],[50,50,-6,50,-127,50,-16,50,-73,50,50,-126,-128,-77,-75,50,-120,-108,50,-125,50,-5,-129,-74,50,-76,50,-15,-119,50,99,99,-125,-124,99,-115,-118,99,-113,50,-17,-4,-3,-130,99,50,-114,99,99,50,50,50,50,50,50,-116,-117,50,50,50,50,-111,50,50,-121,99,50,-131,99,99,99,-103,-101,-102,99,-110,-104,99,99,99,-82,99,-112,-79,-122,50,50,99,50,50,-87,-123,-83,50,-80,99,-7,-99,50,99,99,-100,-98,50,-84,-81,99,-88,-85,50,-86,99,]),'STRING':([0,1,4,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[19,19,65,-6,19,-127,19,-16,19,-73,19,19,-126,-128,-77,-75,19,-120,-108,19,19,-5,-129,-74,19,-76,19,-15,-119,19,-125,-124,-115,-118,-113,19,-17,-4,-3,-130,19,-114,19,19,19,19,19,19,-116,-117,19,19,19,19,-111,19,19,-121,19,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,19,19,19,19,-87,-123,-83,19,-80,-7,-99,19,-78,-100,-98,19,-84,-81,-88,-85,19,-86,]),'DO':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[52,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,52,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,52,-87,-123,-83,-80,-7,-99,52,-78,-100,-98,-84,-81,-88,-85,-86,]),'ARROW':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,74,76,77,78,86,87,92,94,95,102,103,111,121,126,127,131,132,135,139,140,141,142,143,144,145,146,147,148,149,156,158,159,163,166,174,181,193,196,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,104,104,-125,104,104,104,122,104,104,104,-130,104,104,104,104,-116,-117,-111,-58,-121,104,-131,167,104,104,104,104,104,104,104,-110,104,104,104,104,104,104,-59,-122,104,-8,-123,104,-9,104,104,104,104,]),'ELIF':([150,212,228,],[184,-98,184,]),'RPAR':([8,18,19,31,32,44,58,64,67,68,69,72,73,75,76,78,79,86,92,102,103,111,113,114,116,118,119,120,124,125,126,127,128,131,133,139,141,142,143,144,145,146,147,148,154,155,157,158,161,163,169,170,171,172,173,181,188,189,192,193,209,],[-127,-126,-128,-120,-108,-129,-119,-125,-124,111,-115,-54,121,-56,-118,-113,126,-130,-114,-116,-117,-111,-65,-64,-62,-63,159,-60,163,-135,-121,-136,-52,-131,174,-106,-103,-101,-102,-107,-110,-104,-109,-105,-55,-67,-66,-112,-57,-122,-11,196,-13,-12,-10,-123,-68,-61,-134,-53,-14,]),'LBRACE':([15,38,66,70,73,83,89,122,160,167,],[70,70,110,70,70,70,134,70,70,70,]),'RETURN':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[56,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,56,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,56,-87,-123,-83,-80,-7,-99,56,-78,-100,-98,-84,-81,-88,-85,-86,]),'WHILE':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,137,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[17,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,17,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,178,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,17,-87,-123,-83,-80,-7,-99,17,-78,-100,-98,-84,-81,-88,-85,-86,]),'ELSE':([150,162,203,212,216,217,226,228,233,],[183,191,213,-98,213,-93,-94,183,-95,]),'NULL':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[58,58,-6,58,-127,58,-16,58,-73,58,58,-126,-128,-77,-75,58,-120,-108,58,58,-5,-129,-74,58,-76,58,-15,-119,58,-125,-124,-115,-118,-113,58,-17,-4,-3,-130,58,-114,58,58,58,58,58,58,-116,-117,58,58,58,58,-111,58,58,-121,58,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,58,58,58,58,-87,-123,-83,58,-80,-7,-99,58,-78,-100,-98,58,-84,-81,-88,-85,58,-86,]),'MULT':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,35,39,42,44,46,50,54,56,57,58,59,61,63,64,67,68,69,76,77,78,79,80,81,82,86,87,91,92,94,95,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,127,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,156,158,162,163,164,165,166,177,178,179,181,182,184,190,193,195,200,201,202,205,211,212,214,219,221,224,227,228,231,232,234,],[24,24,-6,24,-127,24,-16,24,-73,24,24,-126,-128,-77,-75,24,-120,-108,24,-125,24,-5,-129,-74,24,-76,24,-15,-119,24,98,98,-125,-124,98,98,-118,98,-113,24,-17,-4,-3,-130,98,24,98,98,98,24,24,24,24,24,24,-116,-117,24,24,24,24,-111,24,24,-121,98,24,-131,98,98,98,-103,98,98,98,-110,-104,98,98,98,-82,98,-112,-79,-122,24,24,98,24,24,-87,-123,-83,24,-80,98,-7,-99,24,98,98,-100,-98,24,-84,-81,98,-88,-85,24,-86,98,]),'SWITCH':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[59,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,59,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,59,-87,-123,-83,-80,-7,-99,59,-78,-100,-98,-84,-81,-88,-85,-86,]),'DEDENT':([8,10,14,18,19,20,22,31,32,44,46,54,57,58,64,67,69,76,78,80,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,179,181,182,190,195,200,201,202,211,212,215,216,217,218,219,221,225,226,227,228,229,232,233,],[-127,-16,-73,-126,-128,-77,-75,-120,-108,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,-87,-123,-83,-80,-7,-99,212,-78,-100,-98,-91,-89,-93,227,-84,-81,-90,-94,-88,-85,-92,-86,-95,]),'EQ':([8,18,19,31,32,35,44,58,61,63,64,67,68,69,76,77,78,86,87,92,94,95,102,103,111,126,127,131,135,139,140,141,142,143,144,145,146,147,148,149,156,158,163,166,181,193,202,205,224,234,],[-127,-126,-128,-120,-108,-125,-129,-119,107,107,-125,-124,107,-115,-118,107,-113,-130,107,-114,107,107,-116,-117,-111,-121,107,-131,107,-106,107,-103,-101,-102,-107,-110,-104,-109,-105,107,107,-112,-122,107,-123,107,107,107,107,107,]),'PASS':([0,6,8,10,14,18,19,20,22,31,32,34,42,44,46,54,57,58,64,67,69,76,78,80,81,82,86,92,102,103,111,126,131,139,141,142,143,144,145,146,147,148,150,158,162,163,177,179,181,182,190,195,200,201,202,211,212,219,221,227,228,232,],[60,-6,-127,-16,-73,-126,-128,-77,-75,-120,-108,60,-5,-129,-74,-76,-15,-119,-125,-124,-115,-118,-113,-17,-4,-3,-130,-114,-116,-117,-111,-121,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,60,-87,-123,-83,-80,-7,-99,60,-78,-100,-98,-84,-81,-88,-85,-86,]),'CHAR':([0,1,6,7,8,9,10,12,14,16,17,18,19,20,22,24,31,32,34,39,42,44,46,50,54,56,57,58,59,64,67,69,76,78,79,80,81,82,86,91,92,96,97,98,99,100,101,102,103,105,106,107,108,111,115,117,126,130,131,139,141,142,143,144,145,146,147,148,150,158,162,163,164,165,177,178,179,181,182,184,190,195,200,201,202,211,212,214,219,221,227,228,231,232,],[44,44,-6,44,-127,44,-16,44,-73,44,44,-126,-128,-77,-75,44,-120,-108,44,44,-5,-129,-74,44,-76,44,-15,-119,44,-125,-124,-115,-118,-113,44,-17,-4,-3,-130,44,-114,44,44,44,44,44,44,-116,-117,44,44,44,44,-111,44,44,-121,44,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-82,-112,-79,-122,44,44,44,44,-87,-123,-83,44,-80,-7,-99,44,-78,-100,-98,44,-84,-81,-88,-85,44,-86,]),'RBRACE':([8,18,19,31,32,44,58,64,67,69,72,75,76,78,86,92,102,103,111,112,113,114,116,118,126,128,131,139,141,142,143,144,145,146,147,148,152,153,154,155,157,158,161,163,175,176,181,185,186,187,188,193,206,210,],[-127,-126,-128,-120,-108,-129,-119,-125,-124,-115,-54,-56,-118,-113,-130,-114,-116,-117,-111,154,-65,-64,-62,-63,-121,-52,-131,-106,-103,-101,-102,-107,-110,-104,-109,-105,-137,-48,-55,-67,-66,-112,-57,-122,-41,199,-123,-45,-46,207,-68,-53,-47,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'power':([0,1,7,9,12,16,17,24,34,39,50,56,59,79,91,96,97,98,99,100,101,105,106,107,108,115,117,130,164,165,177,178,184,201,214,231,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'array':([71,84,112,116,120,128,161,189,194,],[114,114,114,114,114,114,114,114,114,]),'small_stmt':([0,34,177,201,],[33,33,33,33,]),'stmt_list':([0,],[34,]),'switch_suite':([138,],[179,]),'var_decl_stmt':([0,34,177,201,],[36,36,36,36,]),'module':([0,],[2,]),'while_orelse':([162,],[190,]),'include_stmt':([0,34,177,201,],[37,37,37,37,]),'argument':([79,164,],[125,192,]),'enum_decl_stmt':([0,34,177,201,],[3,3,3,3,]),'param_type_list':([15,38,70,73,83,122,160,167,],[74,74,74,74,74,74,74,74,]),'bracket_list':([71,84,112,120,128,161,189,194,],[116,116,116,116,116,116,116,116,]),'case':([203,216,],[217,226,]),'while_stmt':([0,34,177,201,],[46,46,46,46,]),'stmts':([177,],[201,]),'type_declaration':([15,38,70,73,83,122,160,167,],[71,84,112,120,128,161,189,194,]),'struct_decl_list':([110,],[152,]),'compound_stmt':([0,34,177,201,],[10,10,10,10,]),'parameters':([88,],[132,]),'default':([203,216,],[215,225,]),'return_stmt':([0,34,177,201,],[11,11,11,11,]),'suite':([93,109,123,168,204,208,220,222,230,],[137,150,162,195,219,221,228,229,233,]),'struct_decl':([0,34,177,201,],[62,62,62,62,]),'assign_stmt':([0,34,177,201,],[45,45,45,45,]),'case_expr_list':([214,],[223,]),'stmt':([0,34,177,201,],[6,81,200,211,]),'pass':([0,34,177,201,],[13,13,13,13,]),'if_stmt':([0,34,177,201,],[14,14,14,14,]),'struct_decl_stmt':([0,34,177,201,],[49,49,49,49,]),'inline_func_decl':([15,38,70,73,83,122,160,167,],[75,75,75,75,75,75,75,75,]),'expr_stmt':([0,34,177,201,],[51,51,51,51,]),'arglist':([79,],[124,]),'pointer_or_array':([71,84,112,116,120,128,161,189,194,],[113,113,113,157,113,113,113,113,113,]),'funcdef':([0,34,177,201,],[20,20,20,20,]),'ifndef_stmt':([0,34,177,201,],[53,53,53,53,]),'if_orelse':([150,228,],[182,232,]),'typedef_stmt':([0,34,177,201,],[21,21,21,21,]),'array_contents':([39,],[85,]),'switch_stmt':([0,34,177,201,],[54,54,54,54,]),'pointer':([71,84,112,116,120,128,161,189,194,],[118,118,118,118,118,118,118,118,118,]),'dowhile_stmt':([0,34,177,201,],[22,22,22,22,]),'switch_stmts':([203,],[218,]),'enum_decl':([0,34,177,201,],[55,55,55,55,]),'case_list':([203,],[216,]),'func_decl':([0,34,177,201,],[29,29,29,29,]),'simple_stmt':([0,34,177,201,],[57,57,57,57,]),'enum_name_list':([134,],[176,]),'param_list_contents':([73,],[119,]),'endif_stmt':([0,34,177,201,],[25,25,25,25,]),'break':([0,34,177,201,],[26,26,26,26,]),'varargslist':([133,],[170,]),'define_stmt':([0,34,177,201,],[27,27,27,27,]),'var_decl':([0,34,110,133,177,185,197,201,],[28,28,153,172,28,206,172,28,]),'varaglist_elem':([133,197,],[173,209,]),'expr':([0,1,7,9,12,16,17,24,34,39,50,56,59,79,91,96,97,98,99,100,101,105,106,107,108,115,117,130,164,165,177,178,184,201,214,231,],[61,63,67,68,69,76,77,78,61,87,92,94,95,127,135,139,140,141,142,143,144,146,147,148,149,156,158,166,127,193,61,202,205,61,224,234,]),'empty':([0,152,],[30,186,]),'atom':([0,1,7,9,12,16,17,24,34,39,50,56,59,79,91,96,97,98,99,100,101,105,106,107,108,115,117,130,164,165,177,178,184,201,214,231,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'optional_comma':([152,],[187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',46),
  ('module -> empty','module',1,'p_empty_module','cparse.py',50),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',55),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',59),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',63),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',67),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',72),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',77),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',81),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',85),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',90),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',94),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',98),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',103),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',111),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',128),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',134),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',140),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',144),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',148),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',152),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',156),
  ('break -> BREAK','break',1,'p_break','cparse.py',160),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',165),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',169),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',173),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',177),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',183),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',187),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',192),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',197),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',201),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',206),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',211),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',215),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',220),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',225),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',229),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',233),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',240),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',244),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',248),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',252),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',256),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',260),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',266),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',280),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',281),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',285),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',289),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',293),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',297),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',301),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',305),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',310),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',314),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',320),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',321),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',322),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',323),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',324),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',332),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',337),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',341),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',345),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',351),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',355),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',359),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',363),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',367),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',372),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',376),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',380),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',384),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',388),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',392),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',396),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',400),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',404),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',408),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',412),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',417),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',421),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',425),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',433),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',437),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',441),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',445),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',449),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',453),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',457),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',461),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',465),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',469),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',473),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',477),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',481),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',485),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',489),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',493),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',497),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',501),
  ('atom -> NULL','atom',1,'p_null','cparse.py',505),
  ('power -> atom','power',1,'p_power_1','cparse.py',509),
  ('power -> atom LPAR RPAR','power',3,'p_power_2','cparse.py',513),
  ('power -> atom LPAR arglist RPAR','power',4,'p_power_call_args','cparse.py',517),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_index','cparse.py',523),
  ('expr -> AMP expr','expr',2,'p_address_of','cparse.py',529),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',533),
  ('atom -> INT','atom',1,'p_atom_int','cparse.py',537),
  ('atom -> FLOAT','atom',1,'p_atom_float','cparse.py',541),
  ('atom -> STRING','atom',1,'p_atom_str','cparse.py',545),
  ('atom -> CHAR','atom',1,'p_atom_char','cparse.py',549),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',553),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',557),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',561),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',565),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',575),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',579),
  ('argument -> expr','argument',1,'p_argument','cparse.py',583),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',587),
]
