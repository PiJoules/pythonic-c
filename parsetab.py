
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'$end':([0,1,4,6,8,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,157,158,168,181,187,189,198,203,215,217,222,223,227,],[-135,-2,-119,-120,0,-124,-125,-5,-108,-1,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,-87,-79,-112,-83,-78,-80,-7,-98,-84,-88,-81,-85,-86,]),'DEFINE':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[2,-119,-120,-124,-125,-5,-108,2,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,2,-87,-79,-112,-83,2,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'LPAR':([0,3,4,6,9,10,11,12,13,15,16,19,20,21,25,28,31,32,34,39,41,44,45,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,76,80,81,82,83,84,86,87,88,89,90,91,92,95,99,102,103,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,131,140,143,146,147,152,153,154,155,157,158,160,168,175,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[3,3,-119,65,-124,3,-125,3,-5,3,3,-108,3,-122,-74,-15,3,-75,3,3,95,-16,95,3,-123,-73,3,-76,-6,-77,3,-122,-121,3,-126,-118,-3,-4,95,3,3,3,3,-117,3,3,3,-116,3,3,-113,95,95,-114,144,-115,-17,-111,-131,-127,3,-104,-106,-101,-110,-107,-105,-103,-109,-102,95,3,3,3,-130,-82,3,3,3,-87,-79,95,-112,95,-83,3,3,-99,-78,-80,-7,-98,-100,3,-84,-88,-81,-85,3,-86,]),'NULL':([0,3,4,6,9,10,11,12,13,15,16,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,140,143,146,147,152,153,154,155,157,158,168,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[4,4,-119,-120,-124,4,-125,4,-5,4,4,-108,4,-74,-15,4,-75,4,4,-16,4,-123,-73,4,-76,-6,-77,4,-122,-121,4,-126,-118,-3,-4,4,4,4,4,-117,4,4,4,-116,4,4,-113,-114,-115,-17,-111,-131,-127,4,-104,-106,-101,-110,-107,-105,-103,-109,-102,4,4,4,-130,-82,4,4,4,-87,-79,-112,-83,4,4,-99,-78,-80,-7,-98,-100,4,-84,-88,-81,-85,4,-86,]),'ELSE':([152,158,188,203,207,208,218,223,229,],[183,190,205,-98,205,-93,-94,183,-95,]),'COMMA':([4,6,9,11,19,49,62,64,67,68,69,72,84,89,92,96,97,102,104,107,108,109,110,111,112,116,122,123,124,125,126,127,128,129,130,132,134,135,136,137,139,147,148,149,150,159,162,163,165,166,167,168,169,170,171,173,174,177,184,191,192,200,212,213,220,221,228,],[-119,-120,-124,-125,-108,-123,-122,-121,-126,-128,113,-118,-117,-116,-113,-54,-56,-114,-115,-111,-134,-131,146,-133,-127,-52,-104,-106,-101,-110,-107,-105,-103,-109,-102,160,-60,-65,-64,-63,-62,-130,-129,-48,180,-57,-66,-67,-55,193,-41,-112,-12,-13,195,-10,-11,-132,-53,-61,-68,-47,-42,-14,225,-96,-97,]),'BREAK':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[36,-119,-120,-124,-125,-5,-108,36,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,36,-87,-79,-112,-83,36,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'FLOAT':([0,3,4,6,9,10,11,12,13,15,16,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,140,143,146,147,152,153,154,155,157,158,168,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[9,9,-119,-120,-124,9,-125,9,-5,9,9,-108,9,-74,-15,9,-75,9,9,-16,9,-123,-73,9,-76,-6,-77,9,-122,-121,9,-126,-118,-3,-4,9,9,9,9,-117,9,9,9,-116,9,9,-113,-114,-115,-17,-111,-131,-127,9,-104,-106,-101,-110,-107,-105,-103,-109,-102,9,9,9,-130,-82,9,9,9,-87,-79,-112,-83,9,9,-99,-78,-80,-7,-98,-100,9,-84,-88,-81,-85,9,-86,]),'RETURN':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[10,-119,-120,-124,-125,-5,-108,10,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,10,-87,-79,-112,-83,10,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'STRING':([0,3,4,6,9,10,11,12,13,15,16,17,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,140,143,146,147,152,153,154,155,157,158,168,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[11,11,-119,-120,-124,11,-125,11,-5,11,11,73,-108,11,-74,-15,11,-75,11,11,-16,11,-123,-73,11,-76,-6,-77,11,-122,-121,11,-126,-118,-3,-4,11,11,11,11,-117,11,11,11,-116,11,11,-113,-114,-115,-17,-111,-131,-127,11,-104,-106,-101,-110,-107,-105,-103,-109,-102,11,11,11,-130,-82,11,11,11,-87,-79,-112,-83,11,11,-99,-78,-80,-7,-98,-100,11,-84,-88,-81,-85,11,-86,]),'LBRACKET':([0,3,4,6,9,10,11,12,13,15,16,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,96,97,98,101,102,104,105,107,109,112,113,116,122,123,124,125,126,127,128,129,130,134,135,136,137,139,140,141,143,146,147,152,153,154,155,157,158,159,162,163,165,168,181,182,185,186,187,189,191,192,197,198,203,204,210,215,217,222,223,225,227,],[12,12,-119,-120,-124,12,-125,12,-5,12,12,-108,12,-74,-15,12,-75,12,12,-16,12,-123,-73,12,-76,-6,-77,12,-122,-121,12,-126,-118,-3,-4,12,12,12,12,-117,12,12,12,-116,12,12,-113,-54,-56,140,140,-114,-115,-17,-111,-131,-127,12,140,-104,-106,-101,-110,-107,-105,-103,-109,-102,140,-65,-64,-63,140,12,140,12,12,-130,-82,12,12,12,-87,-79,-57,-66,-67,-55,-112,-83,12,12,-99,-78,-80,140,-68,140,-7,-98,-100,12,-84,-88,-81,-85,12,-86,]),'NEWLINE':([0,4,5,6,7,9,11,13,18,19,20,21,22,23,24,25,27,28,29,30,32,33,35,36,37,38,42,44,47,49,50,52,53,54,55,56,57,58,59,60,61,62,64,66,67,72,73,74,75,77,84,89,92,93,96,97,102,104,105,106,107,109,112,115,116,119,120,121,122,123,124,125,126,127,128,129,130,135,136,137,138,139,145,147,152,157,158,159,162,163,165,168,172,176,181,184,187,189,192,194,196,197,198,199,202,203,211,214,215,216,217,222,223,226,227,],[13,-119,-51,-120,-25,-124,-125,-5,-27,-108,74,-122,-31,-43,-26,-74,-20,-15,-24,-28,-75,-22,-19,-38,-70,-37,-23,-16,-36,-123,-73,-76,-6,-29,-21,-77,-39,105,-18,-30,-34,-122,-121,-72,-126,-118,-69,-3,-4,117,-117,-116,-113,-35,-54,-56,-114,-115,-17,-33,-111,-131,-127,117,-52,156,117,-71,-104,-106,-101,-110,-107,-105,-103,-109,-102,-65,-64,-63,-32,-62,-49,-130,-82,-87,-79,-57,-66,-67,-55,-112,-8,117,-83,-53,-78,-80,-68,-40,-9,-50,-7,-44,117,-98,117,117,-84,117,-88,-81,-85,117,-86,]),'STRUCT':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[14,-119,-120,-124,-125,-5,-108,14,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,14,-87,-79,-112,-83,14,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'IF':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[15,-119,-120,-124,-125,-5,-108,15,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,15,-87,-79,-112,-83,15,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'NOT':([0,3,4,6,9,10,11,12,13,15,16,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,140,143,146,147,152,153,154,155,157,158,168,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[16,16,-119,-120,-124,16,-125,16,-5,16,16,-108,16,-74,-15,16,-75,16,16,-16,16,-123,-73,16,-76,-6,-77,16,-122,-121,16,-126,-118,-3,-4,16,16,16,16,-117,16,16,16,-116,16,16,-113,-114,-115,-17,-111,-131,-127,16,-104,-106,-101,-110,-107,-105,-103,-109,-102,16,16,16,-130,-82,16,16,16,-87,-79,-112,-83,16,16,-99,-78,-80,-7,-98,-100,16,-84,-88,-81,-85,16,-86,]),'INCLUDE':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[17,-119,-120,-124,-125,-5,-108,17,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,17,-87,-79,-112,-83,17,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'DEDENT':([4,6,9,11,19,25,28,32,44,49,50,52,56,62,64,67,72,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,157,158,168,181,185,186,187,189,198,203,204,206,207,208,209,215,217,218,219,222,223,224,227,229,],[-119,-120,-124,-125,-108,-74,-15,-75,-16,-123,-73,-76,-77,-122,-121,-126,-118,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,-87,-79,-112,-83,203,-99,-78,-80,-7,-98,-100,217,-89,-93,-91,-84,-88,-94,-90,-81,-85,-92,-86,-95,]),'NAME':([0,2,3,4,6,9,10,11,12,13,14,15,16,19,20,25,28,31,32,34,39,40,41,43,44,45,46,48,49,50,51,52,53,56,61,62,64,65,67,72,74,75,76,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,97,98,99,102,104,105,107,109,112,113,114,122,123,124,125,126,127,128,129,130,131,135,136,137,139,140,142,143,144,146,147,152,153,154,155,157,158,159,160,162,163,165,168,175,180,181,182,185,186,187,189,192,193,195,198,203,204,210,215,217,222,223,225,227,],[21,61,62,-119,-120,-124,62,-125,62,-5,70,62,62,-108,21,-74,-15,62,-75,62,62,93,96,100,-16,96,62,103,-123,-73,62,-76,-6,-77,62,-122,-121,62,-126,-118,-3,-4,96,62,62,62,62,-117,125,62,62,62,-116,62,62,-113,96,-54,-56,138,96,-114,-115,-17,-111,-131,-127,62,151,-104,-106,-101,-110,-107,-105,-103,-109,-102,96,-65,-64,-63,-62,62,167,62,174,62,-130,-82,62,21,62,-87,-79,-57,96,-66,-67,-55,-112,96,151,-83,62,21,-99,-78,-80,-68,212,174,-7,-98,-100,62,-84,-88,-81,-85,62,-86,]),'CASE':([188,203,207,208,218,229,],[210,-98,210,-93,-94,-95,]),'RBRACKET':([4,6,9,11,12,19,49,62,64,67,68,69,72,84,89,92,102,104,107,109,112,122,123,124,125,126,127,128,129,130,140,147,148,164,168,],[-119,-120,-124,-125,67,-108,-123,-122,-121,-126,-128,112,-118,-117,-116,-113,-114,-115,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,163,-130,-129,192,-112,]),'DO':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[26,-119,-120,-124,-125,-5,-108,26,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,26,-87,-79,-112,-83,26,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'DEC':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,147,148,164,168,184,187,201,221,228,],[-119,-120,-124,-125,-108,-122,84,-123,-122,84,-121,84,-126,84,84,84,84,84,-117,-116,84,84,84,84,-111,84,-131,-127,84,84,84,84,-110,84,84,84,84,84,-130,84,84,84,84,84,84,84,84,]),'ASSIGN':([4,6,9,11,19,21,37,49,62,64,67,72,84,89,92,96,97,102,104,107,109,112,116,122,123,124,125,126,127,128,129,130,135,136,137,139,147,159,162,163,165,168,192,],[-119,-120,-124,-125,-108,-122,80,-123,-122,-121,-126,-118,-117,-116,-113,-54,-56,-114,-115,-111,-131,-127,153,-104,-106,-101,-110,-107,-105,-103,-109,-102,-65,-64,-63,-62,-130,-57,-66,-67,-55,-112,-68,]),'SWITCH':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[31,-119,-120,-124,-125,-5,-108,31,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,31,-87,-79,-112,-83,31,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'WHILE':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,118,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[34,-119,-120,-124,-125,-5,-108,34,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,155,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,34,-87,-79,-112,-83,34,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'ENDIF':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[47,-119,-120,-124,-125,-5,-108,47,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,47,-87,-79,-112,-83,47,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'COLON':([4,6,9,11,19,21,26,49,62,64,67,71,72,78,79,84,89,92,102,104,107,109,112,122,123,124,125,126,127,128,129,130,145,147,151,168,172,174,183,190,196,201,205,220,221,228,],[-119,-120,-124,-125,-108,76,77,-123,-122,-121,-126,115,-118,119,120,-117,-116,-113,-114,-115,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,176,-130,76,-112,-8,76,202,211,-9,214,216,226,-96,-97,]),'INT':([0,3,4,6,9,10,11,12,13,15,16,19,20,25,28,31,32,34,39,44,46,49,50,51,52,53,56,61,62,64,65,67,72,74,75,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,107,109,112,113,122,123,124,125,126,127,128,129,130,140,143,146,147,152,153,154,155,157,158,168,181,182,185,186,187,189,198,203,204,210,215,217,222,223,225,227,],[49,49,-119,-120,-124,49,-125,49,-5,49,49,-108,49,-74,-15,49,-75,49,49,-16,49,-123,-73,49,-76,-6,-77,49,-122,-121,49,-126,-118,-3,-4,49,49,49,49,-117,49,49,49,-116,49,49,-113,-114,-115,-17,-111,-131,-127,49,-104,-106,-101,-110,-107,-105,-103,-109,-102,49,49,49,-130,-82,49,49,49,-87,-79,-112,-83,49,49,-99,-78,-80,-7,-98,-100,49,-84,-88,-81,-85,49,-86,]),'PASS':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[38,-119,-120,-124,-125,-5,-108,38,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,38,-87,-79,-112,-83,38,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'EQ':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,147,148,164,168,184,187,201,221,228,],[-119,-120,-124,-125,-108,-122,87,-123,-122,87,-121,87,-126,87,87,-118,87,87,-117,-116,-113,-114,-115,87,-111,87,-131,-127,87,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,87,87,-112,87,87,87,87,87,]),'MULT':([0,3,4,6,9,10,11,12,13,15,16,19,20,21,25,28,31,32,34,37,39,44,46,49,50,51,52,53,56,61,62,63,64,65,66,67,68,71,72,74,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,106,107,108,109,112,113,121,122,123,124,125,126,127,128,129,130,140,143,146,147,148,152,153,154,155,157,158,164,168,181,182,184,185,186,187,189,198,201,203,204,210,215,217,221,222,223,225,227,228,],[39,39,-119,-120,-124,39,-125,39,-5,39,39,-108,39,-122,-74,-15,39,-75,39,88,39,-16,39,-123,-73,39,-76,-6,-77,39,-122,88,-121,39,88,-126,88,88,-118,-3,-4,88,88,39,39,39,39,-117,39,39,39,-116,39,39,-113,88,88,-17,88,-111,88,-131,-127,39,88,-104,88,88,-110,88,88,-103,88,88,39,39,39,-130,88,-82,39,39,39,-87,-79,88,88,-83,39,88,39,-99,88,-80,-7,88,-98,-100,39,-84,-88,88,-81,-85,39,-86,88,]),'IFNDEF':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[40,-119,-120,-124,-125,-5,-108,40,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,40,-87,-79,-112,-83,40,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'TYPEDEF':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[41,-119,-120,-124,-125,-5,-108,41,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,41,-87,-79,-112,-83,41,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'DIV':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,147,148,164,168,184,187,201,221,228,],[-119,-120,-124,-125,-108,-122,81,-123,-122,81,-121,81,-126,81,81,-118,81,81,-117,-116,-113,81,81,81,-111,81,-131,-127,81,-104,81,81,-110,81,81,-103,81,81,-130,81,81,81,81,81,81,81,81,]),'LBRACE':([41,45,70,76,95,99,100,131,160,175,],[99,99,114,99,99,99,142,99,99,99,]),'INC':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,147,148,164,168,184,187,201,221,228,],[-119,-120,-124,-125,-108,-122,89,-123,-122,89,-121,89,-126,89,89,89,89,89,-117,-116,89,89,89,89,-111,89,-131,-127,89,89,89,89,-110,89,89,89,89,89,-130,89,89,89,89,89,89,89,89,]),'INDENT':([117,156,],[154,188,]),'LT':([0,3,4,6,9,10,11,12,13,15,16,19,20,21,25,28,31,32,34,37,39,44,46,49,50,51,52,53,56,61,62,63,64,65,66,67,68,71,72,74,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,106,107,108,109,112,113,121,122,123,124,125,126,127,128,129,130,140,143,146,147,148,152,153,154,155,157,158,164,168,181,182,184,185,186,187,189,198,201,203,204,210,215,217,221,222,223,225,227,228,],[45,45,-119,-120,-124,45,-125,45,-5,45,45,-108,45,-122,-74,-15,45,-75,45,82,45,-16,45,-123,-73,45,-76,-6,-77,45,-122,82,-121,45,82,-126,82,82,-118,-3,-4,82,82,45,45,45,45,-117,45,45,45,-116,45,45,-113,-114,-115,-17,82,-111,82,-131,-127,45,82,-104,-106,-101,-110,-107,-105,-103,-109,-102,45,45,45,-130,82,-82,45,45,45,-87,-79,82,-112,-83,45,82,45,-99,82,-80,-7,82,-98,-100,45,-84,-88,82,-81,-85,45,-86,82,]),'ELLIPSIS':([144,195,],[170,170,]),'PLUS':([0,3,4,6,9,10,11,12,13,15,16,19,20,21,25,28,31,32,34,37,39,44,46,49,50,51,52,53,56,61,62,63,64,65,66,67,68,71,72,74,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,106,107,108,109,112,113,121,122,123,124,125,126,127,128,129,130,140,143,146,147,148,152,153,154,155,157,158,164,168,181,182,184,185,186,187,189,198,201,203,204,210,215,217,221,222,223,225,227,228,],[46,46,-119,-120,-124,46,-125,46,-5,46,46,-108,46,-122,-74,-15,46,-75,46,83,46,-16,46,-123,-73,46,-76,-6,-77,46,-122,83,-121,46,83,-126,83,83,-118,-3,-4,83,83,46,46,46,46,-117,46,46,46,-116,46,46,-113,-114,-115,-17,83,-111,83,-131,-127,46,83,-104,83,-101,-110,83,83,-103,83,-102,46,46,46,-130,83,-82,46,46,46,-87,-79,83,83,-83,46,83,46,-99,83,-80,-7,83,-98,-100,46,-84,-88,83,-81,-85,46,-86,83,]),'DEF':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[48,-119,-120,-124,-125,-5,-108,48,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,48,-87,-79,-112,-83,48,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'ENUM':([0,4,6,9,11,13,19,20,25,28,32,44,49,50,52,53,56,62,64,67,72,74,75,84,89,92,102,104,105,107,109,112,122,123,124,125,126,127,128,129,130,147,152,154,157,158,168,181,185,186,187,189,198,203,204,215,217,222,223,227,],[43,-119,-120,-124,-125,-5,-108,43,-74,-15,-75,-16,-123,-73,-76,-6,-77,-122,-121,-126,-118,-3,-4,-117,-116,-113,-114,-115,-17,-111,-131,-127,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,-82,43,-87,-79,-112,-83,43,-99,-78,-80,-7,-98,-100,-84,-88,-81,-85,-86,]),'RPAR':([4,6,9,11,19,49,62,63,64,65,67,72,84,89,92,95,96,97,102,104,107,108,109,110,111,112,116,122,123,124,125,126,127,128,129,130,132,134,135,136,137,139,144,147,159,162,163,165,168,169,170,171,173,174,177,184,191,192,213,],[-119,-120,-124,-125,-108,-123,-122,107,-121,109,-126,-118,-117,-116,-113,133,-54,-56,-114,-115,-111,-134,-131,147,-133,-127,-52,-104,-106,-101,-110,-107,-105,-103,-109,-102,161,-60,-65,-64,-63,-62,172,-130,-57,-66,-67,-55,-112,-12,-13,196,-10,-11,-132,-53,-61,-68,-14,]),'RBRACE':([4,6,9,11,19,49,62,64,67,72,84,89,92,96,97,102,104,107,109,112,116,122,123,124,125,126,127,128,129,130,135,136,137,139,141,147,149,150,159,162,163,165,166,167,168,178,179,180,184,192,200,212,],[-119,-120,-124,-125,-108,-123,-122,-121,-126,-118,-117,-116,-113,-54,-56,-114,-115,-111,-131,-127,-52,-104,-106,-101,-110,-107,-105,-103,-109,-102,-65,-64,-63,-62,165,-130,-48,-135,-57,-66,-67,-55,194,-41,-112,-46,199,-45,-53,-68,-47,-42,]),'GT':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,96,97,101,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,135,136,137,139,147,148,159,162,163,164,165,168,184,187,192,201,221,228,],[-119,-120,-124,-125,-108,-122,86,-123,-122,86,-121,86,-126,86,86,-118,86,86,-117,-116,-113,-54,-56,143,-114,-115,86,-111,86,-131,-127,86,-104,-106,-101,-110,-107,-105,-103,-109,-102,-65,-64,-63,-62,-130,86,-57,-66,-67,86,-55,-112,86,86,-68,86,86,86,]),'ARROW':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,94,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,133,145,147,148,161,164,168,172,184,187,196,201,221,228,],[-119,-120,-124,-125,-108,-122,85,-123,-122,85,-121,85,-126,85,85,85,85,85,-117,-116,85,131,85,85,85,-111,85,-131,-127,85,85,85,85,-110,85,85,85,85,85,-58,175,-130,85,-59,85,85,-8,85,85,-9,85,85,85,]),'ELIF':([152,203,223,],[182,-98,182,]),'NE':([4,6,9,11,19,21,37,49,62,63,64,66,67,68,71,72,78,79,84,89,92,102,104,106,107,108,109,112,121,122,123,124,125,126,127,128,129,130,147,148,164,168,184,187,201,221,228,],[-119,-120,-124,-125,-108,-122,90,-123,-122,90,-121,90,-126,90,90,-118,90,90,-117,-116,-113,-114,-115,90,-111,90,-131,-127,90,-104,-106,-101,-110,-107,-105,-103,-109,-102,-130,90,90,-112,90,90,90,90,90,]),'MINUS':([0,3,4,6,9,10,11,12,13,15,16,19,20,21,25,28,31,32,34,37,39,44,46,49,50,51,52,53,56,61,62,63,64,65,66,67,68,71,72,74,75,78,79,80,81,82,83,84,86,87,88,89,90,91,92,102,104,105,106,107,108,109,112,113,121,122,123,124,125,126,127,128,129,130,140,143,146,147,148,152,153,154,155,157,158,164,168,181,182,184,185,186,187,189,198,201,203,204,210,215,217,221,222,223,225,227,228,],[51,51,-119,-120,-124,51,-125,51,-5,51,51,-108,51,-122,-74,-15,51,-75,51,91,51,-16,51,-123,-73,51,-76,-6,-77,51,-122,91,-121,51,91,-126,91,91,-118,-3,-4,91,91,51,51,51,51,-117,51,51,51,-116,51,51,-113,-114,-115,-17,91,-111,91,-131,-127,51,91,-104,91,-101,-110,91,91,-103,91,-102,51,51,51,-130,91,-82,51,51,51,-87,-79,91,91,-83,51,91,51,-99,91,-80,-7,91,-98,-100,51,-84,-88,91,-81,-85,51,-86,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'empty':([0,150,],[1,178,]),'if_orelse':([152,223,],[181,227,]),'param_list_contents':([95,],[132,]),'var_decl':([0,20,114,144,154,180,185,195,],[5,5,149,169,5,200,5,169,]),'pass':([0,20,154,185,],[22,22,22,22,]),'func_decl':([0,20,154,185,],[7,7,7,7,]),'module':([0,],[8,]),'switch_stmts':([188,],[206,]),'enum_decl':([0,20,154,185,],[57,57,57,57,]),'case':([188,207,],[208,218,]),'default':([188,207,],[209,219,]),'if_stmt':([0,20,154,185,],[50,50,50,50,]),'param_type_list':([41,45,76,95,99,131,160,175,],[94,94,94,94,94,94,94,94,]),'struct_decl':([0,20,154,185,],[23,23,23,23,]),'ifndef_stmt':([0,20,154,185,],[55,55,55,55,]),'enum_decl_stmt':([0,20,154,185,],[18,18,18,18,]),'power':([0,3,10,12,15,16,20,31,34,39,46,51,61,65,80,81,82,83,86,87,88,90,91,113,140,143,146,153,154,155,182,185,210,225,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'stmt_list':([0,],[20,]),'while_orelse':([158,],[189,]),'stmt':([0,20,154,185,],[53,75,186,204,]),'array_contents':([12,],[69,]),'inline_func_decl':([41,45,76,95,99,131,160,175,],[97,97,97,97,97,97,97,97,]),'array':([98,101,116,134,139,141,159,191,197,],[136,136,136,136,136,136,136,136,136,]),'var_decl_stmt':([0,20,154,185,],[24,24,24,24,]),'case_list':([188,],[207,]),'while_stmt':([0,20,154,185,],[25,25,25,25,]),'argument':([65,146,],[111,177,]),'stmts':([154,],[185,]),'define_stmt':([0,20,154,185,],[27,27,27,27,]),'optional_comma':([150,],[179,]),'simple_stmt':([0,20,154,185,],[28,28,28,28,]),'suite':([77,115,120,176,202,211,214,216,226,],[118,152,158,198,215,222,223,224,229,]),'assign_stmt':([0,20,154,185,],[29,29,29,29,]),'struct_decl_stmt':([0,20,154,185,],[30,30,30,30,]),'dowhile_stmt':([0,20,154,185,],[32,32,32,32,]),'arglist':([65,],[110,]),'endif_stmt':([0,20,154,185,],[33,33,33,33,]),'parameters':([103,],[145,]),'enum_name_list':([142,],[166,]),'include_stmt':([0,20,154,185,],[35,35,35,35,]),'varaglist_elem':([144,195,],[173,213,]),'case_expr_list':([210,],[220,]),'type_declaration':([41,45,76,95,99,131,160,175,],[98,101,116,134,141,159,191,197,]),'expr':([0,3,10,12,15,16,20,31,34,39,46,51,61,65,80,81,82,83,86,87,88,90,91,113,140,143,146,153,154,155,182,185,210,225,],[37,63,66,68,71,72,37,78,79,92,102,104,106,108,121,122,123,124,126,127,128,129,130,148,164,168,108,184,37,187,201,37,221,228,]),'trailer':([6,],[64,]),'expr_stmt':([0,20,154,185,],[42,42,42,42,]),'small_stmt':([0,20,154,185,],[58,58,58,58,]),'atom':([0,3,10,12,15,16,20,31,34,39,46,51,61,65,80,81,82,83,86,87,88,90,91,113,140,143,146,153,154,155,182,185,210,225,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_decl_list':([114,],[150,]),'varargslist':([144,],[171,]),'switch_suite':([119,],[157,]),'bracket_list':([98,101,116,134,141,159,191,197,],[139,139,139,139,139,139,139,139,]),'switch_stmt':([0,20,154,185,],[52,52,52,52,]),'pointer_or_array':([98,101,116,134,139,141,159,191,197,],[135,135,135,135,162,135,135,135,135,]),'typedef_stmt':([0,20,154,185,],[54,54,54,54,]),'funcdef':([0,20,154,185,],[56,56,56,56,]),'compound_stmt':([0,20,154,185,],[44,44,44,44,]),'return_stmt':([0,20,154,185,],[59,59,59,59,]),'break':([0,20,154,185,],[60,60,60,60,]),'pointer':([98,101,116,134,139,141,159,191,197,],[137,137,137,137,137,137,137,137,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',45),
  ('module -> empty','module',1,'p_empty_module','cparse.py',49),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',54),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',58),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',62),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',66),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',71),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',76),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',80),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',84),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',88),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',93),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',97),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',101),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',110),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',114),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',133),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',139),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',143),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',147),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',151),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',155),
  ('break -> BREAK','break',1,'p_break','cparse.py',159),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',164),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',168),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',172),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',176),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',182),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',186),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',190),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',196),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',200),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',205),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',211),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',215),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',220),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',225),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',230),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',234),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',241),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',245),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',249),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',253),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',257),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',261),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',267),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',283),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',284),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',288),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',292),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',296),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',300),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',304),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',308),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',313),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',317),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',323),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',324),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',325),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',326),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',327),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',335),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',340),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',344),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',348),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',354),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',358),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',362),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',366),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',370),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',375),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',379),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',383),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',387),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',391),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',395),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',399),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',403),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',407),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',411),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',415),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',420),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',424),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',428),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',436),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',440),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',444),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',448),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',452),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',456),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',460),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',464),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',468),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',472),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',476),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',480),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',484),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',488),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',492),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',496),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',500),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',504),
  ('expr -> NULL','expr',1,'p_null','cparse.py',512),
  ('power -> atom','power',1,'p_power_1','cparse.py',516),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',520),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',524),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',528),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',532),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',536),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',540),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',544),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',548),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',552),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',556),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',560),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',570),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',574),
  ('argument -> expr','argument',1,'p_argument','cparse.py',578),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',582),
]
