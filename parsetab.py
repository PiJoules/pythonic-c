
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTrightAMPleftARROWINCDECAMP ARROW ASSIGN BREAK CASE CHAR COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom LPAR RPARpower : atom LPAR arglist RPARexpr : expr LBRACKET expr RBRACKETexpr : AMP expratom : NAMEexpr : INTexpr : FLOATexpr : STRINGexpr : CHARatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'ASSIGN':([2,7,16,25,32,35,36,49,58,63,67,71,74,82,83,90,99,102,105,106,114,115,117,119,121,122,123,124,125,126,127,128,130,131,138,143,144,150,153,154,156,157,164,165,183,],[69,-125,-108,-127,-129,-128,-120,-119,-126,-56,-54,-116,-117,-124,-125,-118,-130,-114,-115,-113,-62,-64,-65,-63,-110,-109,-105,-103,-107,-101,-106,-102,-104,158,-121,-111,-131,-57,-55,-66,-67,-123,-112,-122,-68,]),'AMP':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[3,3,-77,-16,-73,-74,3,3,-108,-76,-127,3,-129,-128,-120,-15,3,-6,3,3,3,-119,3,3,-75,-5,3,-126,3,3,-116,3,3,-117,3,3,3,3,3,3,3,-124,-125,-4,-3,-118,3,-130,-114,3,-115,-113,-17,3,-110,-109,-105,-103,-107,-101,-106,-102,-104,3,-121,-111,-131,3,-123,3,3,3,-112,-122,3,-87,-82,-79,-99,3,-78,-7,3,-83,-80,-100,-98,3,-88,-84,-81,3,-85,-86,]),'STRUCT':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[17,-77,-16,-73,-74,17,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,17,-112,-122,-87,-82,-79,-99,17,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'NE':([2,7,16,25,32,35,36,49,58,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,155,157,164,165,177,184,187,215,221,233,],[72,-125,-108,-127,-129,-128,-120,-119,-126,-116,-117,-124,-125,72,-118,72,72,72,-130,72,-114,72,-115,-113,72,-110,-109,-105,-103,-107,-101,-106,-102,72,-104,72,-121,-111,-131,72,72,-123,-112,-122,72,72,72,72,72,72,]),'STRING':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,45,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[35,35,-77,-16,-73,-74,35,35,-108,-76,-127,35,-129,-128,-120,-15,35,-6,35,97,35,35,-119,35,35,-75,-5,35,-126,35,35,-116,35,35,-117,35,35,35,35,35,35,35,-124,-125,-4,-3,-118,35,-130,-114,35,-115,-113,-17,35,-110,-109,-105,-103,-107,-101,-106,-102,-104,35,-121,-111,-131,35,-123,35,35,35,-112,-122,35,-87,-82,-79,-99,35,-78,-7,35,-83,-80,-100,-98,35,-88,-84,-81,35,-85,-86,]),'DEC':([2,7,16,25,32,35,36,49,58,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,155,157,164,165,177,184,187,215,221,233,],[74,-125,-108,-127,-129,-128,-120,-119,-126,-116,-117,74,-125,74,74,74,74,74,-130,74,74,74,74,74,74,-110,74,74,74,74,74,74,74,74,74,74,-121,-111,-131,74,74,-123,74,-122,74,74,74,74,74,74,]),'ELLIPSIS':([141,195,],[171,171,]),'DEFINE':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[52,-77,-16,-73,-74,52,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,52,-112,-122,-87,-82,-79,-99,52,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'DEF':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[37,-77,-16,-73,-74,37,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,37,-112,-122,-87,-82,-79,-99,37,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'RBRACE':([16,25,32,35,36,49,58,63,67,71,74,82,83,90,99,102,105,106,113,114,115,117,119,121,122,123,124,125,126,127,128,130,131,138,143,144,150,153,154,156,157,161,163,164,165,180,181,183,184,188,189,190,206,218,],[-108,-127,-129,-128,-120,-119,-126,-56,-54,-116,-117,-124,-125,-118,-130,-114,-115,-113,153,-62,-64,-65,-63,-110,-109,-105,-103,-107,-101,-106,-102,-104,-52,-121,-111,-131,-57,-55,-66,-67,-123,-137,-48,-112,-122,-41,202,-68,-53,-45,207,-46,-47,-42,]),'NAME':([0,1,3,4,6,8,12,14,15,16,17,24,25,26,30,32,35,36,37,38,39,40,43,44,46,47,49,50,51,52,53,55,57,58,59,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,88,90,92,99,102,104,105,106,107,109,114,115,116,117,119,121,122,123,124,125,126,127,128,130,134,135,138,141,143,144,145,149,150,152,153,154,156,157,158,159,160,164,165,166,167,175,178,179,183,185,186,187,188,193,195,197,199,200,203,204,205,212,219,226,227,230,231,234,],[7,67,83,-77,-16,-73,-74,83,7,-108,89,-76,-127,83,67,-129,-128,-120,93,-15,94,83,-6,83,83,83,-119,83,83,104,-75,-5,83,-126,83,108,-56,67,67,-54,118,83,121,-116,83,83,-117,83,83,83,83,83,83,83,-124,-125,67,-4,-3,-118,83,-130,-114,83,-115,-113,-17,67,-62,-64,83,-65,-63,-110,-109,-105,-103,-107,-101,-106,-102,-104,162,83,-121,173,-111,-131,83,180,-57,67,-55,-66,-67,-123,83,7,83,-112,-122,83,67,-87,-82,-79,-68,-99,7,-78,162,-7,173,83,-83,-80,218,-100,-98,83,-88,-84,-81,83,-85,-86,]),'IFNDEF':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[39,-77,-16,-73,-74,39,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,39,-112,-122,-87,-82,-79,-99,39,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'RBRACKET':([16,25,32,35,36,46,49,58,71,74,82,83,90,98,99,100,102,105,106,116,121,122,123,124,125,126,127,128,129,130,138,143,144,155,157,164,165,177,],[-108,-127,-129,-128,-120,99,-119,-126,-116,-117,-124,-125,-118,-132,-130,144,-114,-115,-113,156,-110,-109,-105,-103,-107,-101,-106,-102,157,-104,-121,-111,-131,183,-123,-112,-122,-133,]),'SWITCH':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[40,-77,-16,-73,-74,40,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,40,-112,-122,-87,-82,-79,-99,40,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'COLON':([7,9,16,25,32,35,36,49,58,71,74,82,83,90,95,99,101,102,103,105,106,121,122,123,124,125,126,127,128,130,138,140,143,144,157,162,164,165,170,173,194,198,201,210,215,221,222,233,],[84,85,-108,-127,-129,-128,-120,-119,-126,-116,-117,-124,-125,-118,142,-130,146,-114,147,-115,-113,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,168,-111,-131,-123,84,-112,-122,-8,84,-9,216,217,220,225,-96,229,-97,]),'TYPEDEF':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[1,-77,-16,-73,-74,1,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,1,-112,-122,-87,-82,-79,-99,1,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'EQ':([2,7,16,25,32,35,36,49,58,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,155,157,164,165,177,184,187,215,221,233,],[73,-125,-108,-127,-129,-128,-120,-119,-126,-116,-117,-124,-125,73,-118,73,73,73,-130,73,-114,73,-115,-113,73,-110,-109,-105,-103,-107,-101,-106,-102,73,-104,73,-121,-111,-131,73,73,-123,-112,-122,73,73,73,73,73,73,]),'INT':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[58,58,-77,-16,-73,-74,58,58,-108,-76,-127,58,-129,-128,-120,-15,58,-6,58,58,58,-119,58,58,-75,-5,58,-126,58,58,-116,58,58,-117,58,58,58,58,58,58,58,-124,-125,-4,-3,-118,58,-130,-114,58,-115,-113,-17,58,-110,-109,-105,-103,-107,-101,-106,-102,-104,58,-121,-111,-131,58,-123,58,58,58,-112,-122,58,-87,-82,-79,-99,58,-78,-7,58,-83,-80,-100,-98,58,-88,-84,-81,58,-85,-86,]),'RPAR':([16,25,32,35,36,49,58,63,65,67,71,74,82,83,90,92,96,99,102,105,106,110,112,114,115,117,119,121,122,123,124,125,126,127,128,130,131,136,137,138,139,141,143,144,150,153,154,156,157,164,165,169,171,172,173,174,182,183,184,191,208,],[-108,-127,-129,-128,-120,-119,-126,-56,111,-54,-116,-117,-124,-125,-118,138,143,-130,-114,-115,-113,151,-60,-62,-64,-65,-63,-110,-109,-105,-103,-107,-101,-106,-102,-104,-52,-136,165,-121,-135,170,-111,-131,-57,-55,-66,-67,-123,-112,-122,194,-13,-10,-11,-12,-61,-68,-53,-134,-14,]),'ARROW':([2,7,16,25,32,35,36,49,58,64,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,111,120,121,122,123,124,125,126,127,128,129,130,136,138,140,143,144,148,151,155,157,164,165,170,177,184,187,194,215,221,233,],[70,-125,-108,-127,-129,-128,-120,-119,-126,109,-116,-117,70,-125,70,70,70,70,70,-130,70,70,70,70,70,-58,70,-110,70,70,70,70,70,70,70,70,70,70,-121,167,-111,-131,70,-59,70,-123,70,-122,-8,70,70,70,-9,70,70,70,]),'INCLUDE':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[45,-77,-16,-73,-74,45,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,45,-112,-122,-87,-82,-79,-99,45,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'RETURN':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[14,-77,-16,-73,-74,14,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,14,-112,-122,-87,-82,-79,-99,14,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'BREAK':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[28,-77,-16,-73,-74,28,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,28,-112,-122,-87,-82,-79,-99,28,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'LBRACKET':([0,2,3,4,6,7,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,63,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,90,91,92,95,96,98,99,101,102,103,104,105,106,107,112,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,135,136,138,143,144,145,148,150,153,154,155,156,157,158,159,160,164,165,166,175,177,178,179,182,183,184,185,186,187,192,193,197,199,200,204,205,212,215,219,221,226,227,230,231,233,234,],[46,80,46,-77,-16,-125,-73,-74,46,46,-108,-76,-127,46,-129,-128,-120,-15,46,-6,46,46,46,-119,46,46,-75,-5,46,-126,46,-56,-54,116,46,-116,46,46,-117,46,46,46,46,46,46,46,-124,-125,80,-4,-3,-118,116,46,80,80,80,-130,80,-114,80,46,-115,-113,-17,116,116,116,-64,46,-65,-63,80,-110,-109,-105,-103,-107,-101,-106,-102,80,-104,116,46,80,-121,-111,-131,46,80,-57,-55,-66,80,-67,-123,46,46,46,-112,-122,46,-87,80,-82,-79,116,-68,80,-99,46,80,116,-7,46,-83,-80,-100,-98,46,80,-88,80,-84,-81,46,-85,80,-86,]),'IF':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[47,-77,-16,-73,-74,47,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,47,-112,-122,-87,-82,-79,-99,47,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'DO':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[9,-77,-16,-73,-74,9,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,9,-112,-122,-87,-82,-79,-99,9,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'ELIF':([178,205,231,],[197,-98,197,]),'LPAR':([0,1,3,4,6,7,8,12,14,15,16,24,25,26,30,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,65,66,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,88,90,92,93,99,102,104,105,106,107,109,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,152,157,158,159,160,164,165,166,167,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[44,65,44,-77,-16,-125,-73,-74,44,44,-108,-76,-127,44,65,-129,-128,92,-15,44,-6,44,44,44,-119,44,44,-75,-5,44,-126,44,65,65,44,-116,44,44,-117,44,44,44,44,44,44,44,-124,-125,65,-4,-3,-118,44,141,-130,-114,44,-115,-113,-17,65,44,-110,-109,-105,-103,-107,-101,-106,-102,-104,44,-121,-111,-131,44,65,-123,44,44,44,-112,-122,44,65,-87,-82,-79,-99,44,-78,-7,44,-83,-80,-100,-98,44,-88,-84,-81,44,-85,-86,]),'NULL':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[49,49,-77,-16,-73,-74,49,49,-108,-76,-127,49,-129,-128,-120,-15,49,-6,49,49,49,-119,49,49,-75,-5,49,-126,49,49,-116,49,49,-117,49,49,49,49,49,49,49,-124,-125,-4,-3,-118,49,-130,-114,49,-115,-113,-17,49,-110,-109,-105,-103,-107,-101,-106,-102,-104,49,-121,-111,-131,49,-123,49,49,49,-112,-122,49,-87,-82,-79,-99,49,-78,-7,49,-83,-80,-100,-98,49,-88,-84,-81,49,-85,-86,]),'LBRACE':([1,30,65,66,84,89,108,109,152,167,],[66,66,66,66,66,134,149,66,66,66,]),'PLUS':([0,2,3,4,6,7,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,90,92,95,96,98,99,101,102,103,104,105,106,107,116,120,121,122,123,124,125,126,127,128,129,130,135,136,138,143,144,145,148,155,157,158,159,160,164,165,166,175,177,178,179,184,185,186,187,193,197,199,200,204,205,212,215,219,221,226,227,230,231,233,234,],[50,77,50,-77,-16,-125,-73,-74,50,50,-108,-76,-127,50,-129,-128,-120,-15,50,-6,50,50,50,-119,50,50,-75,-5,50,-126,50,50,-116,50,50,-117,50,50,50,50,50,50,50,-124,-125,77,-4,-3,-118,50,77,77,77,-130,77,-114,77,50,-115,-113,-17,50,77,-110,77,77,-103,77,-101,77,-102,77,-104,50,77,-121,-111,-131,50,77,77,-123,50,50,50,77,-122,50,-87,77,-82,-79,77,-99,50,77,-7,50,-83,-80,-100,-98,50,77,-88,77,-84,-81,50,-85,77,-86,]),'INDENT':([132,176,],[159,196,]),'WHILE':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,133,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[51,-77,-16,-73,-74,51,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,160,-121,-111,-131,-123,51,-112,-122,-87,-82,-79,-99,51,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'FLOAT':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[25,25,-77,-16,-73,-74,25,25,-108,-76,-127,25,-129,-128,-120,-15,25,-6,25,25,25,-119,25,25,-75,-5,25,-126,25,25,-116,25,25,-117,25,25,25,25,25,25,25,-124,-125,-4,-3,-118,25,-130,-114,25,-115,-113,-17,25,-110,-109,-105,-103,-107,-101,-106,-102,-104,25,-121,-111,-131,25,-123,25,25,25,-112,-122,25,-87,-82,-79,-99,25,-78,-7,25,-83,-80,-100,-98,25,-88,-84,-81,25,-85,-86,]),'NOT':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[26,26,-77,-16,-73,-74,26,26,-108,-76,-127,26,-129,-128,-120,-15,26,-6,26,26,26,-119,26,26,-75,-5,26,-126,26,26,-116,26,26,-117,26,26,26,26,26,26,26,-124,-125,-4,-3,-118,26,-130,-114,26,-115,-113,-17,26,-110,-109,-105,-103,-107,-101,-106,-102,-104,26,-121,-111,-131,26,-123,26,26,26,-112,-122,26,-87,-82,-79,-99,26,-78,-7,26,-83,-80,-100,-98,26,-88,-84,-81,26,-85,-86,]),'CASE':([196,205,211,214,223,232,],[212,-98,-93,212,-94,-95,]),'INC':([2,7,16,25,32,35,36,49,58,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,155,157,164,165,177,184,187,215,221,233,],[71,-125,-108,-127,-129,-128,-120,-119,-126,-116,-117,71,-125,71,71,71,71,71,-130,71,71,71,71,71,71,-110,71,71,71,71,71,71,71,71,71,71,-121,-111,-131,71,71,-123,71,-122,71,71,71,71,71,71,]),'NEWLINE':([0,2,4,5,6,7,8,10,11,12,13,15,16,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,38,41,42,43,48,49,53,55,56,58,60,61,63,67,71,74,82,83,85,86,87,88,90,94,97,99,102,104,105,106,107,114,115,117,118,119,120,121,122,123,124,125,126,127,128,130,131,138,140,142,143,144,146,147,148,150,153,154,156,157,164,165,168,170,175,178,179,183,184,187,192,193,194,199,200,202,205,207,216,217,219,220,225,226,227,229,231,234,],[55,-70,-77,-31,-16,-125,-73,-26,-21,-74,-23,88,-108,-43,-18,-30,-22,-25,-28,-76,-127,-36,-38,-39,-129,-20,-24,-128,-120,-15,-19,-29,-6,-27,-119,-75,-5,-37,-126,-51,107,-56,-54,-116,-117,-124,-125,132,-72,-4,-3,-118,-35,-69,-130,-114,-34,-115,-113,-17,-62,-64,-65,-32,-63,-71,-110,-109,-105,-103,-107,-101,-106,-102,-104,-52,-121,-49,176,-111,-131,132,132,-33,-57,-55,-66,-67,-123,-112,-122,132,-8,-87,-82,-79,-68,-53,-78,-50,-7,-9,-83,-80,-40,-98,-44,132,132,-88,132,132,-84,-81,132,-85,-86,]),'$end':([0,4,6,8,12,15,16,24,25,29,32,35,36,38,43,49,53,54,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,164,165,175,178,179,187,193,199,200,205,219,226,227,231,234,],[-137,-77,-16,-73,-74,-1,-108,-76,-127,-2,-129,-128,-120,-15,-6,-119,-75,0,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,-112,-122,-87,-82,-79,-78,-7,-83,-80,-98,-88,-84,-81,-85,-86,]),'COMMA':([16,25,32,35,36,49,58,63,67,71,74,82,83,90,98,99,100,102,105,106,110,112,114,115,117,119,121,122,123,124,125,126,127,128,130,131,136,137,138,139,143,144,150,153,154,156,157,161,163,164,165,169,171,172,173,174,177,180,181,182,183,184,191,206,208,218,221,222,233,],[-108,-127,-129,-128,-120,-119,-126,-56,-54,-116,-117,-124,-125,-118,-132,-130,145,-114,-115,-113,152,-60,-62,-64,-65,-63,-110,-109,-105,-103,-107,-101,-106,-102,-104,-52,-136,166,-121,-135,-111,-131,-57,-55,-66,-67,-123,188,-48,-112,-122,195,-13,-10,-11,-12,-133,-41,203,-61,-68,-53,-134,-47,-14,-42,-96,230,-97,]),'PASS':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[56,-77,-16,-73,-74,56,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,56,-112,-122,-87,-82,-79,-99,56,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'ELSE':([178,179,196,205,211,214,223,231,232,],[198,201,210,-98,-93,210,-94,198,-95,]),'ENDIF':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[27,-77,-16,-73,-74,27,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,27,-112,-122,-87,-82,-79,-99,27,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'CHAR':([0,3,4,6,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,90,92,99,102,104,105,106,107,116,121,122,123,124,125,126,127,128,130,135,138,143,144,145,157,158,159,160,164,165,166,175,178,179,185,186,187,193,197,199,200,204,205,212,219,226,227,230,231,234,],[32,32,-77,-16,-73,-74,32,32,-108,-76,-127,32,-129,-128,-120,-15,32,-6,32,32,32,-119,32,32,-75,-5,32,-126,32,32,-116,32,32,-117,32,32,32,32,32,32,32,-124,-125,-4,-3,-118,32,-130,-114,32,-115,-113,-17,32,-110,-109,-105,-103,-107,-101,-106,-102,-104,32,-121,-111,-131,32,-123,32,32,32,-112,-122,32,-87,-82,-79,-99,32,-78,-7,32,-83,-80,-100,-98,32,-88,-84,-81,32,-85,-86,]),'DEDENT':([4,6,8,12,16,24,25,32,35,36,38,49,53,58,71,74,82,83,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,164,165,175,178,179,185,186,187,193,199,200,204,205,209,211,213,214,219,223,224,226,227,228,231,232,234,],[-77,-16,-73,-74,-108,-76,-127,-129,-128,-120,-15,-119,-75,-126,-116,-117,-124,-125,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,-112,-122,-87,-82,-79,-99,205,-78,-7,-83,-80,-100,-98,219,-93,-91,-89,-88,-94,-90,-84,-81,-92,-85,-95,-86,]),'MULT':([0,2,3,4,6,7,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,90,92,95,96,98,99,101,102,103,104,105,106,107,116,120,121,122,123,124,125,126,127,128,129,130,135,136,138,143,144,145,148,155,157,158,159,160,164,165,166,175,177,178,179,184,185,186,187,193,197,199,200,204,205,212,215,219,221,226,227,230,231,233,234,],[59,75,59,-77,-16,-125,-73,-74,59,59,-108,-76,-127,59,-129,-128,-120,-15,59,-6,59,59,59,-119,59,59,-75,-5,59,-126,59,59,-116,59,59,-117,59,59,59,59,59,59,59,-124,-125,75,-4,-3,-118,59,75,75,75,-130,75,75,75,59,75,-113,-17,59,75,-110,75,75,-103,75,75,75,75,75,-104,59,75,-121,-111,-131,59,75,75,-123,59,59,59,75,-122,59,-87,75,-82,-79,75,-99,59,75,-7,59,-83,-80,-100,-98,59,75,-88,75,-84,-81,59,-85,75,-86,]),'GT':([2,7,16,25,32,35,36,49,58,63,67,71,74,82,83,86,90,91,95,96,98,99,101,102,103,105,106,114,115,117,119,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,150,153,154,155,156,157,164,165,177,183,184,187,215,221,233,],[76,-125,-108,-127,-129,-128,-120,-119,-126,-56,-54,-116,-117,-124,-125,76,-118,135,76,76,76,-130,76,-114,76,-115,-113,-62,-64,-65,-63,76,-110,-109,-105,-103,-107,-101,-106,-102,76,-104,76,-121,-111,-131,76,-57,-55,-66,76,-67,-123,-112,-122,76,-68,76,76,76,76,76,]),'LT':([0,2,3,4,6,7,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,90,92,95,96,98,99,101,102,103,104,105,106,107,116,120,121,122,123,124,125,126,127,128,129,130,135,136,138,143,144,145,148,155,157,158,159,160,164,165,166,175,177,178,179,184,185,186,187,193,197,199,200,204,205,212,215,219,221,226,227,230,231,233,234,],[30,78,30,-77,-16,-125,-73,-74,30,30,-108,-76,-127,30,-129,-128,-120,-15,30,-6,30,30,30,-119,30,30,-75,-5,30,-126,30,30,-116,30,30,-117,30,30,30,30,30,30,30,-124,-125,78,-4,-3,-118,30,78,78,78,-130,78,-114,78,30,-115,-113,-17,30,78,-110,-109,-105,-103,-107,-101,-106,-102,78,-104,30,78,-121,-111,-131,30,78,78,-123,30,30,30,-112,-122,30,-87,78,-82,-79,78,-99,30,78,-7,30,-83,-80,-100,-98,30,78,-88,78,-84,-81,30,-85,78,-86,]),'ENUM':([0,4,6,8,12,15,16,24,25,32,35,36,38,43,49,53,55,58,71,74,82,83,87,88,90,99,102,105,106,107,121,122,123,124,125,126,127,128,130,138,143,144,157,159,164,165,175,178,179,185,186,187,193,199,200,204,205,219,226,227,231,234,],[62,-77,-16,-73,-74,62,-108,-76,-127,-129,-128,-120,-15,-6,-119,-75,-5,-126,-116,-117,-124,-125,-4,-3,-118,-130,-114,-115,-113,-17,-110,-109,-105,-103,-107,-101,-106,-102,-104,-121,-111,-131,-123,62,-112,-122,-87,-82,-79,-99,62,-78,-7,-83,-80,-100,-98,-88,-84,-81,-85,-86,]),'MINUS':([0,2,3,4,6,7,8,12,14,15,16,24,25,26,32,35,36,38,40,43,44,46,47,49,50,51,53,55,57,58,59,69,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,88,90,92,95,96,98,99,101,102,103,104,105,106,107,116,120,121,122,123,124,125,126,127,128,129,130,135,136,138,143,144,145,148,155,157,158,159,160,164,165,166,175,177,178,179,184,185,186,187,193,197,199,200,204,205,212,215,219,221,226,227,230,231,233,234,],[57,79,57,-77,-16,-125,-73,-74,57,57,-108,-76,-127,57,-129,-128,-120,-15,57,-6,57,57,57,-119,57,57,-75,-5,57,-126,57,57,-116,57,57,-117,57,57,57,57,57,57,57,-124,-125,79,-4,-3,-118,57,79,79,79,-130,79,-114,79,57,-115,-113,-17,57,79,-110,79,79,-103,79,-101,79,-102,79,-104,57,79,-121,-111,-131,57,79,79,-123,57,57,57,79,-122,57,-87,79,-82,-79,79,-99,57,79,-7,57,-83,-80,-100,-98,57,79,-88,79,-84,-81,57,-85,79,-86,]),'DIV':([2,7,16,25,32,35,36,49,58,71,74,82,83,86,90,95,96,98,99,101,102,103,105,106,120,121,122,123,124,125,126,127,128,129,130,136,138,143,144,148,155,157,164,165,177,184,187,215,221,233,],[81,-125,-108,-127,-129,-128,-120,-119,-126,-116,-117,-124,-125,81,-118,81,81,81,-130,81,81,81,81,-113,81,-110,81,81,-103,81,81,81,81,81,-104,81,-121,-111,-131,81,81,-123,81,-122,81,81,81,81,81,81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'switch_stmts':([196,],[209,]),'expr':([0,3,14,15,26,40,44,46,47,50,51,57,59,69,72,73,75,76,77,78,79,80,81,92,104,116,135,145,158,159,160,166,186,197,212,230,],[2,82,86,2,90,95,96,98,101,102,103,105,106,120,122,123,124,125,126,127,128,129,130,136,148,155,164,177,184,2,187,136,2,215,221,233,]),'assign_stmt':([0,15,159,186,],[34,34,34,34,]),'atom':([0,3,14,15,26,40,44,46,47,50,51,57,59,69,72,73,75,76,77,78,79,80,81,92,104,116,135,145,158,159,160,166,186,197,212,230,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'simple_stmt':([0,15,159,186,],[38,38,38,38,]),'varaglist_elem':([141,195,],[172,208,]),'pass':([0,15,159,186,],[5,5,5,5,]),'optional_comma':([161,],[189,]),'compound_stmt':([0,15,159,186,],[6,6,6,6,]),'enum_name_list':([149,],[181,]),'dowhile_stmt':([0,15,159,186,],[53,53,53,53,]),'include_stmt':([0,15,159,186,],[41,41,41,41,]),'while_orelse':([179,],[200,]),'typedef_stmt':([0,15,159,186,],[42,42,42,42,]),'case':([196,214,],[211,223,]),'var_decl_stmt':([0,15,159,186,],[10,10,10,10,]),'struct_decl_list':([134,],[161,]),'while_stmt':([0,15,159,186,],[12,12,12,12,]),'stmt':([0,15,159,186,],[43,87,185,204,]),'define_stmt':([0,15,159,186,],[33,33,33,33,]),'expr_stmt':([0,15,159,186,],[13,13,13,13,]),'arglist':([92,],[137,]),'pointer_or_array':([68,91,112,113,114,131,150,182,192,],[117,117,117,117,154,117,117,117,117,]),'stmt_list':([0,],[15,]),'param_type_list':([1,30,65,66,84,109,152,167,],[64,64,64,64,64,64,64,64,]),'power':([0,3,14,15,26,40,44,46,47,50,51,57,59,69,72,73,75,76,77,78,79,80,81,92,104,116,135,145,158,159,160,166,186,197,212,230,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'bracket_list':([68,91,112,113,131,150,182,192,],[114,114,114,114,114,114,114,114,]),'struct_decl':([0,15,159,186,],[18,18,18,18,]),'param_list_contents':([65,],[110,]),'return_stmt':([0,15,159,186,],[19,19,19,19,]),'break':([0,15,159,186,],[20,20,20,20,]),'switch_suite':([142,],[175,]),'small_stmt':([0,15,159,186,],[61,61,61,61,]),'enum_decl_stmt':([0,15,159,186,],[48,48,48,48,]),'endif_stmt':([0,15,159,186,],[21,21,21,21,]),'case_expr_list':([212,],[222,]),'func_decl':([0,15,159,186,],[22,22,22,22,]),'array':([68,91,112,113,114,131,150,182,192,],[115,115,115,115,115,115,115,115,115,]),'struct_decl_stmt':([0,15,159,186,],[23,23,23,23,]),'default':([196,214,],[213,224,]),'switch_stmt':([0,15,159,186,],[24,24,24,24,]),'funcdef':([0,15,159,186,],[4,4,4,4,]),'if_stmt':([0,15,159,186,],[8,8,8,8,]),'type_declaration':([1,30,65,66,84,109,152,167,],[68,91,112,113,131,150,182,192,]),'module':([0,],[54,]),'suite':([85,146,147,168,216,217,220,225,229,],[133,178,179,193,226,227,228,231,232,]),'stmts':([159,],[186,]),'argument':([92,166,],[139,191,]),'varargslist':([141,],[169,]),'pointer':([68,91,112,113,114,131,150,182,192,],[119,119,119,119,119,119,119,119,119,]),'if_orelse':([178,231,],[199,234,]),'ifndef_stmt':([0,15,159,186,],[11,11,11,11,]),'inline_func_decl':([1,30,65,66,84,109,152,167,],[63,63,63,63,63,63,63,63,]),'empty':([0,161,],[29,190,]),'enum_decl':([0,15,159,186,],[31,31,31,31,]),'parameters':([93,],[140,]),'array_contents':([46,],[100,]),'case_list':([196,],[214,]),'var_decl':([0,15,134,141,159,186,188,195,],[60,60,163,174,60,60,206,174,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',46),
  ('module -> empty','module',1,'p_empty_module','cparse.py',50),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',55),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',59),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',63),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',67),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',72),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',77),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',81),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',85),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',90),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',94),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',98),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',103),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',111),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',128),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',134),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',140),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',144),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',148),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',152),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',156),
  ('break -> BREAK','break',1,'p_break','cparse.py',160),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',165),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',169),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',173),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',177),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',183),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',187),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',192),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',197),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',201),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',206),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',211),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',215),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',220),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',225),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',229),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',233),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',240),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',244),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',248),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',252),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',256),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',260),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',266),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',280),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',281),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',285),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',289),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',293),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',297),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',301),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',305),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',310),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',314),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',320),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',321),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',322),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',323),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',324),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',332),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',337),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',341),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',345),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',351),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',355),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',359),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',363),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',367),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',372),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',376),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',380),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',384),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',388),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',392),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',396),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',400),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',404),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',408),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',412),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',417),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',421),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',425),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',433),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',437),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',441),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',445),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',449),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',453),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',457),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',461),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',465),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',469),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',473),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',477),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',481),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',485),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',489),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',493),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',497),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',501),
  ('expr -> NULL','expr',1,'p_null','cparse.py',505),
  ('power -> atom','power',1,'p_power_1','cparse.py',509),
  ('power -> atom LPAR RPAR','power',3,'p_power_2','cparse.py',513),
  ('power -> atom LPAR arglist RPAR','power',4,'p_power_call_args','cparse.py',517),
  ('expr -> expr LBRACKET expr RBRACKET','expr',4,'p_index','cparse.py',523),
  ('expr -> AMP expr','expr',2,'p_address_of','cparse.py',529),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',533),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',537),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',541),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',545),
  ('expr -> CHAR','expr',1,'p_atom_char','cparse.py',549),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',553),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',557),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',561),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',565),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',575),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',579),
  ('argument -> expr','argument',1,'p_argument','cparse.py',583),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',587),
]
