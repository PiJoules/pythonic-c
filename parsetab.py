
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQGTLTleftPLUSMINUSleftMULTDIVNAME NUMBER STRING LPAR RPAR LBRACKET RBRACKET COLON EQ ASSIGN ARROW LT GT PLUS MINUS MULT DIV WS NEWLINE COMMA INDENT DEDENT IF RETURN INCLUDE_LOCAL DEFINE DEF INCLUDEmodule : stmt_liststmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : NAMEvarargslist : varargslist COMMA NAMEstmt : simple_stmt\n            | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                  | include_stmt\n                  | define_stmt\n                  | expr_stmt\n                  | func_decl\n                  | var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl : NAME COLON type_declarationtype_declaration : NAMEtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                        | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET test RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : testlist ASSIGN testlist\n                 | testlist return_stmt : RETURN testlistdefine_stmt : DEFINE NAME testlistdefine_stmt : DEFINE NAMEcompound_stmt : if_stmt\n                     | funcdefif_stmt : IF test COLON suitesuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtcomparison : comparison PLUS comparison\n                  | comparison MINUS comparison\n                  | comparison MULT comparison\n                  | comparison DIV comparison\n                  | comparison LT comparison\n                  | comparison EQ comparison\n                  | comparison GT comparison\n                  | powercomparison : PLUS comparisoncomparison : MINUS comparisonpower : atompower : atom traileratom : NAMEatom : NUMBERatom : STRINGatom : LPAR testlist RPARtrailer : LPAR arglist RPARtestlist : testlist_multi COMMA\n                | testlist_multi testlist_multi : testlist_multi COMMA test\n                      | testtest : comparisonarglist : arglist COMMA argument\n               | argumentargument : test'
    
_lr_action_items = {'DEFINE':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[13,-4,13,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,13,13,-42,-41,-43,]),'GT':([5,6,21,22,25,29,38,44,46,56,67,68,69,70,71,72,73,77,83,],[-58,-51,-54,53,-56,-57,-56,-52,-55,-53,-45,-48,-44,-49,-46,-47,-50,-59,-60,]),'LT':([5,6,21,22,25,29,38,44,46,56,67,68,69,70,71,72,73,77,83,],[-58,-51,-54,48,-56,-57,-56,-52,-55,-53,-45,-48,-44,-49,-46,-47,-50,-59,-60,]),'NEWLINE':([0,1,2,3,5,6,8,9,12,14,15,16,17,18,20,21,22,24,25,26,27,28,29,31,36,37,38,39,40,41,42,43,44,46,56,58,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,82,83,85,88,89,90,91,92,94,95,98,100,104,105,],[1,-4,-18,-19,-58,-51,-34,36,-64,42,-15,-62,-11,-5,-16,-54,-65,-14,-56,-38,-17,-12,-57,-39,-2,-3,-56,-35,-31,-37,-13,-61,-52,-55,-53,-32,-20,-33,-36,-63,-45,-48,-44,-49,-46,-47,-50,86,-22,-23,-59,-7,86,-60,-40,-24,-26,-27,-25,-8,-21,-6,-29,-28,-30,-41,]),'DIV':([5,6,21,22,25,29,38,44,46,56,67,68,69,70,71,72,73,77,83,],[-58,-51,-54,52,-56,-57,-56,52,-55,52,52,52,52,52,-46,-47,52,-59,-60,]),'IF':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[23,-4,23,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,23,23,-42,-41,-43,]),'ARROW':([60,78,92,],[81,-7,-8,]),'PLUS':([0,1,5,6,9,10,17,18,19,21,22,23,25,26,28,29,30,31,32,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,56,67,68,69,70,71,72,73,77,83,84,85,87,95,97,102,103,105,106,],[19,-4,-58,-51,19,19,-11,-5,19,-54,49,19,-56,-38,-12,-57,19,-39,19,19,-2,-3,-56,19,-13,19,-52,19,-55,19,19,19,19,19,19,19,-53,-45,49,-44,49,-46,-47,49,-59,-60,19,-40,19,-6,19,19,-42,-41,-43,]),'STRING':([0,1,9,10,11,17,18,19,23,26,28,30,31,32,33,35,36,37,41,42,43,45,47,48,49,50,51,52,53,84,85,87,95,97,102,103,105,106,],[5,-4,5,5,40,-11,-5,5,5,-38,-12,5,-39,5,58,5,-2,-3,5,-13,5,5,5,5,5,5,5,5,5,5,-40,5,-6,5,5,-42,-41,-43,]),'LBRACKET':([75,76,88,89,90,91,94,98,100,104,],[87,-23,87,-26,-27,-25,87,-29,-28,-30,]),'ASSIGN':([5,6,8,12,16,21,22,25,29,38,43,44,46,56,63,67,68,69,70,71,72,73,77,83,],[-58,-51,35,-64,-62,-54,-65,-56,-57,-56,-61,-52,-55,-53,-63,-45,-48,-44,-49,-46,-47,-50,-59,-60,]),'RPAR':([5,6,12,16,21,22,29,38,43,44,46,56,57,59,63,64,65,66,67,68,69,70,71,72,73,77,79,80,83,96,101,],[-58,-51,-64,-62,-54,-65,-57,-56,-61,-52,-55,-53,77,78,-63,-67,83,-68,-45,-48,-44,-49,-46,-47,-50,-59,92,-9,-60,-66,-10,]),'COMMA':([5,6,12,16,21,22,25,29,38,44,46,56,63,64,65,66,67,68,69,70,71,72,73,77,79,80,83,96,101,],[-58,-51,-64,43,-54,-65,-56,-57,-56,-52,-55,-53,-63,-67,84,-68,-45,-48,-44,-49,-46,-47,-50,-59,93,-9,-60,-66,-10,]),'RBRACKET':([5,6,21,22,29,38,44,46,56,67,68,69,70,71,72,73,77,83,87,99,],[-58,-51,-54,-65,-57,-56,-52,-55,-53,-45,-48,-44,-49,-46,-47,-50,-59,-60,98,104,]),'EQ':([5,6,21,22,25,29,38,44,46,56,67,68,69,70,71,72,73,77,83,],[-58,-51,-54,50,-56,-57,-56,-52,-55,-53,-45,-48,-44,-49,-46,-47,-50,-59,-60,]),'NAME':([0,1,4,9,10,13,17,18,19,23,26,28,30,31,32,35,36,37,41,42,43,45,47,48,49,50,51,52,53,55,59,81,84,85,87,93,95,97,102,103,105,106,],[25,-4,34,25,38,41,-11,-5,38,38,-38,-12,38,-39,38,38,-2,-3,38,-13,38,38,38,38,38,38,38,38,38,76,80,76,38,-40,38,101,-6,25,25,-42,-41,-43,]),'DEF':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[4,-4,4,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,4,4,-42,-41,-43,]),'RETURN':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[10,-4,10,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,10,10,-42,-41,-43,]),'LPAR':([0,1,5,9,10,17,18,19,21,23,25,26,28,29,30,31,32,34,35,36,37,38,41,42,43,45,47,48,49,50,51,52,53,77,84,85,87,95,97,102,103,105,106,],[32,-4,-58,32,32,-11,-5,32,45,32,-56,-38,-12,-57,32,-39,32,59,32,-2,-3,-56,32,-13,32,32,32,32,32,32,32,32,32,-59,32,-40,32,-6,32,32,-42,-41,-43,]),'INDENT':([86,],[97,]),'INCLUDE':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[11,-4,11,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,11,11,-42,-41,-43,]),'NUMBER':([0,1,9,10,17,18,19,23,26,28,30,31,32,35,36,37,41,42,43,45,47,48,49,50,51,52,53,84,85,87,95,97,102,103,105,106,],[29,-4,29,29,-11,-5,29,29,-38,-12,29,-39,29,29,-2,-3,29,-13,29,29,29,29,29,29,29,29,29,29,-40,29,-6,29,29,-42,-41,-43,]),'MINUS':([0,1,5,6,9,10,17,18,19,21,22,23,25,26,28,29,30,31,32,35,36,37,38,41,42,43,44,45,46,47,48,49,50,51,52,53,56,67,68,69,70,71,72,73,77,83,84,85,87,95,97,102,103,105,106,],[30,-4,-58,-51,30,30,-11,-5,30,-54,47,30,-56,-38,-12,-57,30,-39,30,30,-2,-3,-56,30,-13,30,-52,30,-55,30,30,30,30,30,30,30,-53,-45,47,-44,47,-46,-47,47,-59,-60,30,-40,30,-6,30,30,-42,-41,-43,]),'MULT':([5,6,21,22,25,29,38,44,46,56,67,68,69,70,71,72,73,77,83,],[-58,-51,-54,51,-56,-57,-56,51,-55,51,51,51,51,51,-46,-47,51,-59,-60,]),'COLON':([5,6,21,22,25,29,38,44,46,54,56,60,67,68,69,70,71,72,73,77,78,83,92,],[-58,-51,-54,-65,55,-57,-56,-52,-55,74,-53,82,-45,-48,-44,-49,-46,-47,-50,-59,-7,-60,-8,]),'DEDENT':([17,26,28,31,42,85,95,102,103,105,106,],[-11,-38,-12,-39,-13,-40,-6,105,-42,-41,-43,]),'$end':([1,7,9,17,18,26,28,31,36,37,42,85,95,105,],[-4,0,-1,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,-41,]),'INCLUDE_LOCAL':([0,1,9,17,18,26,28,31,36,37,42,85,95,97,102,103,105,106,],[33,-4,33,-11,-5,-38,-12,-39,-2,-3,-13,-40,-6,33,33,-42,-41,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'argument':([45,84,],[64,96,]),'pointer':([75,88,94,],[91,91,91,]),'array':([75,88,94,],[89,89,89,]),'small_stmt':([0,9,97,102,],[14,14,14,14,]),'include_stmt':([0,9,97,102,],[15,15,15,15,]),'func_decl':([0,9,97,102,],[2,2,2,2,]),'testlist_multi':([0,9,10,32,35,41,97,102,],[16,16,16,16,16,16,16,16,]),'stmts':([97,],[102,]),'trailer':([21,],[46,]),'simple_stmt':([0,9,97,102,],[17,17,17,17,]),'suite':([74,82,],[85,95,]),'pointer_or_array':([75,88,94,],[90,100,90,]),'stmt':([0,9,97,102,],[18,37,103,106,]),'define_stmt':([0,9,97,102,],[20,20,20,20,]),'atom':([0,9,10,19,23,30,32,35,41,43,45,47,48,49,50,51,52,53,84,87,97,102,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'var_decl':([0,9,97,102,],[3,3,3,3,]),'comparison':([0,9,10,19,23,30,32,35,41,43,45,47,48,49,50,51,52,53,84,87,97,102,],[22,22,22,44,22,56,22,22,22,22,22,67,68,69,70,71,72,73,22,22,22,22,]),'type_declaration':([55,81,],[75,94,]),'power':([0,9,10,19,23,30,32,35,41,43,45,47,48,49,50,51,52,53,84,87,97,102,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'return_stmt':([0,9,97,102,],[24,24,24,24,]),'module':([0,],[7,]),'varargslist':([59,],[79,]),'testlist':([0,9,10,32,35,41,97,102,],[8,8,39,57,61,62,8,8,]),'if_stmt':([0,9,97,102,],[26,26,26,26,]),'expr_stmt':([0,9,97,102,],[27,27,27,27,]),'stmt_list':([0,],[9,]),'compound_stmt':([0,9,97,102,],[28,28,28,28,]),'test':([0,9,10,23,32,35,41,43,45,84,87,97,102,],[12,12,12,54,12,12,12,63,66,66,99,12,12,]),'bracket_list':([75,94,],[88,88,]),'funcdef':([0,9,97,102,],[31,31,31,31,]),'arglist':([45,],[65,]),'parameters':([34,],[60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',13),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',18),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',24),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',30),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',35),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',43),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',50),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',55),
  ('varargslist -> NAME','varargslist',1,'p_varargslist_one','cparse.py',62),
  ('varargslist -> varargslist COMMA NAME','varargslist',3,'p_varargslist_many','cparse.py',67),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',72),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',73),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',80),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',90),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',91),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',92),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',93),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',94),
  ('small_stmt -> var_decl','small_stmt',1,'p_small_stmt','cparse.py',95),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',100),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',105),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',110),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',116),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',121),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',138),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',139),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',143),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',147),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',151),
  ('array -> LBRACKET test RBRACKET','array',3,'p_array','cparse.py',155),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',166),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',171),
  ('expr_stmt -> testlist ASSIGN testlist','expr_stmt',3,'p_expr_stmt','cparse.py',176),
  ('expr_stmt -> testlist','expr_stmt',1,'p_expr_stmt','cparse.py',177),
  ('return_stmt -> RETURN testlist','return_stmt',2,'p_return_stmt','cparse.py',188),
  ('define_stmt -> DEFINE NAME testlist','define_stmt',3,'p_define_stmt','cparse.py',193),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',198),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',206),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',207),
  ('if_stmt -> IF test COLON suite','if_stmt',4,'p_if_stmt','cparse.py',212),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',217),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',222),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',227),
  ('comparison -> comparison PLUS comparison','comparison',3,'p_comparison','cparse.py',257),
  ('comparison -> comparison MINUS comparison','comparison',3,'p_comparison','cparse.py',258),
  ('comparison -> comparison MULT comparison','comparison',3,'p_comparison','cparse.py',259),
  ('comparison -> comparison DIV comparison','comparison',3,'p_comparison','cparse.py',260),
  ('comparison -> comparison LT comparison','comparison',3,'p_comparison','cparse.py',261),
  ('comparison -> comparison EQ comparison','comparison',3,'p_comparison','cparse.py',262),
  ('comparison -> comparison GT comparison','comparison',3,'p_comparison','cparse.py',263),
  ('comparison -> power','comparison',1,'p_comparison','cparse.py',264),
  ('comparison -> PLUS comparison','comparison',2,'p_comparison_uadd','cparse.py',272),
  ('comparison -> MINUS comparison','comparison',2,'p_comparison_usub','cparse.py',277),
  ('power -> atom','power',1,'p_power_1','cparse.py',287),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',292),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',297),
  ('atom -> NUMBER','atom',1,'p_atom_number','cparse.py',302),
  ('atom -> STRING','atom',1,'p_atom_str','cparse.py',307),
  ('atom -> LPAR testlist RPAR','atom',3,'p_atom_tuple','cparse.py',312),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',319),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','cparse.py',327),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','cparse.py',328),
  ('testlist_multi -> testlist_multi COMMA test','testlist_multi',3,'p_testlist_multi','cparse.py',343),
  ('testlist_multi -> test','testlist_multi',1,'p_testlist_multi','cparse.py',344),
  ('test -> comparison','test',1,'p_test','cparse.py',359),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',366),
  ('arglist -> argument','arglist',1,'p_arglist','cparse.py',367),
  ('argument -> test','argument',1,'p_argument','cparse.py',376),
]
