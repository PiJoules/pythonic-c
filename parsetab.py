
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQGTLTleftPLUSMINUSleftMULTDIVNAME INT FLOAT STRING LPAR RPAR LBRACKET RBRACKET LBRACE RBRACE COLON EQ ASSIGN ARROW LT GT PLUS MINUS MULT DIV WS NEWLINE COMMA INDENT DEDENT DEF RETURN ENUM INCLUDE IF INCLUDE_LOCAL DEFINEmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : name_or_var_declname_or_var_decl : NAME\n                        | var_declvarargslist : varargslist COMMA name_or_var_declstmt : simple_stmt\n            | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                  | include_stmt\n                  | define_stmt\n                  | expr_stmt\n                  | assign_stmt\n                  | func_decl\n                  | var_decl\n                  | enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                        | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEcompound_stmt : if_stmt\n                     | funcdefif_stmt : IF expr COLON suitesuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr MULT expr\n            | expr DIV expr\n            | expr LT expr\n            | expr EQ expr\n            | expr GT expr\n            | powerexpr : LPAR expr RPARexpr : LPAR type_declaration RPAR exprexpr : PLUS exprexpr : MINUS exprpower : atompower : atom traileratom : NAMEatom : INTatom : FLOATatom : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARtestlist : testlist_multi COMMA\n                | testlist_multi testlist_multi : testlist_multi COMMA expr\n                      | exprarglist : arglist COMMA argument\n               | argumentargument : exprempty : '
    
_lr_action_items = {'INCLUDE':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[1,-55,-5,1,-14,-15,-6,-54,-16,-3,-4,-56,1,-7,-58,1,-59,-57,]),'RETURN':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[3,-55,-5,3,-14,-15,-6,-54,-16,-3,-4,-56,3,-7,-58,3,-59,-57,]),'LT':([11,12,14,15,26,33,36,38,39,41,44,47,48,53,56,58,59,72,74,76,80,89,95,96,97,98,99,100,101,102,106,107,112,115,130,],[-72,-75,-74,-67,-77,64,-76,-74,64,-70,-73,-78,64,-74,64,-71,64,-83,64,-79,64,-68,-62,-66,-64,-61,-65,-63,-60,64,-82,64,64,64,64,]),'IF':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[22,-55,-5,22,-14,-15,-6,-54,-16,-3,-4,-56,22,-7,-58,22,-59,-57,]),'LBRACE':([18,49,54,57,60,79,81,116,128,],[54,54,54,54,94,54,54,54,54,]),'COLON':([11,12,14,15,26,36,38,41,44,47,58,59,72,76,89,95,96,97,98,99,100,101,104,106,112,124,125,137,],[-72,-75,49,-67,-77,-76,-74,-70,-73,-78,-71,93,-83,-79,-68,-62,-66,-64,-61,-65,-63,-60,127,-82,-69,-8,49,-9,]),'PLUS':([0,3,5,7,9,10,11,12,13,14,15,18,19,21,22,26,28,29,31,33,36,38,39,40,41,42,43,44,45,47,48,50,53,56,57,58,59,62,63,64,65,66,67,68,69,72,74,75,76,80,84,88,89,95,96,97,98,99,100,101,102,105,106,107,108,112,115,118,130,133,138,140,141,144,145,],[5,5,5,-55,-5,5,-72,-75,5,-74,-67,5,5,-14,5,-77,-15,-6,-54,68,-76,-74,68,-16,-70,-3,-4,-73,5,-78,68,5,-74,68,5,-71,68,5,5,5,5,5,5,5,5,-83,68,5,-79,68,5,5,-68,-62,68,68,-61,68,-63,-60,68,5,-82,68,5,68,68,-56,68,5,-7,-58,5,-59,-57,]),'GT':([11,12,14,15,26,33,36,38,39,41,44,47,48,53,56,58,59,72,74,76,80,89,95,96,97,98,99,100,101,102,106,107,112,115,130,],[-72,-75,-74,-67,-77,63,-76,-74,63,-70,-73,-78,63,-74,63,-71,63,-83,63,-79,63,-68,-62,-66,-64,-61,-65,-63,-60,63,-82,63,63,63,63,]),'ENUM':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[30,-55,-5,30,-14,-15,-6,-54,-16,-3,-4,-56,30,-7,-58,30,-59,-57,]),'ARROW':([52,90,104,117,124,137,],[81,-36,128,-37,-8,-9,]),'RPAR':([11,12,15,26,36,38,41,44,45,47,51,53,55,56,57,58,71,72,73,74,76,77,78,79,83,85,86,87,89,91,92,95,96,97,98,99,100,101,103,106,109,110,111,112,113,114,122,123,125,126,129,130,131,132,143,],[-72,-75,-67,-77,-76,-74,-70,-73,72,-78,-34,-32,84,89,90,-71,106,-83,-89,-90,-79,-32,-30,90,-43,-41,-42,-40,-68,84,117,-62,-66,-64,-61,-65,-63,-60,124,-82,-38,-35,-33,-69,-44,-45,137,-10,-11,-12,-88,-31,-46,-39,-13,]),'INDENT':([119,],[133,]),'NEWLINE':([0,2,4,7,8,9,10,11,12,14,15,16,21,23,24,25,26,27,28,29,31,33,34,36,37,38,39,40,41,42,43,44,47,50,51,58,61,72,76,77,78,80,83,85,86,87,89,93,95,96,97,98,99,100,101,102,104,106,110,111,112,113,114,118,124,127,130,131,134,137,138,139,145,],[9,-18,40,-55,-22,-5,42,-72,-75,-74,-67,-20,-14,-23,-21,-17,-77,-24,-15,-6,-54,-49,-19,-76,-47,-74,-51,-16,-70,-3,-4,-73,-78,-53,-34,-71,-48,-83,-79,-32,-30,-52,-43,-41,-42,-40,-68,119,-62,-66,-64,-61,-65,-63,-60,-50,-28,-82,-35,-33,-69,-44,-45,-56,-8,119,-31,-46,-25,-9,-7,-29,-57,]),'EQ':([11,12,14,15,26,33,36,38,39,41,44,47,48,53,56,58,59,72,74,76,80,89,95,96,97,98,99,100,101,102,106,107,112,115,130,],[-72,-75,-74,-67,-77,66,-76,-74,66,-70,-73,-78,66,-74,66,-71,66,-83,66,-79,66,-68,-62,-66,-64,-61,-65,-63,-60,66,-82,66,66,66,66,]),'COMMA':([11,12,15,26,36,38,41,44,46,47,48,51,53,58,71,72,73,74,76,77,78,83,85,86,87,89,91,92,95,96,97,98,99,100,101,106,107,109,110,111,112,113,114,120,121,122,123,125,126,129,130,131,132,142,143,],[-72,-75,-67,-77,-76,-74,-70,-73,75,-78,-80,-34,-32,-71,105,-83,-89,-90,-79,-32,-30,-43,-41,-42,-40,-68,-38,116,-62,-66,-64,-61,-65,-63,-60,-82,-81,-38,-35,-33,-69,-44,-45,135,-26,136,-10,-11,-12,-88,-31,-46,-39,-27,-13,]),'DIV':([11,12,14,15,26,33,36,38,39,41,44,47,48,53,56,58,59,72,74,76,80,89,95,96,97,98,99,100,101,102,106,107,112,115,130,],[-72,-75,-74,-67,-77,67,-76,-74,67,67,-73,-78,67,-74,67,67,67,-83,67,-79,67,-68,-62,67,67,67,67,-63,67,67,-82,67,67,67,67,]),'DEFINE':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[17,-55,-5,17,-14,-15,-6,-54,-16,-3,-4,-56,17,-7,-58,17,-59,-57,]),'MULT':([11,12,14,15,26,33,36,38,39,41,44,47,48,53,56,58,59,72,74,76,80,89,95,96,97,98,99,100,101,102,106,107,112,115,130,],[-72,-75,-74,-67,-77,62,-76,-74,62,62,-73,-78,62,-74,62,62,62,-83,62,-79,62,-68,-62,62,62,62,62,-63,62,62,-82,62,62,62,62,]),'INT':([0,3,5,7,9,10,13,18,19,21,22,28,29,31,40,42,43,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,118,133,138,140,141,144,145,],[12,12,12,-55,-5,12,12,12,12,-14,12,-15,-6,-54,-16,-3,-4,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-56,12,-7,-58,12,-59,-57,]),'LBRACKET':([0,3,5,7,9,10,13,18,19,21,22,28,29,31,40,42,43,45,50,51,53,55,57,62,63,64,65,66,67,68,69,75,77,78,82,83,84,85,86,87,88,91,105,108,109,110,111,113,114,118,131,132,133,138,139,140,141,144,145,],[13,13,13,-55,-5,13,13,13,13,-14,13,-15,-6,-54,-16,-3,-4,13,13,-34,-32,88,13,13,13,13,13,13,13,13,13,13,-32,88,88,-43,13,-41,-42,88,13,88,13,13,88,88,-33,-44,-45,-56,-46,88,13,-7,88,-58,13,-59,-57,]),'RBRACKET':([11,12,13,15,26,36,38,41,44,46,47,48,58,72,76,88,89,95,96,97,98,99,100,101,106,107,112,115,],[-72,-75,47,-67,-77,-76,-74,-70,-73,76,-78,-80,-71,-83,-79,114,-68,-62,-66,-64,-61,-65,-63,-60,-82,-81,-69,131,]),'DEDENT':([7,21,28,31,40,118,138,140,141,144,145,],[-55,-14,-15,-54,-16,-56,-7,-58,145,-59,-57,]),'NAME':([0,3,5,7,9,10,13,17,18,19,21,22,28,29,30,31,35,40,42,43,45,49,50,54,57,62,63,64,65,66,67,68,69,75,79,81,84,88,94,103,105,108,116,118,128,133,135,136,138,140,141,144,145,],[14,38,38,-55,-5,14,38,50,53,38,-14,38,-15,-6,60,-54,70,-16,-3,-4,38,77,38,77,53,38,38,38,38,38,38,38,38,38,77,77,38,38,121,125,38,38,77,-56,77,14,142,125,-7,-58,14,-59,-57,]),'STRING':([0,1,3,5,7,9,10,13,18,19,21,22,28,29,31,32,40,42,43,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,118,133,138,140,141,144,145,],[26,37,26,26,-55,-5,26,26,26,26,-14,26,-15,-6,-54,61,-16,-3,-4,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-56,26,-7,-58,26,-59,-57,]),'INCLUDE_LOCAL':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[32,-55,-5,32,-14,-15,-6,-54,-16,-3,-4,-56,32,-7,-58,32,-59,-57,]),'RBRACE':([51,77,82,83,85,86,87,110,111,113,114,120,121,131,142,],[-34,-32,111,-43,-41,-42,-40,-35,-33,-44,-45,134,-26,-46,-27,]),'DEF':([0,7,9,10,21,28,29,31,40,42,43,118,133,138,140,141,144,145,],[35,-55,-5,35,-14,-15,-6,-54,-16,-3,-4,-56,35,-7,-58,35,-59,-57,]),'LPAR':([0,3,5,7,9,10,11,12,13,14,18,19,21,22,26,28,29,31,36,38,40,42,43,45,47,49,50,53,54,57,62,63,64,65,66,67,68,69,70,75,76,79,81,84,88,105,108,116,118,128,133,138,140,141,144,145,],[18,18,18,-55,-5,18,45,-75,18,-74,57,18,-14,18,-77,-15,-6,-54,-76,-74,-16,-3,-4,18,-78,79,18,-74,79,57,18,18,18,18,18,18,18,18,103,18,-79,79,79,18,18,18,18,79,-56,79,18,-7,-58,18,-59,-57,]),'MINUS':([0,3,5,7,9,10,11,12,13,14,15,18,19,21,22,26,28,29,31,33,36,38,39,40,41,42,43,44,45,47,48,50,53,56,57,58,59,62,63,64,65,66,67,68,69,72,74,75,76,80,84,88,89,95,96,97,98,99,100,101,102,105,106,107,108,112,115,118,130,133,138,140,141,144,145,],[19,19,19,-55,-5,19,-72,-75,19,-74,-67,19,19,-14,19,-77,-15,-6,-54,65,-76,-74,65,-16,-70,-3,-4,-73,19,-78,65,19,-74,65,19,-71,65,19,19,19,19,19,19,19,19,-83,65,19,-79,65,19,19,-68,-62,65,65,-61,65,-63,-60,65,19,-82,65,19,65,65,-56,65,19,-7,-58,19,-59,-57,]),'ASSIGN':([11,12,14,15,26,33,36,38,41,44,47,51,58,72,76,77,78,83,85,86,87,89,95,96,97,98,99,100,101,106,110,111,112,113,114,131,],[-72,-75,-74,-67,-77,69,-76,-74,-70,-73,-78,-34,-71,-83,-79,-32,108,-43,-41,-42,-40,-68,-62,-66,-64,-61,-65,-63,-60,-82,-35,-33,-69,-44,-45,-46,]),'$end':([0,6,7,9,10,20,21,28,29,31,40,42,43,118,138,145,],[-91,-2,-55,-5,-1,0,-14,-15,-6,-54,-16,-3,-4,-56,-7,-57,]),'FLOAT':([0,3,5,7,9,10,13,18,19,21,22,28,29,31,40,42,43,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,118,133,138,140,141,144,145,],[36,36,36,-55,-5,36,36,36,36,-14,36,-15,-6,-54,-16,-3,-4,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-56,36,-7,-58,36,-59,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[20,]),'include_stmt':([0,10,133,141,],[2,2,2,2,]),'enum_name_list':([94,],[120,]),'array':([55,78,82,87,91,109,110,132,139,],[86,86,86,86,86,86,86,86,86,]),'simple_stmt':([0,10,133,141,],[21,21,21,21,]),'param_type_list':([18,49,54,57,79,81,116,128,],[52,52,52,52,52,52,52,52,]),'funcdef':([0,10,133,141,],[7,7,7,7,]),'bracket_list':([55,78,82,91,109,110,132,139,],[87,87,87,87,87,87,87,87,]),'empty':([0,],[6,]),'pointer':([55,78,82,87,91,109,110,132,139,],[85,85,85,85,85,85,85,85,85,]),'assign_stmt':([0,10,133,141,],[24,24,24,24,]),'return_stmt':([0,10,133,141,],[25,25,25,25,]),'argument':([45,105,],[73,129,]),'if_stmt':([0,10,133,141,],[31,31,31,31,]),'func_decl':([0,10,133,141,],[8,8,8,8,]),'suite':([93,127,],[118,138,]),'enum_decl':([0,10,133,141,],[27,27,27,27,]),'name_or_var_decl':([103,136,],[123,143,]),'compound_stmt':([0,10,133,141,],[28,28,28,28,]),'inline_func_decl':([18,49,54,57,79,81,116,128,],[51,51,51,51,51,51,51,51,]),'stmt_list':([0,],[10,]),'trailer':([11,],[44,]),'varargslist':([103,],[122,]),'pointer_or_array':([55,78,82,87,91,109,110,132,139,],[83,83,83,113,83,83,83,83,83,]),'atom':([0,3,5,10,13,18,19,22,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,133,141,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'array_contents':([13,],[46,]),'stmt':([0,10,133,141,],[29,43,140,144,]),'small_stmt':([0,10,133,141,],[4,4,4,4,]),'var_decl':([0,10,103,133,136,141,],[23,23,126,23,126,23,]),'param_list_contents':([57,79,],[92,92,]),'arglist':([45,],[71,]),'expr_stmt':([0,10,133,141,],[16,16,16,16,]),'expr':([0,3,5,10,13,18,19,22,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,133,141,],[33,39,41,33,48,56,58,59,74,80,56,95,96,97,98,99,100,101,102,107,112,115,74,130,33,33,]),'power':([0,3,5,10,13,18,19,22,45,50,57,62,63,64,65,66,67,68,69,75,84,88,105,108,133,141,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'define_stmt':([0,10,133,141,],[34,34,34,34,]),'stmts':([133,],[141,]),'type_declaration':([18,49,54,57,79,81,116,128,],[55,78,82,91,109,110,132,139,]),'parameters':([70,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',14),
  ('module -> empty','module',1,'p_empty_module','cparse.py',18),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',24),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',29),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',35),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',40),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',47),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',53),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',58),
  ('varargslist -> name_or_var_decl','varargslist',1,'p_varargslist_one','cparse.py',65),
  ('name_or_var_decl -> NAME','name_or_var_decl',1,'p_name_or_var_decl','cparse.py',69),
  ('name_or_var_decl -> var_decl','name_or_var_decl',1,'p_name_or_var_decl','cparse.py',70),
  ('varargslist -> varargslist COMMA name_or_var_decl','varargslist',3,'p_varargslist_many','cparse.py',74),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',79),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',80),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',87),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',97),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',98),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',99),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',100),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',101),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',102),
  ('small_stmt -> var_decl','small_stmt',1,'p_small_stmt','cparse.py',103),
  ('small_stmt -> enum_decl','small_stmt',1,'p_small_stmt','cparse.py',104),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',109),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',113),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',117),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',123),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',129),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',135),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',140),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',145),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',149),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',156),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',160),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',164),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',168),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',172),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',176),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',183),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',199),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',200),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',204),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',208),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',212),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',216),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',221),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',226),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',231),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',236),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',241),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',246),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',251),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',258),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',259),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',264),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',269),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',274),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',279),
  ('expr -> expr PLUS expr','expr',3,'p_comparison','cparse.py',309),
  ('expr -> expr MINUS expr','expr',3,'p_comparison','cparse.py',310),
  ('expr -> expr MULT expr','expr',3,'p_comparison','cparse.py',311),
  ('expr -> expr DIV expr','expr',3,'p_comparison','cparse.py',312),
  ('expr -> expr LT expr','expr',3,'p_comparison','cparse.py',313),
  ('expr -> expr EQ expr','expr',3,'p_comparison','cparse.py',314),
  ('expr -> expr GT expr','expr',3,'p_comparison','cparse.py',315),
  ('expr -> power','expr',1,'p_comparison','cparse.py',316),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',323),
  ('expr -> LPAR type_declaration RPAR expr','expr',4,'p_comparison_cast','cparse.py',327),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',332),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',337),
  ('power -> atom','power',1,'p_power_1','cparse.py',347),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',352),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',357),
  ('atom -> INT','atom',1,'p_atom_int','cparse.py',362),
  ('atom -> FLOAT','atom',1,'p_atom_float','cparse.py',366),
  ('atom -> STRING','atom',1,'p_atom_str','cparse.py',371),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',375),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',379),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',383),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',387),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',399),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',403),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','cparse.py',411),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','cparse.py',412),
  ('testlist_multi -> testlist_multi COMMA expr','testlist_multi',3,'p_testlist_multi','cparse.py',427),
  ('testlist_multi -> expr','testlist_multi',1,'p_testlist_multi','cparse.py',428),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',443),
  ('arglist -> argument','arglist',1,'p_arglist','cparse.py',444),
  ('argument -> expr','argument',1,'p_argument','cparse.py',453),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',457),
]
