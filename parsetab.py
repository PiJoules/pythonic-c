
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INCLUDE_LOCAL INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr MULT exprexpr : expr DIV exprexpr : expr EQ exprexpr : expr LT exprexpr : expr GT exprexpr : powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARarglist : arglist COMMA argumentarglist : argumentargument : exprempty : '
    
_lr_action_items = {'EQ':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,85,90,92,93,94,95,99,106,111,113,125,126,127,128,129,130,131,132,133,134,137,140,145,156,160,168,175,192,197,203,223,231,],[-120,-124,-126,80,-125,-121,-109,-123,-114,-123,-127,80,-115,80,80,-117,-118,80,-116,-119,80,-122,80,-128,-112,-106,-105,-104,-102,-111,-108,80,-107,-103,-110,-132,80,80,80,80,-131,-113,80,80,80,80,80,]),'COMMA':([7,20,27,45,48,51,63,64,65,66,67,70,74,77,85,90,93,94,99,111,113,115,118,119,120,121,123,125,126,127,128,129,130,132,133,134,137,138,139,140,144,151,152,153,154,155,156,158,159,161,164,168,172,173,175,176,178,185,186,191,197,201,213,214,223,224,231,],[-120,-124,-126,-125,-121,-109,-114,-123,-127,110,-129,-115,-56,-54,-117,-118,-116,-119,-122,-128,-112,-63,-65,-64,-62,163,-60,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-134,169,-135,-52,182,-11,-12,-10,-13,-130,-57,-67,-66,-55,-131,196,-41,-113,198,-48,-68,-61,-133,-53,-14,-42,-47,-97,228,-98,]),'DEF':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[2,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,2,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,2,-113,-7,-81,-84,-79,2,-100,-99,-101,-82,-85,-89,-86,-87,]),'MULT':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,33,35,36,42,43,44,45,46,47,48,50,51,54,56,60,63,64,65,67,70,71,72,73,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,106,110,111,113,117,125,126,127,128,129,130,131,132,133,134,137,140,145,146,156,157,160,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,197,203,210,211,212,216,218,221,223,225,228,229,231,],[3,-75,3,3,-120,-76,3,3,3,-5,-124,-77,-74,-126,82,-78,3,3,3,3,-125,-16,3,-121,-15,-109,-123,-6,3,-114,-123,-127,82,82,-17,82,82,3,3,3,3,-117,3,3,3,3,-118,3,82,82,-119,82,-3,-4,3,-122,3,82,3,-128,-112,3,82,-105,-104,82,-111,82,82,82,82,82,-132,82,82,3,82,-80,82,-83,-88,-131,3,3,3,3,82,-7,-81,-84,3,82,3,-100,82,82,3,-99,-101,-82,-85,-89,82,-86,3,-87,82,]),'LT':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,33,35,36,42,43,44,45,46,47,48,50,51,54,56,60,63,64,65,67,70,71,72,73,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,106,110,111,113,117,125,126,127,128,129,130,131,132,133,134,137,140,145,146,156,157,160,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,197,203,210,211,212,216,218,221,223,225,228,229,231,],[58,-75,58,58,-120,-76,58,58,58,-5,-124,-77,-74,-126,88,-78,58,58,58,58,-125,-16,58,-121,-15,-109,-123,-6,58,-114,-123,-127,88,-115,-17,88,88,58,58,58,58,-117,58,58,58,58,-118,58,88,-116,-119,88,-3,-4,58,-122,58,88,58,-128,-112,58,-106,-105,-104,-102,-111,-108,88,-107,-103,-110,-132,88,88,58,88,-80,88,-83,-88,-131,58,58,58,58,-113,-7,-81,-84,58,88,58,-100,88,88,58,-99,-101,-82,-85,-89,88,-86,58,-87,88,]),'INCLUDE':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[6,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,6,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,6,-113,-7,-81,-84,-79,6,-100,-99,-101,-82,-85,-89,-86,-87,]),'RPAR':([7,20,27,45,48,51,63,64,65,70,73,74,77,78,85,90,93,94,98,99,109,111,113,115,118,119,120,121,123,125,126,127,128,129,130,132,133,134,137,138,139,140,144,151,152,153,154,155,158,159,161,164,168,175,185,186,191,197,201,],[-120,-124,-126,-125,-121,-109,-114,-123,-127,-115,113,-56,-54,122,-117,-118,-116,-119,137,-122,150,-128,-112,-63,-65,-64,-62,162,-60,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-134,168,-135,-52,181,-11,-12,-10,-13,-57,-67,-66,-55,-131,-113,-68,-61,-133,-53,-14,]),'ELIF':([165,211,225,],[188,-99,188,]),'INC':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,85,90,92,93,94,95,99,106,111,113,125,126,127,128,129,130,131,132,133,134,137,140,145,156,160,168,175,192,197,203,223,231,],[-120,-124,-126,85,-125,-121,-109,-123,85,-123,-127,85,85,85,85,-117,-118,85,85,85,85,-122,85,-128,-112,85,85,85,85,-111,85,85,85,85,85,-132,85,85,85,85,-131,85,85,85,85,85,85,]),'GT':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,74,77,85,90,92,93,94,95,99,104,106,111,113,115,118,119,120,125,126,127,128,129,130,131,132,133,134,137,140,145,156,158,159,160,161,164,168,175,185,192,197,203,223,231,],[-120,-124,-126,86,-125,-121,-109,-123,-114,-123,-127,86,-115,86,86,-56,-54,-117,-118,86,-116,-119,86,-122,146,86,-128,-112,-63,-65,-64,-62,-106,-105,-104,-102,-111,-108,86,-107,-103,-110,-132,86,86,86,-57,-67,86,-66,-55,-131,-113,-68,86,86,86,86,86,]),'LPAR':([0,1,3,5,7,9,13,17,18,19,20,22,24,26,27,35,36,42,43,44,45,46,47,48,50,51,54,56,58,60,62,63,64,65,70,71,78,79,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,102,103,110,111,113,114,117,125,126,127,128,129,130,132,133,134,137,146,149,157,163,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[18,-75,18,18,-120,-76,18,18,18,-5,-124,-77,78,-74,-126,-78,18,18,18,18,-125,-16,18,98,-15,-109,-123,-6,78,18,109,-114,-123,-127,-115,-17,78,78,18,18,18,18,-117,18,18,18,18,-118,18,-116,-119,-3,-4,18,-122,78,18,18,-128,-112,78,18,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,18,78,-80,78,-83,-88,-131,18,18,18,18,-113,-7,-81,-84,18,-79,18,-100,18,-99,-101,-82,-85,-89,-86,18,-87,]),'DIV':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,85,90,92,93,94,95,99,106,111,113,125,126,127,128,129,130,131,132,133,134,137,140,145,156,160,168,175,192,197,203,223,231,],[-120,-124,-126,81,-125,-121,-109,-123,-114,-123,-127,81,81,81,81,-117,-118,81,81,-119,81,-122,81,-128,-112,81,-105,-104,81,-111,81,81,81,81,81,-132,81,81,81,81,-131,81,81,81,81,81,81,]),'ASSIGN':([7,20,27,33,45,48,51,54,63,64,65,70,74,77,85,90,93,94,99,111,113,115,118,119,120,125,126,127,128,129,130,132,133,134,137,144,158,159,161,164,168,175,185,],[-120,-124,-126,87,-125,-121,-109,-123,-114,-123,-127,-115,-56,-54,-117,-118,-116,-119,-122,-128,-112,-63,-65,-64,-62,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,174,-57,-67,-66,-55,-131,-113,-68,]),'IFNDEF':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[10,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,10,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,10,-113,-7,-81,-84,-79,10,-100,-99,-101,-82,-85,-89,-86,-87,]),'ELSE':([157,165,190,205,207,211,219,225,230,],[184,189,208,208,-94,-99,-95,189,-96,]),'LBRACKET':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,63,64,65,70,71,74,76,77,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,104,110,111,113,115,117,118,119,120,123,124,125,126,127,128,129,130,132,133,134,137,144,146,157,158,159,161,164,165,166,168,169,170,171,174,175,179,180,183,185,186,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[5,-75,5,5,-120,-76,5,5,5,-5,-124,-77,-74,-126,-78,5,5,5,5,-125,-16,5,-121,-15,-109,-6,5,-114,-123,-127,-115,-17,-56,117,-54,5,5,5,5,-117,5,5,5,5,-118,5,-116,-119,-3,-4,5,-122,5,117,5,-128,-112,-63,5,-65,-64,117,117,117,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,117,5,-80,-57,-67,-66,-55,-83,-88,-131,5,5,5,5,-113,-7,117,-81,-68,117,-84,5,-79,5,-100,5,-99,-101,-82,-85,-89,-86,5,-87,]),'NULL':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,63,64,65,70,71,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,110,111,113,117,125,126,127,128,129,130,132,133,134,137,146,157,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[7,-75,7,7,-120,-76,7,7,7,-5,-124,-77,-74,-126,-78,7,7,7,7,-125,-16,7,-121,-15,-109,-6,7,-114,-123,-127,-115,-17,7,7,7,7,-117,7,7,7,7,-118,7,-116,-119,-3,-4,7,-122,7,7,-128,-112,7,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,7,-80,-83,-88,-131,7,7,7,7,-113,-7,-81,-84,7,-79,7,-100,7,-99,-101,-82,-85,-89,-86,7,-87,]),'NOT':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,63,64,65,70,71,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,110,111,113,117,125,126,127,128,129,130,132,133,134,137,146,157,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[43,-75,43,43,-120,-76,43,43,43,-5,-124,-77,-74,-126,-78,43,43,43,43,-125,-16,43,-121,-15,-109,-6,43,-114,-123,-127,-115,-17,43,43,43,43,-117,43,43,43,43,-118,43,-116,-119,-3,-4,43,-122,43,43,-128,-112,43,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,43,-80,-83,-88,-131,43,43,43,43,-113,-7,-81,-84,43,-79,43,-100,43,-99,-101,-82,-85,-89,-86,43,-87,]),'DEFINE':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[57,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,57,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,57,-113,-7,-81,-84,-79,57,-100,-99,-101,-82,-85,-89,-86,-87,]),'INDENT':([142,167,],[171,190,]),'ENDIF':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[25,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,25,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,25,-113,-7,-81,-84,-79,25,-100,-99,-101,-82,-85,-89,-86,-87,]),'$end':([0,1,7,9,16,19,20,21,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,175,179,183,187,192,211,216,218,221,225,229,],[-136,-75,-120,-76,0,-5,-124,-2,-77,-74,-126,-78,-125,-16,-1,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,-113,-7,-81,-84,-79,-99,-82,-85,-89,-86,-87,]),'STRING':([0,1,3,5,6,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,61,63,64,65,70,71,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,110,111,113,117,125,126,127,128,129,130,132,133,134,137,146,157,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[27,-75,27,27,68,-120,-76,27,27,27,-5,-124,-77,-74,-126,-78,27,27,27,27,-125,-16,27,-121,-15,-109,-6,27,107,-114,-123,-127,-115,-17,27,27,27,27,-117,27,27,27,27,-118,27,-116,-119,-3,-4,27,-122,27,27,-128,-112,27,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,27,-80,-83,-88,-131,27,27,27,27,-113,-7,-81,-84,27,-79,27,-100,27,-99,-101,-82,-85,-89,-86,27,-87,]),'CASE':([190,205,207,211,219,230,],[210,210,-94,-99,-95,-96,]),'DEDENT':([1,7,9,20,22,26,27,35,45,46,48,50,51,63,64,65,70,71,85,90,93,94,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,175,179,183,187,192,193,194,205,206,207,209,211,212,216,218,219,220,221,225,226,229,230,],[-75,-120,-76,-124,-77,-74,-126,-78,-125,-16,-121,-15,-109,-114,-123,-127,-115,-17,-117,-118,-116,-119,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,-113,-7,-81,-84,-79,211,-100,-90,221,-94,-92,-99,-101,-82,-85,-95,-91,-89,-86,-93,-87,-96,]),'LBRACE':([24,58,78,79,101,102,105,114,149,163,],[79,79,79,79,143,79,147,79,79,79,]),'INT':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,63,64,65,70,71,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,110,111,113,117,125,126,127,128,129,130,132,133,134,137,146,157,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[20,-75,20,20,-120,-76,20,20,20,-5,-124,-77,-74,-126,-78,20,20,20,20,-125,-16,20,-121,-15,-109,-6,20,-114,-123,-127,-115,-17,20,20,20,20,-117,20,20,20,20,-118,20,-116,-119,-3,-4,20,-122,20,20,-128,-112,20,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,20,-80,-83,-88,-131,20,20,20,20,-113,-7,-81,-84,20,-79,20,-100,20,-99,-101,-82,-85,-89,-86,20,-87,]),'IF':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[36,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,36,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,36,-113,-7,-81,-84,-79,36,-100,-99,-101,-82,-85,-89,-86,-87,]),'TYPEDEF':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[24,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,24,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,24,-113,-7,-81,-84,-79,24,-100,-99,-101,-82,-85,-89,-86,-87,]),'PASS':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[55,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,55,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,55,-113,-7,-81,-84,-79,55,-100,-99,-101,-82,-85,-89,-86,-87,]),'MINUS':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,33,35,36,42,43,44,45,46,47,48,50,51,54,56,60,63,64,65,67,70,71,72,73,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,106,110,111,113,117,125,126,127,128,129,130,131,132,133,134,137,140,145,146,156,157,160,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,197,203,210,211,212,216,218,221,223,225,228,229,231,],[42,-75,42,42,-120,-76,42,42,42,-5,-124,-77,-74,-126,89,-78,42,42,42,42,-125,-16,42,-121,-15,-109,-123,-6,42,-114,-123,-127,89,-115,-17,89,89,42,42,42,42,-117,42,42,42,42,-118,42,89,-116,-119,89,-3,-4,42,-122,42,89,42,-128,-112,42,89,-105,-104,-102,-111,89,89,89,-103,89,-132,89,89,42,89,-80,89,-83,-88,-131,42,42,42,42,89,-7,-81,-84,42,89,42,-100,89,89,42,-99,-101,-82,-85,-89,89,-86,42,-87,89,]),'ELLIPSIS':([109,182,],[155,155,]),'SWITCH':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[44,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,44,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,44,-113,-7,-81,-84,-79,44,-100,-99,-101,-82,-85,-89,-86,-87,]),'FLOAT':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,35,36,42,43,44,45,46,47,48,50,51,56,60,63,64,65,70,71,80,81,82,83,85,86,87,88,89,90,91,93,94,96,97,98,99,103,110,111,113,117,125,126,127,128,129,130,132,133,134,137,146,157,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,210,211,212,216,218,221,225,228,229,],[45,-75,45,45,-120,-76,45,45,45,-5,-124,-77,-74,-126,-78,45,45,45,45,-125,-16,45,-121,-15,-109,-6,45,-114,-123,-127,-115,-17,45,45,45,45,-117,45,45,45,45,-118,45,-116,-119,-3,-4,45,-122,45,45,-128,-112,45,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,45,-80,-83,-88,-131,45,45,45,45,-113,-7,-81,-84,45,-79,45,-100,45,-99,-101,-82,-85,-89,-86,45,-87,]),'DEC':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,85,90,92,93,94,95,99,106,111,113,125,126,127,128,129,130,131,132,133,134,137,140,145,156,160,168,175,192,197,203,223,231,],[-120,-124,-126,90,-125,-121,-109,-123,90,-123,-127,90,90,90,90,-117,-118,90,90,90,90,-122,90,-128,-112,90,90,90,90,-111,90,90,90,90,90,-132,90,90,90,90,-131,90,90,90,90,90,90,]),'NEWLINE':([0,1,4,7,8,9,11,12,14,15,19,20,22,23,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,45,46,47,48,49,50,51,54,55,56,63,64,65,68,69,70,71,74,77,85,90,93,94,96,97,99,100,103,106,107,108,111,112,113,115,116,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,144,145,148,150,157,158,159,161,164,165,166,168,175,179,180,181,183,185,187,192,195,197,202,204,211,215,216,217,218,221,222,225,227,229,],[19,-75,-24,-120,-26,-76,-39,-28,-51,71,-5,-124,-77,-29,-36,-74,-126,-31,-19,-20,-25,-22,-71,-18,-78,-23,-21,-43,-30,-38,-125,-16,96,-121,-27,-15,-109,-123,-37,-6,-114,-123,-127,-69,-35,-115,-17,-56,-54,-117,-118,-116,-119,-3,-4,-122,142,-34,-73,-70,-49,-128,142,-112,-63,-32,-65,-64,-62,-106,-105,-104,-102,-111,-108,-72,-107,-103,-110,142,167,-132,-52,-33,142,-8,-80,-57,-67,-66,-55,-83,-88,-131,-113,-7,-50,-9,-81,-68,-84,-79,-40,-53,142,142,-99,-44,-82,142,-85,-89,142,-86,142,-87,]),'COLON':([7,20,27,45,48,51,52,54,63,64,65,70,72,85,90,92,93,94,95,99,108,111,113,125,126,127,128,129,130,132,133,134,137,150,152,168,175,177,181,184,189,203,208,223,224,231,],[-120,-124,-126,-125,-121,-109,100,102,-114,-123,-127,-115,112,-117,-118,135,-116,-119,136,-122,148,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-8,102,-131,-113,102,-9,202,204,217,222,-97,227,-98,]),'BREAK':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[41,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,41,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,41,-113,-7,-81,-84,-79,41,-100,-99,-101,-82,-85,-89,-86,-87,]),'RBRACKET':([5,7,20,27,45,48,51,63,64,65,66,67,70,85,90,93,94,99,111,113,117,125,126,127,128,129,130,132,133,134,137,156,160,168,175,],[65,-120,-124,-126,-125,-121,-109,-114,-123,-127,111,-129,-115,-117,-118,-116,-119,-122,-128,-112,159,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-130,185,-131,-113,]),'ARROW':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,75,85,90,92,93,94,95,99,106,108,111,113,122,125,126,127,128,129,130,131,132,133,134,137,140,145,150,156,160,162,168,175,181,192,197,203,223,231,],[-120,-124,-126,84,-125,-121,-109,-123,84,-123,-127,84,84,84,84,114,-117,-118,84,84,84,84,-122,84,149,-128,-112,-58,84,84,84,84,-111,84,84,84,84,84,-132,84,84,-8,84,84,-59,-131,84,-9,84,84,84,84,84,]),'DO':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[52,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,52,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,52,-113,-7,-81,-84,-79,52,-100,-99,-101,-82,-85,-89,-86,-87,]),'WHILE':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,141,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[17,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,17,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,170,-80,-83,-88,-131,17,-113,-7,-81,-84,-79,17,-100,-99,-101,-82,-85,-89,-86,-87,]),'ENUM':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[53,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,53,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,53,-113,-7,-81,-84,-79,53,-100,-99,-101,-82,-85,-89,-86,-87,]),'NAME':([0,1,2,3,5,7,9,10,13,17,18,19,20,22,24,26,27,35,36,42,43,44,45,46,47,48,50,51,53,56,57,58,59,60,63,64,65,70,71,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,96,97,98,99,102,103,109,110,111,113,114,115,117,118,119,120,125,126,127,128,129,130,132,133,134,137,143,146,147,149,157,158,159,161,163,164,165,166,168,169,170,171,174,175,179,182,183,185,187,188,192,193,194,196,198,210,211,212,216,218,221,225,228,229,],[54,-75,62,64,64,-120,-76,69,64,64,64,-5,-124,-77,77,-74,-126,-78,64,64,64,64,-125,-16,54,-121,-15,-109,101,-6,103,77,105,64,-114,-123,-127,-115,-17,-56,116,-54,77,77,64,64,64,64,129,-117,64,64,64,64,-118,64,-116,-119,-3,-4,64,-122,77,64,152,64,-128,-112,77,-63,64,-65,-64,-62,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,173,64,177,77,-80,-57,-67,-66,77,-55,-83,-88,-131,64,64,54,64,-113,-7,152,-81,-68,-84,64,-79,54,-100,213,177,64,-99,-101,-82,-85,-89,-86,64,-87,]),'STRUCT':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[59,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,59,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,59,-113,-7,-81,-84,-79,59,-100,-99,-101,-82,-85,-89,-86,-87,]),'PLUS':([0,1,3,5,7,9,13,17,18,19,20,22,26,27,33,35,36,42,43,44,45,46,47,48,50,51,54,56,60,63,64,65,67,70,71,72,73,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,106,110,111,113,117,125,126,127,128,129,130,131,132,133,134,137,140,145,146,156,157,160,165,166,168,169,170,171,174,175,179,183,187,188,192,193,194,197,203,210,211,212,216,218,221,223,225,228,229,231,],[13,-75,13,13,-120,-76,13,13,13,-5,-124,-77,-74,-126,83,-78,13,13,13,13,-125,-16,13,-121,-15,-109,-123,-6,13,-114,-123,-127,83,-115,-17,83,83,13,13,13,13,-117,13,13,13,13,-118,13,83,-116,-119,83,-3,-4,13,-122,13,83,13,-128,-112,13,83,-105,-104,-102,-111,83,83,83,-103,83,-132,83,83,13,83,-80,83,-83,-88,-131,13,13,13,13,83,-7,-81,-84,13,83,13,-100,83,83,13,-99,-101,-82,-85,-89,83,-86,13,-87,83,]),'INCLUDE_LOCAL':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[61,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,61,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,61,-113,-7,-81,-84,-79,61,-100,-99,-101,-82,-85,-89,-86,-87,]),'RETURN':([0,1,7,9,19,20,22,26,27,35,45,46,47,48,50,51,56,63,64,65,70,71,85,90,93,94,96,97,99,111,113,125,126,127,128,129,130,132,133,134,137,157,165,166,168,171,175,179,183,187,192,193,194,211,212,216,218,221,225,229,],[60,-75,-120,-76,-5,-124,-77,-74,-126,-78,-125,-16,60,-121,-15,-109,-6,-114,-123,-127,-115,-17,-117,-118,-116,-119,-3,-4,-122,-128,-112,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-80,-83,-88,-131,60,-113,-7,-81,-84,-79,60,-100,-99,-101,-82,-85,-89,-86,-87,]),'NE':([7,20,27,33,45,48,51,54,63,64,65,67,70,72,73,85,90,92,93,94,95,99,106,111,113,125,126,127,128,129,130,131,132,133,134,137,140,145,156,160,168,175,192,197,203,223,231,],[-120,-124,-126,91,-125,-121,-109,-123,-114,-123,-127,91,-115,91,91,-117,-118,91,-116,-119,91,-122,91,-128,-112,-106,-105,-104,-102,-111,-108,91,-107,-103,-110,-132,91,91,91,91,-131,-113,91,91,91,91,91,]),'RBRACE':([7,20,27,45,48,51,63,64,65,70,74,77,85,90,93,94,99,111,113,115,118,119,120,124,125,126,127,128,129,130,132,133,134,137,144,158,159,161,164,168,172,173,175,176,178,185,197,198,199,200,213,214,],[-120,-124,-126,-125,-121,-109,-114,-123,-127,-115,-56,-54,-117,-118,-116,-119,-122,-128,-112,-63,-65,-64,-62,164,-106,-105,-104,-102,-111,-108,-107,-103,-110,-132,-52,-57,-67,-66,-55,-131,195,-41,-113,-136,-48,-68,-53,-45,215,-46,-42,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'while_stmt':([0,47,171,193,],[1,1,1,1,]),'default':([190,205,],[209,220,]),'atom':([0,3,5,13,17,18,36,42,43,44,47,60,80,81,82,83,86,87,88,89,91,98,103,110,117,146,169,170,171,174,188,193,210,228,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'param_list_contents':([78,],[121,]),'inline_func_decl':([24,58,78,79,102,114,149,163,],[74,74,74,74,74,74,74,74,]),'struct_decl_list':([147,],[176,]),'var_decl_stmt':([0,47,171,193,],[8,8,8,8,]),'dowhile_stmt':([0,47,171,193,],[9,9,9,9,]),'case_list':([190,],[205,]),'enum_decl':([0,47,171,193,],[11,11,11,11,]),'struct_decl_stmt':([0,47,171,193,],[12,12,12,12,]),'var_decl':([0,47,109,147,171,182,193,198,],[14,14,153,178,14,153,14,214,]),'small_stmt':([0,47,171,193,],[15,15,15,15,]),'arglist':([98,],[139,]),'array_contents':([5,],[66,]),'module':([0,],[16,]),'enum_name_list':([143,],[172,]),'pointer':([76,104,120,123,124,144,158,180,186,],[115,115,115,115,115,115,115,115,115,]),'expr':([0,3,5,13,17,18,36,42,43,44,47,60,80,81,82,83,86,87,88,89,91,98,103,110,117,146,169,170,171,174,188,193,210,228,],[33,63,67,70,72,73,92,93,94,95,33,106,125,126,127,128,130,131,132,133,134,140,145,156,160,175,140,192,33,197,203,33,223,231,]),'array':([76,104,120,123,124,144,158,180,186,],[119,119,119,119,119,119,119,119,119,]),'switch_stmt':([0,47,171,193,],[22,22,22,22,]),'typedef_stmt':([0,47,171,193,],[23,23,23,23,]),'pointer_or_array':([76,104,120,123,124,144,158,180,186,],[118,118,161,118,118,118,118,118,118,]),'argument':([98,169,],[138,191,]),'param_type_list':([24,58,78,79,102,114,149,163,],[75,75,75,75,75,75,75,75,]),'if_stmt':([0,47,171,193,],[26,26,26,26,]),'empty':([0,176,],[21,200,]),'pass':([0,47,171,193,],[28,28,28,28,]),'include_stmt':([0,47,171,193,],[29,29,29,29,]),'case_expr_list':([210,],[224,]),'define_stmt':([0,47,171,193,],[30,30,30,30,]),'varaglist_elem':([109,182,],[154,201,]),'func_decl':([0,47,171,193,],[31,31,31,31,]),'assign_stmt':([0,47,171,193,],[4,4,4,4,]),'endif_stmt':([0,47,171,193,],[32,32,32,32,]),'struct_decl':([0,47,171,193,],[39,39,39,39,]),'if_orelse':([165,225,],[187,229,]),'parameters':([62,],[108,]),'return_stmt':([0,47,171,193,],[34,34,34,34,]),'stmts':([171,],[193,]),'funcdef':([0,47,171,193,],[35,35,35,35,]),'expr_stmt':([0,47,171,193,],[37,37,37,37,]),'ifndef_stmt':([0,47,171,193,],[38,38,38,38,]),'switch_suite':([136,],[166,]),'break':([0,47,171,193,],[40,40,40,40,]),'varargslist':([109,],[151,]),'case':([190,205,],[207,219,]),'while_orelse':([157,],[183,]),'trailer':([48,],[99,]),'bracket_list':([76,104,123,124,144,158,180,186,],[120,120,120,120,120,120,120,120,]),'optional_comma':([176,],[199,]),'stmt_list':([0,],[47,]),'suite':([100,112,135,148,202,204,217,222,227,],[141,157,165,179,216,218,225,226,230,]),'enum_decl_stmt':([0,47,171,193,],[49,49,49,49,]),'simple_stmt':([0,47,171,193,],[50,50,50,50,]),'power':([0,3,5,13,17,18,36,42,43,44,47,60,80,81,82,83,86,87,88,89,91,98,103,110,117,146,169,170,171,174,188,193,210,228,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'compound_stmt':([0,47,171,193,],[46,46,46,46,]),'type_declaration':([24,58,78,79,102,114,149,163,],[76,104,123,124,144,158,180,186,]),'stmt':([0,47,171,193,],[56,97,194,212,]),'switch_stmts':([190,],[206,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',45),
  ('module -> empty','module',1,'p_empty_module','cparse.py',49),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',54),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',58),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',62),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',66),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',71),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',76),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',80),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',84),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',88),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',89),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',93),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',97),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',101),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',102),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',110),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',114),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',115),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',116),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',117),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',118),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',119),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',120),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',121),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',122),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',123),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',124),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',125),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',126),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',127),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',133),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',139),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',143),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',147),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',151),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',155),
  ('break -> BREAK','break',1,'p_break','cparse.py',159),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',164),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',168),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',172),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',176),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',182),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',186),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',190),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',191),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',196),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',200),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',205),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',211),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',215),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',220),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',225),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',230),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',234),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',241),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',245),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',249),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',253),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',257),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',261),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',267),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',283),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',284),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',288),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',292),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',296),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',300),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',305),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',309),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',314),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',319),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',323),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',329),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',330),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',331),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',332),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',333),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',341),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',346),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',350),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',354),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',360),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',364),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',368),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',372),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',376),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',381),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',385),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',389),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',393),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',397),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',401),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',405),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',409),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',413),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',417),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',421),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',426),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',430),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',434),
  ('expr -> expr PLUS expr','expr',3,'p_add_expr','cparse.py',442),
  ('expr -> expr MINUS expr','expr',3,'p_sub_expr','cparse.py',446),
  ('expr -> expr MULT expr','expr',3,'p_mult_expr','cparse.py',450),
  ('expr -> expr DIV expr','expr',3,'p_div_expr','cparse.py',454),
  ('expr -> expr EQ expr','expr',3,'p_eq_expr','cparse.py',458),
  ('expr -> expr LT expr','expr',3,'p_lt_expr','cparse.py',462),
  ('expr -> expr GT expr','expr',3,'p_gt_expr','cparse.py',466),
  ('expr -> power','expr',1,'p_comparison_power','cparse.py',470),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',474),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',478),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',482),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',486),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',490),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',494),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',498),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',502),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',506),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',510),
  ('expr -> NULL','expr',1,'p_null','cparse.py',518),
  ('power -> atom','power',1,'p_power_1','cparse.py',522),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',526),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',530),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',534),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',538),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',542),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',546),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',550),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',554),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',558),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',562),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',566),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',576),
  ('arglist -> argument','arglist',1,'p_arglist_one_arg','cparse.py',580),
  ('argument -> expr','argument',1,'p_argument','cparse.py',584),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',588),
]
