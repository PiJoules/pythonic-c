
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEGTLTleftPLUSMINUSleftMULTDIVleftNOTleftARROWINCDECARROW ASSIGN BREAK CASE COLON COMMA DEC DEDENT DEF DEFINE DIV DO ELIF ELLIPSIS ELSE ENDIF ENUM EQ FLOAT GT IF IFNDEF INC INCLUDE INCLUDE_LOCAL INDENT INT LBRACE LBRACKET LPAR LT MINUS MULT NAME NE NEWLINE NOT NULL PASS PLUS RBRACE RBRACKET RETURN RPAR STRING STRUCT SWITCH TYPEDEF WHILE WSmodule : stmt_listmodule : emptystmt_list : stmt_list NEWLINEstmt_list : stmt_list stmtstmt_list : NEWLINEstmt_list : stmtfuncdef : DEF NAME parameters COLON suiteparameters : LPAR RPARparameters : LPAR varargslist RPARvarargslist : varaglist_elemvaraglist_elem : NAME\n                          | var_declvaraglist_elem : ELLIPSISvarargslist : varargslist COMMA varaglist_elemstmt : simple_stmt\n                | compound_stmtsimple_stmt : small_stmt NEWLINEsmall_stmt : return_stmt\n                      | include_stmt\n                      | define_stmt\n                      | ifndef_stmt\n                      | endif_stmt\n                      | expr_stmt\n                      | assign_stmt\n                      | func_decl\n                      | var_decl_stmt\n                      | enum_decl_stmt\n                      | struct_decl_stmt\n                      | typedef_stmt\n                      | break\n                      | passtypedef_stmt : TYPEDEF type_declaration NAMEdefine_stmt : DEFINE NAME exprdefine_stmt : DEFINE NAMEifndef_stmt : IFNDEF NAMEendif_stmt : ENDIFpass : PASSbreak : BREAKenum_decl_stmt : enum_declenum_decl : ENUM NAME LBRACE enum_name_list RBRACEenum_name_list : NAMEenum_name_list : enum_name_list COMMA NAMEstruct_decl_stmt : struct_declstruct_decl : STRUCT NAME LBRACE struct_decl_list optional_comma RBRACEoptional_comma : COMMA\n                          | emptystruct_decl_list : struct_decl_list COMMA var_declstruct_decl_list : var_declfunc_decl : DEF NAME parametersfunc_decl : DEF NAME parameters ARROW type_declarationvar_decl_stmt : var_declvar_decl : NAME COLON type_declarationvar_decl : NAME COLON type_declaration ASSIGN exprtype_declaration : NAMEtype_declaration : LBRACE type_declaration RBRACEtype_declaration : inline_func_declinline_func_decl : param_type_list ARROW type_declarationparam_type_list : LPAR RPARparam_type_list : LPAR param_list_contents RPARparam_list_contents : type_declarationparam_list_contents : param_list_contents COMMA type_declarationtype_declaration : type_declaration bracket_listpointer_or_array : pointer\n                            | arraybracket_list : pointer_or_arraybracket_list : bracket_list pointer_or_arraypointer : LBRACKET RBRACKETarray : LBRACKET expr RBRACKETinclude_stmt : INCLUDE STRINGinclude_stmt : INCLUDE_LOCAL STRINGexpr_stmt : exprassign_stmt : expr ASSIGN exprreturn_stmt : RETURN exprcompound_stmt : if_stmt\n                         | while_stmt\n                         | dowhile_stmt\n                         | switch_stmt\n                         | funcdefdowhile_stmt : DO COLON suite WHILE exprwhile_stmt : WHILE expr COLON suitewhile_stmt : WHILE expr COLON suite while_orelsewhile_orelse : ELSE COLON suiteif_stmt : IF expr COLON suiteif_stmt : IF expr COLON suite if_orelseif_orelse : ELSE COLON suiteif_orelse : ELIF expr COLON suiteif_orelse : ELIF expr COLON suite if_orelseswitch_stmt : SWITCH expr COLON switch_suiteswitch_suite : NEWLINE INDENT switch_stmts DEDENTswitch_stmts : case_listswitch_stmts : case_list defaultswitch_stmts : defaultdefault : ELSE COLON suitecase_list : casecase_list : case_list casecase : CASE case_expr_list COLON suitecase_expr_list : exprcase_expr_list : case_expr_list COMMA exprsuite : NEWLINE INDENT stmts DEDENTstmts : stmtstmts : stmts stmtexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr MULT expr\n                | expr DIV expr\n                | expr LT expr\n                | expr EQ expr\n                | expr GT expr\n                | powerexpr : expr NE exprexpr : expr ARROW NAMEexpr : LPAR expr RPARexpr : LT type_declaration GT exprexpr : MULT exprexpr : PLUS exprexpr : MINUS exprexpr : expr INCexpr : expr DECexpr : NOT exprexpr : NULLpower : atompower : atom traileratom : NAMEexpr : INTexpr : FLOATexpr : STRINGatom : LBRACKET RBRACKETatom : LBRACKET array_contents RBRACKETarray_contents : exprarray_contents : array_contents COMMA exprtrailer : LPAR arglist RPARtrailer : LPAR RPARtestlist : testlist_multi COMMA\n                    | testlist_multi testlist_multi : testlist_multi COMMA expr\n                        | exprarglist : arglist COMMA argument\n                | argumentargument : exprempty : '
    
_lr_action_items = {'STRUCT':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[44,-126,-15,-109,-6,44,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,44,-83,-131,-81,-7,-100,44,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'LT':([0,5,6,8,10,11,12,15,19,21,24,26,27,28,30,33,38,39,40,42,46,47,48,51,54,58,59,60,61,69,70,73,74,75,76,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,96,99,100,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,157,158,159,168,169,173,174,175,176,182,184,187,189,190,191,196,197,205,209,210,214,219,221,222,223,226,228,229,231,],[3,3,-123,-126,-15,-109,3,3,-6,3,3,-125,3,-120,84,-16,-5,-74,-78,3,3,3,-121,-124,3,-77,-75,3,-76,84,-123,-119,-17,84,84,-4,-3,84,-117,3,3,3,-118,3,3,3,3,3,3,3,-115,84,84,-127,-122,3,-114,-116,3,3,-112,-102,-106,-110,-111,-108,-107,-104,84,-103,-105,84,-128,3,84,-132,-113,84,-88,3,-80,3,3,-83,84,3,-131,84,-81,-7,-100,3,84,3,-84,3,-99,-101,84,84,-89,-82,-85,3,-86,84,-87,]),'BREAK':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[17,-126,-15,-109,-6,17,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,17,-83,-131,-81,-7,-100,17,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'SWITCH':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[5,-126,-15,-109,-6,5,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,5,-83,-131,-81,-7,-100,5,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'NAME':([0,3,5,7,8,10,11,12,15,19,21,22,24,26,27,28,33,36,38,39,40,42,43,44,46,47,48,50,51,54,58,59,60,61,62,63,65,67,70,71,72,73,74,79,80,82,83,84,85,86,87,88,89,90,91,92,93,94,96,101,103,104,106,107,111,112,113,114,115,116,118,122,124,128,129,130,131,132,133,134,136,137,139,141,142,146,147,148,150,151,153,154,155,157,158,159,167,168,169,173,175,176,180,184,186,187,189,190,191,194,196,197,200,205,209,210,221,222,223,226,228,231,],[6,63,70,63,-126,-15,-109,70,70,-6,70,77,6,-125,70,-120,-16,94,-5,-74,-78,70,97,98,70,70,-121,105,-124,70,-77,-75,70,-76,63,-54,63,-56,-123,63,121,-119,-17,-4,-3,-117,70,70,70,131,-118,70,70,70,70,70,70,70,-115,-127,-122,70,-114,-116,-64,70,-62,-63,-65,70,63,-112,163,-102,-106,-110,-111,-108,-107,-104,-103,-105,171,-128,70,-132,177,63,-113,-66,-67,-55,-57,-88,70,-80,63,6,70,-83,70,-131,-68,-81,163,-7,-100,6,-79,171,70,-84,215,70,-99,-101,-89,-82,-85,70,-86,-87,]),'TYPEDEF':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[7,-126,-15,-109,-6,7,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,7,-83,-131,-81,-7,-100,7,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'STRING':([0,4,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,41,42,46,47,48,51,54,58,59,60,61,70,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,136,137,141,142,146,150,157,158,159,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[8,68,8,-126,-15,-109,8,8,-6,8,8,-125,8,-120,-16,-5,-74,-78,95,8,8,8,-121,-124,8,-77,-75,8,-76,-123,-119,-17,-4,-3,-117,8,8,8,-118,8,8,8,8,8,8,8,-115,-127,-122,8,-114,-116,8,8,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,8,-132,-113,-88,8,-80,8,8,-83,8,-131,-81,-7,-100,8,-79,8,-84,8,-99,-101,-89,-82,-85,8,-86,-87,]),'ELLIPSIS':([124,186,],[164,164,]),'ENDIF':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[2,-126,-15,-109,-6,2,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,2,-83,-131,-81,-7,-100,2,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'NOT':([0,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,70,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,136,137,141,142,146,150,157,158,159,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[12,12,-126,-15,-109,12,12,-6,12,12,-125,12,-120,-16,-5,-74,-78,12,12,12,-121,-124,12,-77,-75,12,-76,-123,-119,-17,-4,-3,-117,12,12,12,-118,12,12,12,12,12,12,12,-115,-127,-122,12,-114,-116,12,12,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,12,-132,-113,-88,12,-80,12,12,-83,12,-131,-81,-7,-100,12,-79,12,-84,12,-99,-101,-89,-82,-85,12,-86,-87,]),'INC':([6,8,11,26,28,30,48,51,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,152,174,176,182,191,214,219,229,],[-123,-126,-109,-125,-120,82,-121,-124,82,-123,82,82,82,82,-117,-118,82,82,82,-127,-122,82,82,-112,82,82,82,-111,82,82,82,82,82,82,82,-128,82,-132,82,82,82,-131,82,82,82,82,82,]),'INDENT':([126,156,],[168,181,]),'PLUS':([0,5,6,8,10,11,12,15,19,21,24,26,27,28,30,33,38,39,40,42,46,47,48,51,54,58,59,60,61,69,70,73,74,75,76,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,96,99,100,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,157,158,159,168,169,173,174,175,176,182,184,187,189,190,191,196,197,205,209,210,214,219,221,222,223,226,228,229,231,],[42,42,-123,-126,-15,-109,42,42,-6,42,42,-125,42,-120,83,-16,-5,-74,-78,42,42,42,-121,-124,42,-77,-75,42,-76,83,-123,-119,-17,83,83,-4,-3,83,-117,42,42,42,-118,42,42,42,42,42,42,42,-115,83,83,-127,-122,42,-114,-116,42,42,-112,-102,83,83,-111,83,83,-104,83,-103,-105,83,-128,42,83,-132,83,83,-88,42,-80,42,42,-83,83,42,-131,83,-81,-7,-100,42,83,42,-84,42,-99,-101,83,83,-89,-82,-85,42,-86,83,-87,]),'ASSIGN':([6,8,11,26,28,30,48,51,63,67,70,73,82,87,96,101,103,106,107,111,113,114,115,120,122,128,129,130,131,132,133,134,136,137,141,146,150,151,153,154,155,176,180,],[-123,-126,-109,-125,-120,91,-121,-124,-54,-56,-123,-119,-117,-118,-115,-127,-122,-114,-116,-64,-62,-63,-65,158,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-66,-67,-55,-57,-131,-68,]),'LPAR':([0,3,5,6,7,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,62,65,70,71,73,74,77,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,118,122,128,129,130,131,132,133,134,136,137,141,142,146,148,150,157,158,159,167,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[15,62,15,-123,62,-126,-15,-109,15,15,-6,15,15,-125,15,-120,-16,-5,-74,-78,15,15,15,104,-124,15,-77,-75,15,-76,62,62,-123,62,-119,-17,124,-4,-3,-117,15,15,15,-118,15,15,15,15,15,15,15,-115,-127,-122,15,-114,-116,15,15,62,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,15,-132,62,-113,-88,15,-80,62,15,15,-83,15,-131,-81,-7,-100,15,-79,15,-84,15,-99,-101,-89,-82,-85,15,-86,-87,]),'ARROW':([6,8,11,26,28,30,48,51,66,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,110,122,125,128,129,130,131,132,133,134,135,136,137,138,141,143,146,149,150,152,165,174,176,182,185,191,214,219,229,],[-123,-126,-109,-125,-120,86,-121,-124,118,86,-123,86,86,86,86,-117,-118,86,86,86,-127,-122,86,86,-58,-112,167,86,86,86,-111,86,86,86,86,86,86,86,-128,86,-132,-59,86,86,-8,86,-131,86,-9,86,86,86,86,]),'LBRACKET':([0,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,63,64,67,70,72,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,109,111,112,113,114,115,116,117,120,122,128,129,130,131,132,133,134,136,137,141,142,146,150,151,153,154,155,157,158,159,168,169,173,175,176,179,180,184,187,188,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[47,47,-126,-15,-109,47,47,-6,47,47,-125,47,-120,-16,-5,-74,-78,47,47,47,-121,-124,47,-77,-75,47,-76,-54,116,-56,-123,116,-119,-17,-4,-3,-117,47,47,47,-118,47,47,47,47,47,47,47,-115,-127,-122,47,-114,-116,116,-64,47,116,-63,-65,47,116,116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,47,-132,-113,-66,-67,-55,-57,-88,47,-80,47,47,-83,47,-131,116,-68,-81,-7,116,-100,47,-79,47,-84,47,-99,-101,-89,-82,-85,47,-86,-87,]),'PASS':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[9,-126,-15,-109,-6,9,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,9,-83,-131,-81,-7,-100,9,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'IFNDEF':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[43,-126,-15,-109,-6,43,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,43,-83,-131,-81,-7,-100,43,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'COMMA':([8,11,26,28,48,51,63,67,70,73,82,87,96,100,101,102,103,106,107,108,109,111,113,114,115,120,122,128,129,130,131,132,133,134,136,137,141,143,144,145,146,150,151,153,154,155,160,161,162,163,164,170,172,174,176,177,178,179,180,182,198,208,212,215,219,220,229,],[-126,-109,-125,-120,-121,-124,-54,-56,-123,-119,-117,-118,-115,-129,-127,142,-122,-114,-116,148,-60,-64,-62,-63,-65,-52,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-139,-138,175,-132,-113,-66,-67,-55,-57,-12,186,-10,-11,-13,-48,194,-130,-131,-41,200,-61,-68,-53,-137,-14,-47,-42,-97,226,-98,]),'WHILE':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,127,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[21,-126,-15,-109,-6,21,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,169,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,21,-83,-131,-81,-7,-100,21,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'DEF':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[22,-126,-15,-109,-6,22,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,22,-83,-131,-81,-7,-100,22,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'CASE':([181,202,204,209,217,230,],[205,205,-94,-99,-95,-96,]),'DO':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[23,-126,-15,-109,-6,23,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,23,-83,-131,-81,-7,-100,23,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'INT':([0,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,70,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,136,137,141,142,146,150,157,158,159,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[51,51,-126,-15,-109,51,51,-6,51,51,-125,51,-120,-16,-5,-74,-78,51,51,51,-121,-124,51,-77,-75,51,-76,-123,-119,-17,-4,-3,-117,51,51,51,-118,51,51,51,51,51,51,51,-115,-127,-122,51,-114,-116,51,51,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,51,-132,-113,-88,51,-80,51,51,-83,51,-131,-81,-7,-100,51,-79,51,-84,51,-99,-101,-89,-82,-85,51,-86,-87,]),'RBRACKET':([8,11,26,28,47,48,51,70,73,82,87,96,100,101,102,103,106,107,116,122,128,129,130,131,132,133,134,136,137,141,146,150,152,174,176,],[-126,-109,-125,-120,101,-121,-124,-123,-119,-117,-118,-115,-129,-127,141,-122,-114,-116,153,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,180,-130,-131,]),'FLOAT':([0,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,70,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,136,137,141,142,146,150,157,158,159,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[26,26,-126,-15,-109,26,26,-6,26,26,-125,26,-120,-16,-5,-74,-78,26,26,26,-121,-124,26,-77,-75,26,-76,-123,-119,-17,-4,-3,-117,26,26,26,-118,26,26,26,26,26,26,26,-115,-127,-122,26,-114,-116,26,26,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,26,-132,-113,-88,26,-80,26,26,-83,26,-131,-81,-7,-100,26,-79,26,-84,26,-99,-101,-89,-82,-85,26,-86,-87,]),'RETURN':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[27,-126,-15,-109,-6,27,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,27,-83,-131,-81,-7,-100,27,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'RBRACE':([8,11,26,28,48,51,63,67,70,73,82,87,96,101,103,106,107,111,113,114,115,117,120,122,128,129,130,131,132,133,134,136,137,141,146,150,151,153,154,155,170,172,176,177,178,180,182,192,193,194,212,215,],[-126,-109,-125,-120,-121,-124,-54,-56,-123,-119,-117,-118,-115,-127,-122,-114,-116,-64,-62,-63,-65,154,-52,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-66,-67,-55,-57,-48,-140,-131,-41,199,-68,-53,211,-46,-45,-47,-42,]),'EQ':([6,8,11,26,28,30,48,51,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,152,174,176,182,191,214,219,229,],[-123,-126,-109,-125,-120,89,-121,-124,89,-123,-119,89,89,89,-117,-118,-115,89,89,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,89,-103,-105,89,-128,89,-132,-113,89,89,-131,89,89,89,89,89,]),'ENUM':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[50,-126,-15,-109,-6,50,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,50,-83,-131,-81,-7,-100,50,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'DEFINE':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[36,-126,-15,-109,-6,36,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,36,-83,-131,-81,-7,-100,36,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'NEWLINE':([0,1,2,6,8,9,10,11,13,14,16,17,18,19,20,24,26,28,29,30,31,32,33,34,35,37,38,39,40,45,48,49,51,53,55,56,57,58,59,61,63,67,68,70,73,74,78,79,80,81,82,87,94,95,96,97,101,103,106,107,111,113,114,115,119,120,121,122,123,125,128,129,130,131,132,133,134,135,136,137,138,140,141,146,150,151,153,154,155,157,159,165,166,173,176,180,182,184,185,187,188,191,197,199,207,209,211,213,216,221,222,223,224,227,228,231,],[38,-43,-36,-123,-126,-37,-15,-109,-30,74,-19,-38,-21,-6,-22,80,-125,-120,-25,-71,-27,-28,-16,-29,-24,-18,-5,-74,-78,-26,-121,-31,-124,-20,-23,-51,-39,-77,-75,-76,-54,-56,-70,-123,-119,-17,126,-4,-3,-73,-117,-118,-34,-69,-115,-35,-127,-122,-114,-116,-64,-62,-63,-65,156,-52,-32,-112,126,-49,-102,-106,-110,-111,-108,-107,-104,-72,-103,-105,-33,126,-128,-132,-113,-66,-67,-55,-57,-88,-80,-8,126,-83,-131,-68,-53,-81,-9,-7,-50,-79,-84,-40,126,-99,-44,126,126,-89,-82,-85,126,126,-86,-87,]),'LBRACE':([3,7,62,65,71,98,105,118,148,167,],[65,65,65,65,65,139,147,65,65,65,]),'INCLUDE':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[41,-126,-15,-109,-6,41,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,41,-83,-131,-81,-7,-100,41,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'COLON':([6,8,11,23,26,28,48,51,69,70,73,76,82,87,96,99,101,103,106,107,122,125,128,129,130,131,132,133,134,136,137,141,146,150,163,165,171,176,183,185,195,201,214,219,220,229,],[71,-126,-109,78,-125,-120,-121,-124,119,-123,-119,123,-117,-118,-115,140,-127,-122,-114,-116,-112,166,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,71,-8,71,-131,207,-9,213,216,224,-97,227,-98,]),'MULT':([0,5,6,8,10,11,12,15,19,21,24,26,27,28,30,33,38,39,40,42,46,47,48,51,54,58,59,60,61,69,70,73,74,75,76,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,96,99,100,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,157,158,159,168,169,173,174,175,176,182,184,187,189,190,191,196,197,205,209,210,214,219,221,222,223,226,228,229,231,],[54,54,-123,-126,-15,-109,54,54,-6,54,54,-125,54,-120,90,-16,-5,-74,-78,54,54,54,-121,-124,54,-77,-75,54,-76,90,-123,-119,-17,90,90,-4,-3,90,-117,54,54,54,-118,54,54,54,54,54,54,54,90,90,90,-127,-122,54,-114,90,54,54,-112,90,90,90,-111,90,90,-104,90,90,-105,90,-128,54,90,-132,90,90,-88,54,-80,54,54,-83,90,54,-131,90,-81,-7,-100,54,90,54,-84,54,-99,-101,90,90,-89,-82,-85,54,-86,90,-87,]),'DIV':([6,8,11,26,28,30,48,51,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,152,174,176,182,191,214,219,229,],[-123,-126,-109,-125,-120,93,-121,-124,93,-123,-119,93,93,93,-117,-118,93,93,93,-127,-122,-114,93,-112,93,93,93,-111,93,93,-104,93,93,-105,93,-128,93,-132,93,93,93,-131,93,93,93,93,93,]),'IF':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[46,-126,-15,-109,-6,46,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,46,-83,-131,-81,-7,-100,46,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'DEDENT':([8,10,11,26,28,33,39,40,48,51,58,59,61,70,73,74,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,173,176,184,187,189,190,191,197,202,203,204,206,209,210,217,218,221,222,223,225,228,230,231,],[-126,-15,-109,-125,-120,-16,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,-83,-131,-81,-7,-100,209,-79,-84,-90,-92,-94,221,-99,-101,-95,-91,-89,-82,-85,-93,-86,-96,-87,]),'NE':([6,8,11,26,28,30,48,51,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,152,174,176,182,191,214,219,229,],[-123,-126,-109,-125,-120,85,-121,-124,85,-123,-119,85,85,85,-117,-118,-115,85,85,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,85,-103,-105,85,-128,85,-132,-113,85,85,-131,85,85,85,85,85,]),'INCLUDE_LOCAL':([0,8,10,11,19,24,26,28,33,38,39,40,48,51,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,168,173,176,184,187,189,190,191,197,209,210,221,222,223,228,231,],[4,-126,-15,-109,-6,4,-125,-120,-16,-5,-74,-78,-121,-124,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,4,-83,-131,-81,-7,-100,4,-79,-84,-99,-101,-89,-82,-85,-86,-87,]),'$end':([0,8,10,11,19,24,25,26,28,33,38,39,40,48,51,52,58,59,61,70,73,74,79,80,82,87,96,101,103,106,107,122,128,129,130,131,132,133,134,136,137,141,146,150,157,159,173,176,184,187,191,197,209,221,222,223,228,231,],[-140,-126,-15,-109,-6,-1,-2,-125,-120,-16,-5,-74,-78,-121,-124,0,-77,-75,-76,-123,-119,-17,-4,-3,-117,-118,-115,-127,-122,-114,-116,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-132,-113,-88,-80,-83,-131,-81,-7,-79,-84,-99,-89,-82,-85,-86,-87,]),'DEC':([6,8,11,26,28,30,48,51,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,152,174,176,182,191,214,219,229,],[-123,-126,-109,-125,-120,87,-121,-124,87,-123,87,87,87,87,-117,-118,87,87,87,-127,-122,87,87,-112,87,87,87,-111,87,87,87,87,87,87,87,-128,87,-132,87,87,87,-131,87,87,87,87,87,]),'GT':([6,8,11,26,28,30,48,51,63,64,67,69,70,73,75,76,81,82,87,96,99,100,101,103,106,107,111,113,114,115,122,128,129,130,131,132,133,134,135,136,137,138,141,143,146,150,151,152,153,154,155,174,176,180,182,191,214,219,229,],[-123,-126,-109,-125,-120,88,-121,-124,-54,112,-56,88,-123,-119,88,88,88,-117,-118,-115,88,88,-127,-122,-114,-116,-64,-62,-63,-65,-112,-102,-106,-110,-111,-108,-107,-104,88,-103,-105,88,-128,88,-132,-113,-66,88,-67,-55,-57,88,-131,-68,88,88,88,88,88,]),'ELSE':([159,173,181,202,204,209,217,228,230,],[183,195,201,201,-94,-99,-95,195,-96,]),'ELIF':([173,209,228,],[196,-99,196,]),'RPAR':([8,11,26,28,48,51,62,63,67,70,73,75,82,87,96,101,103,104,106,107,108,109,111,113,114,115,120,122,124,128,129,130,131,132,133,134,136,137,141,143,144,145,146,150,151,153,154,155,160,161,162,163,164,176,179,180,182,198,208,],[-126,-109,-125,-120,-121,-124,110,-54,-56,-123,-119,122,-117,-118,-115,-127,-122,146,-114,-116,149,-60,-64,-62,-63,-65,-52,-112,165,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,-139,-138,176,-132,-113,-66,-67,-55,-57,-12,185,-10,-11,-13,-131,-61,-68,-53,-137,-14,]),'MINUS':([0,5,6,8,10,11,12,15,19,21,24,26,27,28,30,33,38,39,40,42,46,47,48,51,54,58,59,60,61,69,70,73,74,75,76,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,96,99,100,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,157,158,159,168,169,173,174,175,176,182,184,187,189,190,191,196,197,205,209,210,214,219,221,222,223,226,228,229,231,],[60,60,-123,-126,-15,-109,60,60,-6,60,60,-125,60,-120,92,-16,-5,-74,-78,60,60,60,-121,-124,60,-77,-75,60,-76,92,-123,-119,-17,92,92,-4,-3,92,-117,60,60,60,-118,60,60,60,60,60,60,60,-115,92,92,-127,-122,60,-114,-116,60,60,-112,-102,92,92,-111,92,92,-104,92,-103,-105,92,-128,60,92,-132,92,92,-88,60,-80,60,60,-83,92,60,-131,92,-81,-7,-100,60,92,60,-84,60,-99,-101,92,92,-89,-82,-85,60,-86,92,-87,]),'NULL':([0,5,8,10,11,12,15,19,21,24,26,27,28,33,38,39,40,42,46,47,48,51,54,58,59,60,61,70,73,74,79,80,82,83,84,85,87,88,89,90,91,92,93,94,96,101,103,104,106,107,112,116,122,128,129,130,131,132,133,134,136,137,141,142,146,150,157,158,159,168,169,173,175,176,184,187,189,190,191,196,197,205,209,210,221,222,223,226,228,231,],[28,28,-126,-15,-109,28,28,-6,28,28,-125,28,-120,-16,-5,-74,-78,28,28,28,-121,-124,28,-77,-75,28,-76,-123,-119,-17,-4,-3,-117,28,28,28,-118,28,28,28,28,28,28,28,-115,-127,-122,28,-114,-116,28,28,-112,-102,-106,-110,-111,-108,-107,-104,-103,-105,-128,28,-132,-113,-88,28,-80,28,28,-83,28,-131,-81,-7,-100,28,-79,28,-84,28,-99,-101,-89,-82,-85,28,-86,-87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'struct_decl':([0,24,168,190,],[1,1,1,1,]),'switch_suite':([119,],[157,]),'simple_stmt':([0,24,168,190,],[10,10,10,10,]),'default':([181,202,],[203,218,]),'varaglist_elem':([124,186,],[162,208,]),'var_decl_stmt':([0,24,168,190,],[45,45,45,45,]),'type_declaration':([3,7,62,65,71,118,148,167,],[64,72,109,117,120,155,179,188,]),'array_contents':([47,],[102,]),'var_decl':([0,24,124,139,168,186,190,194,],[56,56,160,170,56,160,56,212,]),'varargslist':([124,],[161,]),'bracket_list':([64,72,109,117,120,155,179,188,],[113,113,113,113,113,113,113,113,]),'argument':([104,175,],[144,198,]),'power':([0,5,12,15,21,24,27,42,46,47,54,60,83,84,85,88,89,90,91,92,93,94,104,112,116,142,158,168,169,175,190,196,205,226,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'pointer':([64,72,109,113,117,120,155,179,188,],[114,114,114,114,114,114,114,114,114,]),'suite':([78,123,140,166,207,213,216,224,227,],[127,159,173,187,222,223,225,228,230,]),'break':([0,24,168,190,],[13,13,13,13,]),'case':([181,202,],[204,217,]),'small_stmt':([0,24,168,190,],[14,14,14,14,]),'param_list_contents':([62,],[108,]),'include_stmt':([0,24,168,190,],[16,16,16,16,]),'ifndef_stmt':([0,24,168,190,],[18,18,18,18,]),'parameters':([77,],[125,]),'struct_decl_list':([139,],[172,]),'param_type_list':([3,7,62,65,71,118,148,167,],[66,66,66,66,66,66,66,66,]),'stmt':([0,24,168,190,],[19,79,189,210,]),'endif_stmt':([0,24,168,190,],[20,20,20,20,]),'typedef_stmt':([0,24,168,190,],[34,34,34,34,]),'case_expr_list':([205,],[220,]),'stmt_list':([0,],[24,]),'empty':([0,172,],[25,193,]),'switch_stmts':([181,],[206,]),'func_decl':([0,24,168,190,],[29,29,29,29,]),'expr':([0,5,12,15,21,24,27,42,46,47,54,60,83,84,85,88,89,90,91,92,93,94,104,112,116,142,158,168,169,175,190,196,205,226,],[30,69,73,75,76,30,81,96,99,100,106,107,128,129,130,132,133,134,135,136,137,138,143,150,152,174,182,30,191,143,30,214,219,229,]),'enum_decl_stmt':([0,24,168,190,],[31,31,31,31,]),'pointer_or_array':([64,72,109,113,117,120,155,179,188,],[115,115,115,151,115,115,115,115,115,]),'struct_decl_stmt':([0,24,168,190,],[32,32,32,32,]),'compound_stmt':([0,24,168,190,],[33,33,33,33,]),'stmts':([168,],[190,]),'assign_stmt':([0,24,168,190,],[35,35,35,35,]),'enum_name_list':([147,],[178,]),'return_stmt':([0,24,168,190,],[37,37,37,37,]),'case_list':([181,],[202,]),'if_stmt':([0,24,168,190,],[39,39,39,39,]),'funcdef':([0,24,168,190,],[40,40,40,40,]),'optional_comma':([172,],[192,]),'trailer':([48,],[103,]),'arglist':([104,],[145,]),'atom':([0,5,12,15,21,24,27,42,46,47,54,60,83,84,85,88,89,90,91,92,93,94,104,112,116,142,158,168,169,175,190,196,205,226,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'pass':([0,24,168,190,],[49,49,49,49,]),'if_orelse':([173,228,],[197,231,]),'module':([0,],[52,]),'define_stmt':([0,24,168,190,],[53,53,53,53,]),'expr_stmt':([0,24,168,190,],[55,55,55,55,]),'array':([64,72,109,113,117,120,155,179,188,],[111,111,111,111,111,111,111,111,111,]),'enum_decl':([0,24,168,190,],[57,57,57,57,]),'switch_stmt':([0,24,168,190,],[58,58,58,58,]),'while_orelse':([159,],[184,]),'inline_func_decl':([3,7,62,65,71,118,148,167,],[67,67,67,67,67,67,67,67,]),'while_stmt':([0,24,168,190,],[59,59,59,59,]),'dowhile_stmt':([0,24,168,190,],[61,61,61,61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> stmt_list','module',1,'p_module','cparse.py',36),
  ('module -> empty','module',1,'p_empty_module','cparse.py',40),
  ('stmt_list -> stmt_list NEWLINE','stmt_list',2,'p_stmt_list_1','cparse.py',45),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_2','cparse.py',50),
  ('stmt_list -> NEWLINE','stmt_list',1,'p_stmt_list_3','cparse.py',55),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_4','cparse.py',60),
  ('funcdef -> DEF NAME parameters COLON suite','funcdef',5,'p_funcdef','cparse.py',112),
  ('parameters -> LPAR RPAR','parameters',2,'p_parameters_empty','cparse.py',124),
  ('parameters -> LPAR varargslist RPAR','parameters',3,'p_parameters_exist','cparse.py',129),
  ('varargslist -> varaglist_elem','varargslist',1,'p_varargslist_one','cparse.py',134),
  ('varaglist_elem -> NAME','varaglist_elem',1,'p_name_or_var_decl','cparse.py',138),
  ('varaglist_elem -> var_decl','varaglist_elem',1,'p_name_or_var_decl','cparse.py',139),
  ('varaglist_elem -> ELLIPSIS','varaglist_elem',1,'p_ellipsis','cparse.py',143),
  ('varargslist -> varargslist COMMA varaglist_elem','varargslist',3,'p_varargslist_many','cparse.py',147),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','cparse.py',152),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','cparse.py',153),
  ('simple_stmt -> small_stmt NEWLINE','simple_stmt',2,'p_simple_stmt','cparse.py',157),
  ('small_stmt -> return_stmt','small_stmt',1,'p_small_stmt','cparse.py',161),
  ('small_stmt -> include_stmt','small_stmt',1,'p_small_stmt','cparse.py',162),
  ('small_stmt -> define_stmt','small_stmt',1,'p_small_stmt','cparse.py',163),
  ('small_stmt -> ifndef_stmt','small_stmt',1,'p_small_stmt','cparse.py',164),
  ('small_stmt -> endif_stmt','small_stmt',1,'p_small_stmt','cparse.py',165),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','cparse.py',166),
  ('small_stmt -> assign_stmt','small_stmt',1,'p_small_stmt','cparse.py',167),
  ('small_stmt -> func_decl','small_stmt',1,'p_small_stmt','cparse.py',168),
  ('small_stmt -> var_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',169),
  ('small_stmt -> enum_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',170),
  ('small_stmt -> struct_decl_stmt','small_stmt',1,'p_small_stmt','cparse.py',171),
  ('small_stmt -> typedef_stmt','small_stmt',1,'p_small_stmt','cparse.py',172),
  ('small_stmt -> break','small_stmt',1,'p_small_stmt','cparse.py',173),
  ('small_stmt -> pass','small_stmt',1,'p_small_stmt','cparse.py',174),
  ('typedef_stmt -> TYPEDEF type_declaration NAME','typedef_stmt',3,'p_typedef_stmt','cparse.py',180),
  ('define_stmt -> DEFINE NAME expr','define_stmt',3,'p_define_stmt','cparse.py',186),
  ('define_stmt -> DEFINE NAME','define_stmt',2,'p_define_stmt_empty','cparse.py',190),
  ('ifndef_stmt -> IFNDEF NAME','ifndef_stmt',2,'p_ifndef_stmt','cparse.py',194),
  ('endif_stmt -> ENDIF','endif_stmt',1,'p_endif_stmt','cparse.py',198),
  ('pass -> PASS','pass',1,'p_pass','cparse.py',203),
  ('break -> BREAK','break',1,'p_break','cparse.py',207),
  ('enum_decl_stmt -> enum_decl','enum_decl_stmt',1,'p_enum_decl_stmt','cparse.py',212),
  ('enum_decl -> ENUM NAME LBRACE enum_name_list RBRACE','enum_decl',5,'p_enum_decl','cparse.py',216),
  ('enum_name_list -> NAME','enum_name_list',1,'p_enum_name_list','cparse.py',220),
  ('enum_name_list -> enum_name_list COMMA NAME','enum_name_list',3,'p_enum_name_list_many','cparse.py',224),
  ('struct_decl_stmt -> struct_decl','struct_decl_stmt',1,'p_struct_decl_stmt','cparse.py',230),
  ('struct_decl -> STRUCT NAME LBRACE struct_decl_list optional_comma RBRACE','struct_decl',6,'p_struct_decl','cparse.py',234),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_seq_comma','cparse.py',238),
  ('optional_comma -> empty','optional_comma',1,'p_optional_seq_comma','cparse.py',239),
  ('struct_decl_list -> struct_decl_list COMMA var_decl','struct_decl_list',3,'p_struct_decl_list','cparse.py',244),
  ('struct_decl_list -> var_decl','struct_decl_list',1,'p_struct_decl_list_one','cparse.py',248),
  ('func_decl -> DEF NAME parameters','func_decl',3,'p_func_decl','cparse.py',253),
  ('func_decl -> DEF NAME parameters ARROW type_declaration','func_decl',5,'p_func_declwith_ret','cparse.py',259),
  ('var_decl_stmt -> var_decl','var_decl_stmt',1,'p_var_decl_stmt','cparse.py',263),
  ('var_decl -> NAME COLON type_declaration','var_decl',3,'p_vardecl','cparse.py',268),
  ('var_decl -> NAME COLON type_declaration ASSIGN expr','var_decl',5,'p_vardecl_assign','cparse.py',273),
  ('type_declaration -> NAME','type_declaration',1,'p_declaration_name','cparse.py',278),
  ('type_declaration -> LBRACE type_declaration RBRACE','type_declaration',3,'p_type_declaration_scoped','cparse.py',282),
  ('type_declaration -> inline_func_decl','type_declaration',1,'p_function_declaration','cparse.py',289),
  ('inline_func_decl -> param_type_list ARROW type_declaration','inline_func_decl',3,'p_inline_func_decl','cparse.py',293),
  ('param_type_list -> LPAR RPAR','param_type_list',2,'p_param_type_list_empty','cparse.py',297),
  ('param_type_list -> LPAR param_list_contents RPAR','param_type_list',3,'p_param_type_list_something','cparse.py',301),
  ('param_list_contents -> type_declaration','param_list_contents',1,'p_param_list_contents','cparse.py',305),
  ('param_list_contents -> param_list_contents COMMA type_declaration','param_list_contents',3,'p_param_list_contents_many','cparse.py',309),
  ('type_declaration -> type_declaration bracket_list','type_declaration',2,'p_declaration_array','cparse.py',316),
  ('pointer_or_array -> pointer','pointer_or_array',1,'p_pointer_or_array','cparse.py',332),
  ('pointer_or_array -> array','pointer_or_array',1,'p_pointer_or_array','cparse.py',333),
  ('bracket_list -> pointer_or_array','bracket_list',1,'p_bracket_list_one','cparse.py',337),
  ('bracket_list -> bracket_list pointer_or_array','bracket_list',2,'p_bracket_list_many','cparse.py',341),
  ('pointer -> LBRACKET RBRACKET','pointer',2,'p_pointer','cparse.py',345),
  ('array -> LBRACKET expr RBRACKET','array',3,'p_array','cparse.py',349),
  ('include_stmt -> INCLUDE STRING','include_stmt',2,'p_include_standard','cparse.py',354),
  ('include_stmt -> INCLUDE_LOCAL STRING','include_stmt',2,'p_include_local','cparse.py',358),
  ('expr_stmt -> expr','expr_stmt',1,'p_expr_stmt','cparse.py',363),
  ('assign_stmt -> expr ASSIGN expr','assign_stmt',3,'p_assign','cparse.py',368),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','cparse.py',373),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',381),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',382),
  ('compound_stmt -> dowhile_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',383),
  ('compound_stmt -> switch_stmt','compound_stmt',1,'p_compound_stmt','cparse.py',384),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','cparse.py',385),
  ('dowhile_stmt -> DO COLON suite WHILE expr','dowhile_stmt',5,'p_dowhile','cparse.py',393),
  ('while_stmt -> WHILE expr COLON suite','while_stmt',4,'p_while_stmt','cparse.py',398),
  ('while_stmt -> WHILE expr COLON suite while_orelse','while_stmt',5,'p_while_stmt_orelse','cparse.py',402),
  ('while_orelse -> ELSE COLON suite','while_orelse',3,'p_while_orelse','cparse.py',406),
  ('if_stmt -> IF expr COLON suite','if_stmt',4,'p_if_stmt','cparse.py',412),
  ('if_stmt -> IF expr COLON suite if_orelse','if_stmt',5,'p_if_else','cparse.py',416),
  ('if_orelse -> ELSE COLON suite','if_orelse',3,'p_orelse_else','cparse.py',420),
  ('if_orelse -> ELIF expr COLON suite','if_orelse',4,'p_orelse_elif_no_orelse','cparse.py',424),
  ('if_orelse -> ELIF expr COLON suite if_orelse','if_orelse',5,'p_orelse_elif_with_orelse','cparse.py',428),
  ('switch_stmt -> SWITCH expr COLON switch_suite','switch_stmt',4,'p_switch','cparse.py',433),
  ('switch_suite -> NEWLINE INDENT switch_stmts DEDENT','switch_suite',4,'p_switch_suite','cparse.py',437),
  ('switch_stmts -> case_list','switch_stmts',1,'p_switch_stmts_case_list','cparse.py',441),
  ('switch_stmts -> case_list default','switch_stmts',2,'p_switch_stmts_cases_with_default','cparse.py',445),
  ('switch_stmts -> default','switch_stmts',1,'p_switch_stmts_default','cparse.py',449),
  ('default -> ELSE COLON suite','default',3,'p_default','cparse.py',453),
  ('case_list -> case','case_list',1,'p_case_list_one','cparse.py',457),
  ('case_list -> case_list case','case_list',2,'p_case_list','cparse.py',461),
  ('case -> CASE case_expr_list COLON suite','case',4,'p_case','cparse.py',465),
  ('case_expr_list -> expr','case_expr_list',1,'p_case_expr_list_one','cparse.py',469),
  ('case_expr_list -> case_expr_list COMMA expr','case_expr_list',3,'p_case_expr_list','cparse.py',473),
  ('suite -> NEWLINE INDENT stmts DEDENT','suite',4,'p_suite','cparse.py',478),
  ('stmts -> stmt','stmts',1,'p_stmts_1','cparse.py',482),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_2','cparse.py',486),
  ('expr -> expr PLUS expr','expr',3,'p_comparison','cparse.py',519),
  ('expr -> expr MINUS expr','expr',3,'p_comparison','cparse.py',520),
  ('expr -> expr MULT expr','expr',3,'p_comparison','cparse.py',521),
  ('expr -> expr DIV expr','expr',3,'p_comparison','cparse.py',522),
  ('expr -> expr LT expr','expr',3,'p_comparison','cparse.py',523),
  ('expr -> expr EQ expr','expr',3,'p_comparison','cparse.py',524),
  ('expr -> expr GT expr','expr',3,'p_comparison','cparse.py',525),
  ('expr -> power','expr',1,'p_comparison','cparse.py',526),
  ('expr -> expr NE expr','expr',3,'p_ne','cparse.py',533),
  ('expr -> expr ARROW NAME','expr',3,'p_expr_struct_deref','cparse.py',537),
  ('expr -> LPAR expr RPAR','expr',3,'p_comparison_scoped','cparse.py',541),
  ('expr -> LT type_declaration GT expr','expr',4,'p_comparison_cast','cparse.py',545),
  ('expr -> MULT expr','expr',2,'p_comparison_deref','cparse.py',549),
  ('expr -> PLUS expr','expr',2,'p_comparison_uadd','cparse.py',553),
  ('expr -> MINUS expr','expr',2,'p_comparison_usub','cparse.py',557),
  ('expr -> expr INC','expr',2,'p_post_inc','cparse.py',561),
  ('expr -> expr DEC','expr',2,'p_post_dec','cparse.py',565),
  ('expr -> NOT expr','expr',2,'p_comparison_not','cparse.py',569),
  ('expr -> NULL','expr',1,'p_null','cparse.py',577),
  ('power -> atom','power',1,'p_power_1','cparse.py',581),
  ('power -> atom trailer','power',2,'p_power_2','cparse.py',585),
  ('atom -> NAME','atom',1,'p_atom_name','cparse.py',589),
  ('expr -> INT','expr',1,'p_atom_int','cparse.py',593),
  ('expr -> FLOAT','expr',1,'p_atom_float','cparse.py',597),
  ('expr -> STRING','expr',1,'p_atom_str','cparse.py',601),
  ('atom -> LBRACKET RBRACKET','atom',2,'p_atom_array_empty','cparse.py',605),
  ('atom -> LBRACKET array_contents RBRACKET','atom',3,'p_atom_array','cparse.py',609),
  ('array_contents -> expr','array_contents',1,'p_array_litral_contents','cparse.py',613),
  ('array_contents -> array_contents COMMA expr','array_contents',3,'p_array_litral_contents_2','cparse.py',617),
  ('trailer -> LPAR arglist RPAR','trailer',3,'p_trailer','cparse.py',624),
  ('trailer -> LPAR RPAR','trailer',2,'p_trailer_empty','cparse.py',628),
  ('testlist -> testlist_multi COMMA','testlist',2,'p_testlist','cparse.py',636),
  ('testlist -> testlist_multi','testlist',1,'p_testlist','cparse.py',637),
  ('testlist_multi -> testlist_multi COMMA expr','testlist_multi',3,'p_testlist_multi','cparse.py',652),
  ('testlist_multi -> expr','testlist_multi',1,'p_testlist_multi','cparse.py',653),
  ('arglist -> arglist COMMA argument','arglist',3,'p_arglist','cparse.py',668),
  ('arglist -> argument','arglist',1,'p_arglist','cparse.py',669),
  ('argument -> expr','argument',1,'p_argument','cparse.py',678),
  ('empty -> <empty>','empty',0,'p_empty','cparse.py',682),
]
